#!/bin/bash
#SLURM HEADERS
#SBATCH --job-name=create_icon_hdpara
#SBATCH --partition=shared
#SBATCH --account=YOUR_ACCOUNT
#SBATCH --ntasks=1
#SBATCH --time=02:00:00
#SBATCH --output=create_icon_hdpara.o%j    # File name for standard output
#SBATCH --error=create_icon_hdpara.e%j     # File name for standard error output
#SBATCH --mail-type=FAIL                   # Notify user by email in case of job failure
#SBATCH --mail-user=YOUR_EMAIL

script_path=$(dirname ${0})
project_name=$(basename ${0})
repository_path=${script_path%/projects/*/scripts}
input_directory=${repository_path}/projects/${project_name}/input
output_directory=${repository_path}/projects/${project_name}/output
working_directory=${repository_path}/projects/${project_name}/workdir



########################################
########################################
#--------------USER INPUT--------------#
########################################
########################################

########################################
#--------------KEY SETTINGS------------#
########################################

#SETTINGS THAT USUALLY NEED TO BE EDITED

#Atmospheric Grid ID
icon_atmo_grid_id=

#Ocean Grid ID
icon_ocean_grid_id=

#Atmospheric Grid Resolution
#Accepts most formats
#e.g. 'r2b3', 'R2B4', 'r02b07', 'R02B09'
icon_atmo_grid_res=r2b8

#Ocean Grid Resolution
#Accepts most formats
#e.g. 'r2b3', 'R2B4', 'r02b07', 'R02B09'
icon_atmo_grid_res=

#Path to atmospheric grid file
icon_grid_filepath=

#Path to (fractional) lsmask
lsmask_filepath=

#Version number
#Use '1' unless this exact configuration
#(same resolutions of both grids, same binary conversion method,
# and same internal sink point option) has been used before
version_num=1

########################################
#------------OTHER SETTINGS------------#
########################################

#SETTINGS THAT CAN USUALLY BE LEFT ALONE

#By default mkproject wil automatically be decided whether
#to use the low or high resolution method based on the
#resolutions chosen but this can be overriden by setting
#this variable to 'high_res' or 'low_res'. The default
#value is 'automatic'
#Note this value is read by mkproject.py itself and
#not actually refer to within the scripts produced
method_to_use=automatic

#Include endorheic basins and internal sink points
#By default set to 'true'. Options are 'true'/'false'
use_true_sinks=true

#By default the script will decide a suitable
#method for converting the fractional landsea
#mask to a binary mask
#For r2b3, r2b4, r2b5 and r2b6 it will use 'hfrac'
#For other resolutions it will use maxl
#Options are: 'maxl', 'minl' and 'hfrac'
binary_conversion_method=

#By default the true sinks filepath should
#be left blank and the true sinks file will
#be set automatically if required
true_sinks_filepath=

########################################
########################################
#-----------END OF USER INPUT----------#
########################################
########################################


icon_atmo_grid_res=$(echo ${icon_atmo_grid_res} | tr [:upper] [:lower] | tr -d 0)
icon_ocean_grid_res=$(echo ${icon_ocean_grid_res} | tr [:upper] [:lower] | tr -d 0)
etop01_filepath=/work/mj0060/m300468/data/ETOPO1_Ice_g_gmt4_grid_registered.nc
config_filepath=${working_directory}/bash_script.cfg
python_config_filepath=${working_directory}/python_script.cfg
binary_lsmask_filepath=${working_directory}/binary_lsmask.nc
orography_filepath=${working_directory}/orography.nc
if [[ icon_atmo_grid_res == "r2b3" ]] || [[ icon_atmo_grid_res == "r2b4" ]] ||
   [[ icon_atmo_grid_res == "r2b5" ]] || [[ icon_atmo_grid_res == "r2b6" ]]; then
   binary_conversion_method_default=hfrac
else
   binary_conversion_method_default=maxl
fi
binary_conversion_method=${binary_conversion_method:-binary_conversion_method_default}
true_sinks_filepath_default=/work/mj0060/m300468/data/true_sinks_version_41???.nc
if ${use_true_sinks}; then
  true_sinks_filepath=${true_sinks_filepath:-true_sinks_filepath_default}
else
  true_sinks_filepath=
fi

cat << EOF > ${config_filepath}
source_directory=${repository_path}
no_conda=false
no_modules=false
no_env_gen=true
python_config_filepath=${python_config_filepath}
EOF

if ${use_true_sinks}; then
  keep_all_internal_basins="True"
else
  keep_all_internal_basins="False"
fi
cat << EOF > ${python_config_filepath}
#Output option for test run of dynamic hd production code
[input_options]
ten_minute_corrected_orography_filename=/home/m/m300468/les_workdir/workdirs/icon_rdirs_r2b5_workdir_sc_0030_0035_seamless_p3/corrected_orog_intermediary_ICE5G_and_tarasov_upscaled_srtm30plus_north_america_only_data_ALG4_sinkless_glcc_olson_lsmask_0k_20170517_003802_with_grid.nc
ten_minute_hydrosheds_au_auf_sa_river_directions_filename=/home/m/m300468/les_workdir/workdirs/icon_rdirs_r2b5_workdir_sc_0030_0035_seamless_p3/rdirs_hydrosheds_au_af_sa_upscaled_10min_20200203_163646_corrg.nc
[input_fieldname_options]
ten_minute_hydrosheds_au_auf_sa_river_directions_fieldname=rdirs
ten_minute_corrected_orography_fieldname=field_value
input_landsea_mask_fieldname=lsm
input_truesinks_fieldname=true_sinks
[output_fieldname_options]
output_river_directions_fieldname=rdirs
output_catchments_fieldname=catchments
output_cumulative_flow_fieldname=acc
[general_options]
keep_all_internal_basins=${keep_all_internal_basins}
replace_internal_basins_with_rdirs_with_truesinks=False
replace_only_catchments=
exclude_catchments=
EOF


# Pre-processing
if [[ ${binary_conversion_method} == "hfrac" ]]; then
  cdo expr,cell_sea_land_mask='(cell_sea_land_mask > 0.5)' ${fractional_lsmask_filepath} ${binary_lsmask_filepath}
  cdo expr,cell_sea_land_mask='(cell_sea_land_mask > 0.0)' ${fractional_lsmask_filepath} ${max_land_binary_lsmask_filepath}
elif [[ ${binary_conversion_method} == "minl" ]]; then
  cdo expr,cell_sea_land_mask='(cell_sea_land_mask >= 1.0)' ${fractional_lsmask_filepath} ${binary_lsmask_filepath}
  cdo expr,cell_sea_land_mask='(cell_sea_land_mask >  0.0)' ${fractional_lsmask_filepath} ${max_land_binary_lsmask_filepath}
elif [[ ${binary_conversion_method} == "maxl" ]]; then
  cdo expr,cell_sea_land_mask='(cell_sea_land_mask >  0.0)' ${fractional_lsmask_filepath} ${binary_lsmask_filepath}
else
  exit 1
fi

cdo remapbil,${icon_grid_filepath} ${etop01_filepath} ${orography_filepath}
#Set output filenames
if ${use_true_sinks}; then
  true_sinks_flag_string="${binary_conversion_method}_"
else
  true_sinks_flag_string=""
fi
output_hdpara_filepath=${output_directory}/hdpara_${icon_atmo_grid_res}_${icon_atmo_grid_id}_sc_${binary_conversion_method}_${true_sinks_flag_string}v${version_num}.nc
output_catchments_filepath=${output_directory}/catch_${icon_atmo_grid_res}_${icon_atmo_grid_id}_sc_${binary_conversion_method}_${true_sinks_flag_string}v${version_num}.nc
output_accumulated_flow_filepath=${output_directory}/acc_${icon_atmo_grid_res}_${icon_atmo_grid_id}_sc_${binary_conversion_method}_${true_sinks_flag_string}v${version_num}.nc
#Run
cmd="${repository_path}/Dynamic_HD_bash_scripts/generate_icon_hdpara_top_level_driver.sh ${orography_filepath} ${binary_lsmask_filepath} ${output_hdpara_filepath} ${output_catchments_filepath} ${output_accumulated_flow_filepath} ${config_filepath} ${working_directory} ${icon_grid_filepath} ${repository_path}/Dynamic_HD_Resources/cotat_plus_standard_params.nl False ${true_sinks_filepath}"
echo "Running:"
echo ${cmd}
eval ${cmd}

# Post Processing
# (No post-processing required at present)
# Clean-up
echo "Post run clean-up not yet implemented!"