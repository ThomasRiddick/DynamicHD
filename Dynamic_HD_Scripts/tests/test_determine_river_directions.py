'''
Test river direction determination algorithm
Created on February 26, 2019

@author: thomasriddick
'''
import unittest
import numpy as np
import determine_river_directions_wrapper
import determine_river_directions_icon_wrapper

class TestRiverDirectionDeterminationDriver(unittest.TestCase):

    def testDetermineRiverDirectionsOne(self):
        nlat = 8
        nlon = 8
        orography = np.array([[10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [10.0,10.0, 9.8,10.0,  0.0, 3.0,10.0,10.0],
                              [10.0, 9.0,10.0,10.0, 10.0,10.0, 4.0,10.0],
                              [10.0, 8.3,10.0,10.0, 10.0,10.0, 4.1,10.0],
                              [10.0, 7.3,10.0,10.0, 10.0,10.0, 4.8,10.0],
                              [10.0,10.0, 7.1, 6.0,  5.0, 4.9,10.0,10.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0]],
                              dtype=np.float64)
        lsmask = np.array([[False,False,False,False, False,False,False,False],
                           [False,False,False,False,  True,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
        truesinks = np.array([[False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False]],
                              dtype=np.int32)
        expected_rdirs_out = np.array([[6,   3,   2,   3,    2,   1,   1,   6],
                                       [3,   2,   1,   6,    0,   4,   4,   1],
                                       [3,   2,   1,   9,    8,   7,   7,   4],
                                       [3,   2,   1,   6,    9,   9,   8,   7],
                                       [6,   3,   3,   3,    3,   9,   8,   7],
                                       [9,   6,   6,   6,    6,   9,   8,   7],
                                       [6,   9,   9,   9,    9,   8,   7,   6],
                                       [9,   8,   7,   4,    4,   6,   9,   9]],
                                       dtype=np.float64)
        rdirs = np.zeros((8,8),dtype=np.float64)
        always_flow_to_sea_in = True
        use_diagonal_nbrs_in = True
        mark_pits_as_true_sinks_in = False
        determine_river_directions_wrapper.determine_river_directions(rdirs,
                                                                      orography,
                                                                      lsmask,
                                                                      truesinks,
                                                                      always_flow_to_sea_in,
                                                                      use_diagonal_nbrs_in,
                                                                      mark_pits_as_true_sinks_in)
        np.testing.assert_array_equal(rdirs,expected_rdirs_out)

    def testDetermineRiverDirectionsTwo(self):
        nlat = 8
        nlon = 8
        orography = np.array([[10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [10.0,10.0, 9.8,10.0, -1.0, 3.0,10.0,10.0],
                              [10.0, 9.0,10.0,10.0, 10.0,10.0, 4.0,10.0],
                              [10.0, 8.3,10.0,10.0, 10.0,10.0, 4.1,10.0],
                              [10.0, 7.3,10.0,10.0, 10.0,10.0, 4.8,10.0],
                              [10.0,10.0, 7.1, 6.0,  5.0, 4.9,10.0,10.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0]],
                              dtype=np.float64)
        lsmask = np.array([[False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
        truesinks = np.array([[False,False,False,False, False,False,False,False],
                              [False,False,False,False,  True,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False]],
                              dtype=np.int32)
        expected_rdirs_out = np.array([[6,   3,   2,   3,    2,   1,   1,   6],
                                       [3,   2,   1,   6,    5,   4,   4,   1],
                                       [3,   2,   1,   9,    8,   7,   7,   4],
                                       [3,   2,   1,   6,    9,   9,   8,   7],
                                       [6,   3,   3,   3,    3,   9,   8,   7],
                                       [9,   6,   6,   6,    6,   9,   8,   7],
                                       [6,   9,   9,   9,    9,   8,   7,   6],
                                       [9,   8,   7,   4,    4,   6,   9,   9]],
                                       dtype=np.float64)
        rdirs = np.zeros((8,8),dtype=np.float64)
        always_flow_to_sea_in = True
        use_diagonal_nbrs_in = True
        mark_pits_as_true_sinks_in = False
        determine_river_directions_wrapper.determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in)
        np.testing.assert_array_equal(rdirs,expected_rdirs_out)

    def testDetermineRiverDirectionsThree(self):
        nlat = 8
        nlon = 8
        orography = np.array([[10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [0.0,  3.0, 10.0,10.0, 10.0,10.0, 9.8,10.0],
                              [10.0,10.0, 4.0,10.0, 10.0, 9.0,10.0,10.0],
                              [10.0,10.0, 4.1,10.0, 10.0, 8.3,10.0,10.0],
                              [10.0,10.0, 4.8,10.0, 10.0, 7.3,10.0,10.0],
                              [5.0, 4.9,10.0,10.0, 10.0,10.0, 7.1, 6.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0]],
                              dtype=np.float64)
        lsmask = np.array([[False,False,False,False, False,False,False,False],
                           [True,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
        truesinks = np.array([[False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False]],
                              dtype=np.int32)
        expected_rdirs_out = np.array([[2,   1,   1,   6,    6,   3,   2,   3],
                                       [0,   4,   4,   1,    3,   2,   1,   6],
                                       [8,   7,   7,   4,    3,   2,   1,   9],
                                       [4,   9,   8,   7,    3,   2,   1,   7],
                                       [3,   9,   8,   7,    6,   3,   3,   3],
                                       [6,   9,   8,   7,    9,   6,   6,   6],
                                       [9,   8,   7,   1,    3,   9,   9,   9],
                                       [8,   7,   4,   4,    6,   6,   6,   9]],
                                       dtype=np.float64)
        rdirs = np.zeros((8,8),dtype=np.float64)
        always_flow_to_sea_in = True
        use_diagonal_nbrs_in = True
        mark_pits_as_true_sinks_in = False
        determine_river_directions_wrapper.determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in)
        np.testing.assert_array_equal(rdirs,expected_rdirs_out)

    def testDetermineRiverDirectionsFour(self):
        nlat = 8
        nlon = 8
        orography = np.array([[10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [2.0,  3.0, 10.0,10.0, 10.0,10.0, 9.8,10.0],
                              [10.0,10.0, 4.0,10.0, 10.0, 9.0,10.0,10.0],
                              [10.0,10.0, 4.1,10.0, 10.0, 8.3,10.0,10.0],
                              [10.0,10.0, 4.8,10.0, 10.0, 7.3,10.0,10.0],
                              [5.0, 4.9,10.0,10.0, 10.0,10.0, 7.1, 6.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0]],
                              dtype=np.float64)
        lsmask = np.array([[False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
        truesinks = np.array([[False,False,False,False, False,False,False,False],
                              [True,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False]],
                              dtype=np.int32)
        expected_rdirs_out = np.array([[2,   1,   1,   6,    6,   3,   2,   3],
                                       [5,   4,   4,   1,    3,   2,   1,   6],
                                       [8,   7,   7,   4,    3,   2,   1,   9],
                                       [4,   9,   8,   7,    3,   2,   1,   7],
                                       [3,   9,   8,   7,    6,   3,   3,   3],
                                       [6,   9,   8,   7,    9,   6,   6,   6],
                                       [9,   8,   7,   1,    3,   9,   9,   9],
                                       [8,   7,   4,   4,    6,   6,   6,   9]],
                                       dtype=np.float64)
        rdirs = np.zeros((8,8),dtype=np.float64)
        always_flow_to_sea_in = True
        use_diagonal_nbrs_in = True
        mark_pits_as_true_sinks_in = False
        determine_river_directions_wrapper.determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in)
        np.testing.assert_array_equal(rdirs,expected_rdirs_out)

    def testDetermineRiverDirectionsFive(self):
        nlat = 8
        nlon = 8
        orography = np.array([[10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [2.0,  3.0, 10.0,10.0, 10.0,10.0, 9.8,10.0],
                              [10.0,10.0, 4.0,10.0, 10.0, 9.0,10.0,10.0],
                              [10.0,10.0, 4.1,10.0, 10.0, 8.3,10.0, 1.0],
                              [10.0,10.0, 4.8,10.0, 10.0, 7.3,10.0,10.0],
                              [5.0, 4.9,10.0,10.0, 10.0,10.0, 7.1, 6.0],
                              [10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0],
                              [10.0,-1.0,10.0, 1.2,  1.3,10.0,10.0,10.0]],
                              dtype=np.float64)
        lsmask = np.array([[False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
        truesinks = np.array([[False,False,False,False, False,False,False,False],
                              [True,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False],
                              [False,False,False,False, False,False,False,False]],
                              dtype=np.int32)
        expected_rdirs_out = np.array([[2,   1,   1,   6,    6,   3,   2,   3],
                                       [5,   4,   4,   1,    3,   2,   1,   6],
                                       [1,   7,   7,   4,    3,   2,   3,   2],
                                       [4,   9,   8,   7,    3,   2,   6,   5],
                                       [7,   9,   8,   7,    6,   3,   9,   8],
                                       [6,   9,   8,   7,    9,   6,   6,   6],
                                       [3,   2,   1,   2,    1,   1,   9,   9],
                                       [6,   5,   4,   5,    4,   4,   6,   9]],
                                       dtype=np.float64)
        rdirs = np.zeros((8,8),dtype=np.float64)
        always_flow_to_sea_in = True
        use_diagonal_nbrs_in = True
        mark_pits_as_true_sinks_in = True
        determine_river_directions_wrapper.determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in)
        np.testing.assert_array_equal(rdirs,expected_rdirs_out)

class TestICONRiverDirectionDeterminationDriver(unittest.TestCase):

    def testDetermineRiverDirectionsICONOne(self):
        cell_neighbors = np.array([5,7,2,
                                   1,10,3,
                                   2,13,4,
                                   3,16,5,
                                   4,19,1,
                                   20,21,7,
                                   1,6,8,
                                   7,23,9,
                                   8,25,10,
                                   2,9,11,
                                   10,27,12,
                                   11,29,13,
                                   3,12,14,
                                   13,31,15,
                                   14,33,16,
                                   4,15,17,
                                   16,35,18,
                                   17,37,19,
                                   5,18,20,
                                   19,39,6,
                                   6,40,22,
                                   21,41,23,
                                   8,22,24,
                                   23,43,25,
                                   24,26,9,
                                   25,45,27,
                                   11,26,28,
                                   27,47,29,
                                   12,28,30,
                                   29,49,31,
                                   14,30,32,
                                   31,51,33,
                                   15,32,34,
                                   33,53,35,
                                   17,34,36,
                                   35,55,37,
                                   18,36,38,
                                   37,57,39,
                                   20,38,40,
                                   39,59,21,
                                   22,60,42,
                                   41,61,43,
                                   24,42,44,
                                   43,63,45,
                                   26,44,46,
                                   45,64,47,
                                   28,46,48,
                                   47,66,49,
                                   30,48,50,
                                   49,67,51,
                                   32,50,52,
                                   51,69,53,
                                   34,52,54,
                                   53,70,55,
                                   36,54,56,
                                   55,72,57,
                                   38,56,58,
                                   57,73,59,
                                   40,58,60,
                                   59,75,41,
                                   42,75,62,
                                   61,76,63,
                                   44,62,64,
                                   46,63,65,
                                   64,77,66,
                                   48,65,67,
                                   50,66,68,
                                   67,78,69,
                                   52,68,70,
                                   54,69,71,
                                   70,79,72,
                                   56,71,73,
                                   58,72,74,
                                   73,80,75,
                                   60,74,61,
                                   62,80,77,
                                   65,76,78,
                                   68,77,79,
                                   71,78,80,
                                   74,79,76],
                                   dtype=np.int32)
        orography_in = np.array([10.0,
                                 10.0,
                                 1.0,
                                 10.0,
                                 10.0,
                                 9.0,
                                 8.0,
                                 7.0,
                                 1.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 7.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 8.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 9.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 1.0,
                                 7.0,
                                 8.0,
                                 9.0,
                                 10.0,
                                 10.0,
                                 9.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 8.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 7.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 1.0,
                                 10.0],
                                 dtype=np.float64)
        landsea_in = np.array([False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False],
                               dtype=np.int32)
        next_cell_index_expected_out = np.array([3,
                                                 9,
                                                 -1,
                                                 3,
                                                 3,
                                                 8,
                                                 9,
                                                 9,
                                                 -1,
                                                 3,
                                                 9,
                                                 3,
                                                 3,
                                                 3,
                                                 3,
                                                 3,
                                                 36,
                                                 36,
                                                 7,
                                                 7,
                                                 8,
                                                 43,
                                                 9,
                                                 9,
                                                 43,
                                                 9,
                                                 9,
                                                 45,
                                                 13,
                                                 13,
                                                 13,
                                                 30,
                                                 14,
                                                 55,
                                                 55,
                                                 55,
                                                 55,
                                                 55,
                                                 6,
                                                 6,
                                                 43,
                                                 43,
                                                 -1,
                                                 43,
                                                 43,
                                                 44,
                                                 45,
                                                 30,
                                                 30,
                                                 30,
                                                 30,
                                                 33,
                                                 55,
                                                 71,
                                                 71,
                                                 71,
                                                 55,
                                                 60,
                                                 22,
                                                 22,
                                                 43,
                                                 43,
                                                 43,
                                                 44,
                                                 46,
                                                 49,
                                                 49,
                                                 79,
                                                 79,
                                                 79,
                                                 79,
                                                 79,
                                                 79,
                                                 79,
                                                 60,
                                                 79,
                                                 79,
                                                 79,
                                                 -1,
                                                 79],
                                                dtype=np.int32)
        true_sinks_in = np.zeros((80),dtype=bool)
        next_cell_index_out = np.zeros((80),dtype=np.int32)
        use_secondary_neighbors_in=True
        always_flow_to_sea_in=True
        mark_pits_as_True_sinks_in=True
        determine_river_directions_icon_wrapper.\
            determine_river_directions_icon_cpp(orography_in,
                                                np.logical_not(landsea_in).astype(np.int32),
                                                np.zeros((80),dtype=np.float64),
                                                true_sinks_in.astype(np.int32),
                                                cell_neighbors,
                                                next_cell_index_out,
                                                fractional_landsea_mask_in=False,
                                                always_flow_to_sea_in=True,
                                                mark_pits_as_true_sinks_in=True)
        np.testing.assert_array_equal(next_cell_index_out,
                                      next_cell_index_expected_out)

    def testDetermineRiverDirectionsICONTwo(self):
        cell_neighbors = np.array([5,7,2,
                                   1,10,3,
                                   2,13,4,
                                   3,16,5,
                                   4,19,1,
                                   20,21,7,
                                   1,6,8,
                                   7,23,9,
                                   8,25,10,
                                   2,9,11,
                                   10,27,12,
                                   11,29,13,
                                   3,12,14,
                                   13,31,15,
                                   14,33,16,
                                   4,15,17,
                                   16,35,18,
                                   17,37,19,
                                   5,18,20,
                                   19,39,6,
                                   6,40,22,
                                   21,41,23,
                                   8,22,24,
                                   23,43,25,
                                   24,26,9,
                                   25,45,27,
                                   11,26,28,
                                   27,47,29,
                                   12,28,30,
                                   29,49,31,
                                   14,30,32,
                                   31,51,33,
                                   15,32,34,
                                   33,53,35,
                                   17,34,36,
                                   35,55,37,
                                   18,36,38,
                                   37,57,39,
                                   20,38,40,
                                   39,59,21,
                                   22,60,42,
                                   41,61,43,
                                   24,42,44,
                                   43,63,45,
                                   26,44,46,
                                   45,64,47,
                                   28,46,48,
                                   47,66,49,
                                   30,48,50,
                                   49,67,51,
                                   32,50,52,
                                   51,69,53,
                                   34,52,54,
                                   53,70,55,
                                   36,54,56,
                                   55,72,57,
                                   38,56,58,
                                   57,73,59,
                                   40,58,60,
                                   59,75,41,
                                   42,75,62,
                                   61,76,63,
                                   44,62,64,
                                   46,63,65,
                                   64,77,66,
                                   48,65,67,
                                   50,66,68,
                                   67,78,69,
                                   52,68,70,
                                   54,69,71,
                                   70,79,72,
                                   56,71,73,
                                   58,72,74,
                                   73,80,75,
                                   60,74,61,
                                   62,80,77,
                                   65,76,78,
                                   68,77,79,
                                   71,78,80,
                                   74,79,76],
                                   dtype=np.int32)
        orography_in = np.array([10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 3.0,
                                 0.1,
                                 4.0,
                                 10.0,
                                 10.0,
                                 0.7,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 7.0,
                                 10.0,
                                 8.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 1.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 0.8,
                                 10.0,
                                 10.0,
                                 10.0,
                                 4.0,
                                 10.0,
                                 3.0,
                                 2.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 7.0,
                                 10.0,
                                 8.0,
                                 10.0,
                                 10.0,
                                 3.0,
                                 10.0,
                                 4.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 0.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0],
                                 dtype=np.float64)
        landsea_in = np.array([False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False],
                               dtype=np.int32)
        next_cell_index_expected_out = np.array([20,
                                                 1,
                                                 16,
                                                 16,
                                                 16,
                                                 20,
                                                 20,
                                                 1,
                                                 26,
                                                 26,
                                                 26,
                                                 28,
                                                 16,
                                                 16,
                                                 16,
                                                 -1,
                                                 16,
                                                 16,
                                                 16,
                                                 -1,
                                                 20,
                                                 59,
                                                 43,
                                                 45,
                                                 45,
                                                 46,
                                                 46,
                                                 46,
                                                 28,
                                                 28,
                                                 15,
                                                 34,
                                                 16,
                                                 16,
                                                 16,
                                                 34,
                                                 20,
                                                 20,
                                                 20,
                                                 20,
                                                 59,
                                                 43,
                                                 45,
                                                 46,
                                                 46,
                                                 65,
                                                 65,
                                                 65,
                                                 28,
                                                 52,
                                                 34,
                                                 34,
                                                 34,
                                                 34,
                                                 34,
                                                 57,
                                                 39,
                                                 39,
                                                 39,
                                                 59,
                                                 43,
                                                 65,
                                                 65,
                                                 65,
                                                 -1,
                                                 65,
                                                 65,
                                                 65,
                                                 52,
                                                 52,
                                                 54,
                                                 57,
                                                 57,
                                                 59,
                                                 59,
                                                 65,
                                                 65,
                                                 65,
                                                 78,
                                                 78],
                                                 dtype=np.int32)
        true_sinks_in = np.zeros((80),dtype=bool)
        next_cell_index_out = np.zeros((80),dtype=np.int32)
        use_secondary_neighbors_in=True
        always_flow_to_sea_in=True
        mark_pits_as_True_sinks_in=True
        determine_river_directions_icon_wrapper.\
            determine_river_directions_icon_cpp(orography_in,
                                                np.logical_not(landsea_in).astype(np.int32),
                                                np.zeros((80),dtype=np.float64),
                                                true_sinks_in.astype(np.int32),
                                                cell_neighbors,
                                                next_cell_index_out,
                                                fractional_landsea_mask_in=False,
                                                always_flow_to_sea_in=True,
                                                mark_pits_as_true_sinks_in=True)
        np.testing.assert_array_equal(next_cell_index_out,
                                      next_cell_index_expected_out)

    def testDetermineRiverDirectionsICONThree(self):
        cell_neighbors = np.array([5,7,2,
                                   1,10,3,
                                   2,13,4,
                                   3,16,5,
                                   4,19,1,
                                   20,21,7,
                                   1,6,8,
                                   7,23,9,
                                   8,25,10,
                                   2,9,11,
                                   10,27,12,
                                   11,29,13,
                                   3,12,14,
                                   13,31,15,
                                   14,33,16,
                                   4,15,17,
                                   16,35,18,
                                   17,37,19,
                                   5,18,20,
                                   19,39,6,
                                   6,40,22,
                                   21,41,23,
                                   8,22,24,
                                   23,43,25,
                                   24,26,9,
                                   25,45,27,
                                   11,26,28,
                                   27,47,29,
                                   12,28,30,
                                   29,49,31,
                                   14,30,32,
                                   31,51,33,
                                   15,32,34,
                                   33,53,35,
                                   17,34,36,
                                   35,55,37,
                                   18,36,38,
                                   37,57,39,
                                   20,38,40,
                                   39,59,21,
                                   22,60,42,
                                   41,61,43,
                                   24,42,44,
                                   43,63,45,
                                   26,44,46,
                                   45,64,47,
                                   28,46,48,
                                   47,66,49,
                                   30,48,50,
                                   49,67,51,
                                   32,50,52,
                                   51,69,53,
                                   34,52,54,
                                   53,70,55,
                                   36,54,56,
                                   55,72,57,
                                   38,56,58,
                                   57,73,59,
                                   40,58,60,
                                   59,75,41,
                                   42,75,62,
                                   61,76,63,
                                   44,62,64,
                                   46,63,65,
                                   64,77,66,
                                   48,65,67,
                                   50,66,68,
                                   67,78,69,
                                   52,68,70,
                                   54,69,71,
                                   70,79,72,
                                   56,71,73,
                                   58,72,74,
                                   73,80,75,
                                   60,74,61,
                                   62,80,77,
                                   65,76,78,
                                   68,77,79,
                                   71,78,80,
                                   74,79,76],
                                   dtype=np.int32)
        orography_in = np.array([10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 6.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 7.4,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 5.0,
                                 0.5,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 0.4,
                                 5.2,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 9.5,
                                 7.5,
                                 10.0,
                                 10.0,
                                 10.0,
                                 8.7,
                                 10.0,
                                 10.0,
                                 3.2,
                                 3.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 7.1,
                                 9.2,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0,
                                 10.0],
                                 dtype=np.float64)
        landsea_in = np.array([False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False],
                               dtype=np.int32)
        next_cell_index_expected_out = np.array([9,
                                                 9,
                                                 1,
                                                 17,
                                                 17,
                                                 1,
                                                 9,
                                                 9,
                                                 27,
                                                 27,
                                                 27,
                                                 27,
                                                 3,
                                                 33,
                                                 33,
                                                 33,
                                                 33,
                                                 17,
                                                 17,
                                                 1,
                                                 6,
                                                 43,
                                                 9,
                                                 26,
                                                 27,
                                                 27,
                                                 -1,
                                                 27,
                                                 27,
                                                 51,
                                                 33,
                                                 33,
                                                 -1,
                                                 33,
                                                 33,
                                                 34,
                                                 55,
                                                 55,
                                                 6,
                                                 6,
                                                 43,
                                                 43,
                                                 26,
                                                 26,
                                                 27,
                                                 27,
                                                 27,
                                                 50,
                                                 51,
                                                 51,
                                                 33,
                                                 33,
                                                 33,
                                                 34,
                                                 34,
                                                 55,
                                                 55,
                                                 56,
                                                 39,
                                                 42,
                                                 43,
                                                 43,
                                                 43,
                                                 47,
                                                 47,
                                                 50,
                                                 51,
                                                 51,
                                                 51,
                                                 55,
                                                 55,
                                                 55,
                                                 56,
                                                 59,
                                                 42,
                                                 74,
                                                 79,
                                                 79,
                                                 74,
                                                 74],
                                                 dtype=np.int32)
        true_sinks_in = np.zeros((80),dtype=bool)
        next_cell_index_out = np.zeros((80),dtype=np.int32)
        use_secondary_neighbors_in=True
        always_flow_to_sea_in=True
        mark_pits_as_True_sinks_in=True
        determine_river_directions_icon_wrapper.\
            determine_river_directions_icon_cpp(orography_in,
                                                np.logical_not(landsea_in).astype(np.int32),
                                                np.zeros((80),dtype=np.float64),
                                                true_sinks_in.astype(np.int32),
                                                cell_neighbors,
                                                next_cell_index_out,
                                                fractional_landsea_mask_in=False,
                                                always_flow_to_sea_in=True,
                                                mark_pits_as_true_sinks_in=True)
        np.testing.assert_array_equal(next_cell_index_out,
                                      next_cell_index_expected_out)

    def testDetermineRiverDirectionsICONFour(self):
        cell_neighbors = np.array([5,7,2,
                                   1,10,3,
                                   2,13,4,
                                   3,16,5,
                                   4,19,1,
                                   20,21,7,
                                   1,6,8,
                                   7,23,9,
                                   8,25,10,
                                   2,9,11,
                                   10,27,12,
                                   11,29,13,
                                   3,12,14,
                                   13,31,15,
                                   14,33,16,
                                   4,15,17,
                                   16,35,18,
                                   17,37,19,
                                   5,18,20,
                                   19,39,6,
                                   6,40,22,
                                   21,41,23,
                                   8,22,24,
                                   23,43,25,
                                   24,26,9,
                                   25,45,27,
                                   11,26,28,
                                   27,47,29,
                                   12,28,30,
                                   29,49,31,
                                   14,30,32,
                                   31,51,33,
                                   15,32,34,
                                   33,53,35,
                                   17,34,36,
                                   35,55,37,
                                   18,36,38,
                                   37,57,39,
                                   20,38,40,
                                   39,59,21,
                                   22,60,42,
                                   41,61,43,
                                   24,42,44,
                                   43,63,45,
                                   26,44,46,
                                   45,64,47,
                                   28,46,48,
                                   47,66,49,
                                   30,48,50,
                                   49,67,51,
                                   32,50,52,
                                   51,69,53,
                                   34,52,54,
                                   53,70,55,
                                   36,54,56,
                                   55,72,57,
                                   38,56,58,
                                   57,73,59,
                                   40,58,60,
                                   59,75,41,
                                   42,75,62,
                                   61,76,63,
                                   44,62,64,
                                   46,63,65,
                                   64,77,66,
                                   48,65,67,
                                   50,66,68,
                                   67,78,69,
                                   52,68,70,
                                   54,69,71,
                                   70,79,72,
                                   56,71,73,
                                   58,72,74,
                                   73,80,75,
                                   60,74,61,
                                   62,80,77,
                                   65,76,78,
                                   68,77,79,
                                   71,78,80,
                                   74,79,76],
                                   dtype=np.int32)
        orography_in = np.array([11.0,
                                 12.0,
                                 13.0,
                                 14.0,
                                 15.0,
                                 16.0,
                                 17.0,
                                 6.0,
                                 7.0,
                                 20.0,
                                 7.5,
                                 4.0,
                                 23.0,
                                 2.0,
                                 4.5,
                                 26.0,
                                 3.0,
                                 7.0,
                                 29.0,
                                 30.0,
                                 31.0,
                                 32.0,
                                 4.0,
                                 1.0,
                                 5.0,
                                 36.0,
                                 7.0,
                                 5.0,
                                 2.0,
                                 0.0,
                                 3.0,
                                 4.0,
                                 5.0,
                                 0.0,
                                 1.0,
                                 4.0,
                                 6.0,
                                 38.0,
                                 39.0,
                                 40.0,
                                 41.0,
                                 42.0,
                                 0.0,
                                 1.0,
                                 3.0,
                                 4.0,
                                 47.0,
                                 6.0,
                                 2.0,
                                 5.0,
                                 51.0,
                                 3.0,
                                 1.0,
                                 2.0,
                                 55.0,
                                 3.5,
                                 2.5,
                                 0.5,
                                 0.0,
                                 60.0,
                                 61.0,
                                 62.0,
                                 3.0,
                                 5.0,
                                 65.0,
                                 8.0,
                                 9.0,
                                 68.0,
                                 6.0,
                                 7.0,
                                 71.0,
                                 4.5,
                                 1.5,
                                 74.0,
                                 75.0,
                                 76.0,
                                 77.0,
                                 78.0,
                                 79.0,
                                 80.0],
                                 dtype=np.float64)
        landsea_in = np.array([False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False],
                               dtype=np.int32)
        next_cell_index_expected_out = np.array([8,
                                                 12,
                                                 14,
                                                 14,
                                                 17,
                                                 23,
                                                 23,
                                                 24,
                                                 24,
                                                 12,
                                                 29,
                                                 30,
                                                 30,
                                                 30,
                                                 34,
                                                 34,
                                                 34,
                                                 35,
                                                 17,
                                                 37,
                                                 59,
                                                 59,
                                                 43,
                                                 43,
                                                 43,
                                                 43,
                                                 29,
                                                 30,
                                                 30,
                                                 -1,
                                                 30,
                                                 30,
                                                 34,
                                                 -1,
                                                 34,
                                                 34,
                                                 35,
                                                 59,
                                                 59,
                                                 59,
                                                 59,
                                                 43,
                                                 -1,
                                                 43,
                                                 43,
                                                 44,
                                                 30,
                                                 30,
                                                 30,
                                                 30,
                                                 30,
                                                 34,
                                                 34,
                                                 34,
                                                 34,
                                                 58,
                                                 59,
                                                 59,
                                                 -1,
                                                 59,
                                                 43,
                                                 43,
                                                 43,
                                                 44,
                                                 63,
                                                 49,
                                                 49,
                                                 52,
                                                 53,
                                                 53,
                                                 73,
                                                 58,
                                                 59,
                                                 59,
                                                 59,
                                                 63,
                                                 63,
                                                 69,
                                                 73,
                                                 73],
                                                 dtype=np.int32)
        true_sinks_in = np.zeros((80),dtype=bool)
        next_cell_index_out = np.zeros((80),dtype=np.int32)
        use_secondary_neighbors_in=True
        always_flow_to_sea_in=True
        mark_pits_as_True_sinks_in=True
        determine_river_directions_icon_wrapper.\
            determine_river_directions_icon_cpp(orography_in,
                                                np.logical_not(landsea_in).astype(np.int32),
                                                np.zeros((80),dtype=np.float64),
                                                true_sinks_in.astype(np.int32),
                                                cell_neighbors,
                                                next_cell_index_out,
                                                fractional_landsea_mask_in=False,
                                                always_flow_to_sea_in=True,
                                                mark_pits_as_true_sinks_in=True)
        np.testing.assert_array_equal(next_cell_index_out,
                                      next_cell_index_expected_out)

    def testDetermineRiverDirectionsICONFive(self):
        cell_neighbors = np.array([5,7,2,
                                   1,10,3,
                                   2,13,4,
                                   3,16,5,
                                   4,19,1,
                                   20,21,7,
                                   1,6,8,
                                   7,23,9,
                                   8,25,10,
                                   2,9,11,
                                   10,27,12,
                                   11,29,13,
                                   3,12,14,
                                   13,31,15,
                                   14,33,16,
                                   4,15,17,
                                   16,35,18,
                                   17,37,19,
                                   5,18,20,
                                   19,39,6,
                                   6,40,22,
                                   21,41,23,
                                   8,22,24,
                                   23,43,25,
                                   24,26,9,
                                   25,45,27,
                                   11,26,28,
                                   27,47,29,
                                   12,28,30,
                                   29,49,31,
                                   14,30,32,
                                   31,51,33,
                                   15,32,34,
                                   33,53,35,
                                   17,34,36,
                                   35,55,37,
                                   18,36,38,
                                   37,57,39,
                                   20,38,40,
                                   39,59,21,
                                   22,60,42,
                                   41,61,43,
                                   24,42,44,
                                   43,63,45,
                                   26,44,46,
                                   45,64,47,
                                   28,46,48,
                                   47,66,49,
                                   30,48,50,
                                   49,67,51,
                                   32,50,52,
                                   51,69,53,
                                   34,52,54,
                                   53,70,55,
                                   36,54,56,
                                   55,72,57,
                                   38,56,58,
                                   57,73,59,
                                   40,58,60,
                                   59,75,41,
                                   42,75,62,
                                   61,76,63,
                                   44,62,64,
                                   46,63,65,
                                   64,77,66,
                                   48,65,67,
                                   50,66,68,
                                   67,78,69,
                                   52,68,70,
                                   54,69,71,
                                   70,79,72,
                                   56,71,73,
                                   58,72,74,
                                   73,80,75,
                                   60,74,61,
                                   62,80,77,
                                   65,76,78,
                                   68,77,79,
                                   71,78,80,
                                   74,79,76],
                                   dtype=np.int32)
        orography_in = np.array([0.0,
                                 12.0,
                                 13.0,
                                 14.0,
                                 15.0,
                                 16.0,
                                 17.0,
                                 1.0,
                                 4.0,
                                 20.0,
                                 7.5,
                                 4.0,
                                 23.0,
                                 2.0,
                                 4.5,
                                 26.0,
                                 3.0,
                                 7.0,
                                 29.0,
                                 30.0,
                                 31.0,
                                 32.0,
                                 3.0,
                                 5.0,
                                 6.0,
                                 36.0,
                                 7.0,
                                 5.0,
                                 2.0,
                                 0.0,
                                 3.0,
                                 4.0,
                                 5.0,
                                 0.0,
                                 1.0,
                                 4.0,
                                 6.0,
                                 38.0,
                                 39.0,
                                 40.0,
                                 41.0,
                                 42.0,
                                 43.0,
                                 44.0,
                                 45.0,
                                 46.0,
                                 47.0,
                                 6.0,
                                 2.0,
                                 5.0,
                                 51.0,
                                 3.0,
                                 1.0,
                                 2.0,
                                 55.0,
                                 3.5,
                                 2.5,
                                 0.5,
                                 0.0,
                                 60.0,
                                 61.0,
                                 62.0,
                                 63.0,
                                 64.0,
                                 65.0,
                                 66.0,
                                 9.0,
                                 68.0,
                                 6.0,
                                 7.0,
                                 71.0,
                                 4.5,
                                 1.5,
                                 74.0,
                                 75.0,
                                 76.0,
                                 77.0,
                                 78.0,
                                 79.0,
                                 80.0],
                                 dtype=np.float64)
        landsea_in = np.array([True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False],
                               dtype=np.int32)
        next_cell_index_expected_out = np.array([-1,
                                                 1,
                                                 1,
                                                 1,
                                                 1,
                                                 1,
                                                 1,
                                                 1,
                                                 1,
                                                 1,
                                                 29,
                                                 30,
                                                 30,
                                                 30,
                                                 34,
                                                 34,
                                                 34,
                                                 35,
                                                 1,
                                                 1,
                                                 59,
                                                 59,
                                                 8,
                                                 8,
                                                 8,
                                                 9,
                                                 29,
                                                 30,
                                                 30,
                                                 -1,
                                                 30,
                                                 30,
                                                 34,
                                                 -1,
                                                 34,
                                                 34,
                                                 35,
                                                 59,
                                                 59,
                                                 59,
                                                 59,
                                                 23,
                                                 23,
                                                 24,
                                                 24,
                                                 28,
                                                 30,
                                                 30,
                                                 30,
                                                 30,
                                                 30,
                                                 34,
                                                 34,
                                                 34,
                                                 34,
                                                 58,
                                                 59,
                                                 59,
                                                 -1,
                                                 59,
                                                 41,
                                                 42,
                                                 42,
                                                 48,
                                                 48,
                                                 49,
                                                 49,
                                                 52,
                                                 53,
                                                 53,
                                                 73,
                                                 58,
                                                 59,
                                                 59,
                                                 59,
                                                 61,
                                                 67,
                                                 69,
                                                 73,
                                                 73],
                                                 dtype=np.int32)
        true_sinks_in = np.zeros((80),dtype=bool)
        next_cell_index_out = np.zeros((80),dtype=np.int32)
        use_secondary_neighbors_in=True
        always_flow_to_sea_in=True
        mark_pits_as_True_sinks_in=True
        determine_river_directions_icon_wrapper.\
            determine_river_directions_icon_cpp(orography_in,
                                                np.logical_not(landsea_in).astype(np.int32),
                                                np.zeros((80),dtype=np.float64),
                                                true_sinks_in.astype(np.int32),
                                                cell_neighbors,
                                                next_cell_index_out,
                                                fractional_landsea_mask_in=False,
                                                always_flow_to_sea_in=True,
                                                mark_pits_as_true_sinks_in=True)
        np.testing.assert_array_equal(next_cell_index_out,
                                      next_cell_index_expected_out)

    def testDetermineRiverDirectionsICONSix(self):
        cell_neighbors = np.array([5,7,2,
                                   1,10,3,
                                   2,13,4,
                                   3,16,5,
                                   4,19,1,
                                   20,21,7,
                                   1,6,8,
                                   7,23,9,
                                   8,25,10,
                                   2,9,11,
                                   10,27,12,
                                   11,29,13,
                                   3,12,14,
                                   13,31,15,
                                   14,33,16,
                                   4,15,17,
                                   16,35,18,
                                   17,37,19,
                                   5,18,20,
                                   19,39,6,
                                   6,40,22,
                                   21,41,23,
                                   8,22,24,
                                   23,43,25,
                                   24,26,9,
                                   25,45,27,
                                   11,26,28,
                                   27,47,29,
                                   12,28,30,
                                   29,49,31,
                                   14,30,32,
                                   31,51,33,
                                   15,32,34,
                                   33,53,35,
                                   17,34,36,
                                   35,55,37,
                                   18,36,38,
                                   37,57,39,
                                   20,38,40,
                                   39,59,21,
                                   22,60,42,
                                   41,61,43,
                                   24,42,44,
                                   43,63,45,
                                   26,44,46,
                                   45,64,47,
                                   28,46,48,
                                   47,66,49,
                                   30,48,50,
                                   49,67,51,
                                   32,50,52,
                                   51,69,53,
                                   34,52,54,
                                   53,70,55,
                                   36,54,56,
                                   55,72,57,
                                   38,56,58,
                                   57,73,59,
                                   40,58,60,
                                   59,75,41,
                                   42,75,62,
                                   61,76,63,
                                   44,62,64,
                                   46,63,65,
                                   64,77,66,
                                   48,65,67,
                                   50,66,68,
                                   67,78,69,
                                   52,68,70,
                                   54,69,71,
                                   70,79,72,
                                   56,71,73,
                                   58,72,74,
                                   73,80,75,
                                   60,74,61,
                                   62,80,77,
                                   65,76,78,
                                   68,77,79,
                                   71,78,80,
                                   74,79,76],
                                   dtype=np.int32)
        orography_in = np.array([11.0,
                                 12.0,
                                 13.0,
                                 14.0,
                                 15.0,
                                 16.0,
                                 17.0,
                                 6.0,
                                 7.0,
                                 20.0,
                                 7.5,
                                 4.0,
                                 23.0,
                                 2.0,
                                 4.5,
                                 26.0,
                                 3.0,
                                 7.0,
                                 29.0,
                                 30.0,
                                 31.0,
                                 32.0,
                                 4.0,
                                 1.0,
                                 5.0,
                                 36.0,
                                 7.0,
                                 5.0,
                                 2.0,
                                 0.0,
                                 3.0,
                                 4.0,
                                 5.0,
                                 0.0,
                                 1.0,
                                 4.0,
                                 6.0,
                                 38.0,
                                 39.0,
                                 40.0,
                                 41.0,
                                 42.0,
                                 0.0,
                                 1.0,
                                 3.0,
                                 4.0,
                                 47.0,
                                 6.0,
                                 2.0,
                                 5.0,
                                 51.0,
                                 3.0,
                                 1.0,
                                 2.0,
                                 55.0,
                                 3.5,
                                 2.5,
                                 0.5,
                                 0.0,
                                 60.0,
                                 61.0,
                                 62.0,
                                 3.0,
                                 5.0,
                                 65.0,
                                 8.0,
                                 9.0,
                                 68.0,
                                 6.0,
                                 7.0,
                                 71.0,
                                 4.5,
                                 1.5,
                                 74.0,
                                 75.0,
                                 76.0,
                                 77.0,
                                 78.0,
                                 79.0,
                                 80.0],
                                 dtype=np.float64)
        landsea_in = np.array([False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               True,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False,
                               False],
                               dtype=np.int32)
        next_cell_index_expected_out = np.array([8,
                                                 12,
                                                 14,
                                                 14,
                                                 17,
                                                 23,
                                                 23,
                                                 24,
                                                 24,
                                                 12,
                                                 29,
                                                 30,
                                                 30,
                                                 30,
                                                 34,
                                                 34,
                                                 34,
                                                 35,
                                                 17,
                                                 37,
                                                 59,
                                                 43,
                                                 43,
                                                 43,
                                                 43,
                                                 43,
                                                 29,
                                                 30,
                                                 30,
                                                 -1,
                                                 30,
                                                 30,
                                                 34,
                                                 -1,
                                                 34,
                                                 34,
                                                 35,
                                                 59,
                                                 59,
                                                 59,
                                                 43,
                                                 43,
                                                 -1,
                                                 43,
                                                 43,
                                                 44,
                                                 30,
                                                 30,
                                                 30,
                                                 30,
                                                 30,
                                                 34,
                                                 34,
                                                 34,
                                                 34,
                                                 58,
                                                 59,
                                                 59,
                                                 -5,
                                                 59,
                                                 43,
                                                 43,
                                                 43,
                                                 44,
                                                 63,
                                                 49,
                                                 49,
                                                 52,
                                                 53,
                                                 53,
                                                 73,
                                                 58,
                                                 59,
                                                 59,
                                                 59,
                                                 63,
                                                 63,
                                                 69,
                                                 73,
                                                 73],
                                                 dtype=np.int32)
        true_sinks_in = np.zeros((80),dtype=bool)
        next_cell_index_out = np.zeros((80),dtype=np.int32)
        use_secondary_neighbors_in=True
        always_flow_to_sea_in=True
        mark_pits_as_True_sinks_in=True
        determine_river_directions_icon_wrapper.\
            determine_river_directions_icon_cpp(orography_in,
                                                np.logical_not(landsea_in).astype(np.int32),
                                                np.zeros((80),dtype=np.float64),
                                                true_sinks_in.astype(np.int32),
                                                cell_neighbors,
                                                next_cell_index_out,
                                                fractional_landsea_mask_in=False,
                                                always_flow_to_sea_in=True,
                                                mark_pits_as_true_sinks_in=True)
        np.testing.assert_array_equal(next_cell_index_out,
                                      next_cell_index_expected_out)

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
