'''
Test various dynamic hydrological discharge utility functions
Created on April 16, 2018

@author: thomasriddick
'''
import unittest
import numpy as np
import os
import cdo
from tests.context import data_dir
from Dynamic_HD_Scripts.base import field
from Dynamic_HD_Scripts.tools import dynamic_lake_operators
from Dynamic_HD_Scripts.interface.cpp_interface.libs import lake_operators_wrapper
from Dynamic_HD_Scripts.interface.cpp_interface.libs import fill_sinks_wrapper
from Dynamic_HD_Scripts.interface.cpp_interface.libs import evaluate_basins_wrapper

class TestNarrowLakeFilter(unittest.TestCase):

    def testNarrowLakeFilterOne(self):
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = np.array([[10.0,10.0,10.0,10.0,10.0,
                                                   10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0,
                                                   10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0,
                                                   10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0,
                                                   10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0,
                                                   10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10))
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterTwo(self):
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                            10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                                   10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                                   10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                                   10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                                   10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,
                                                   10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=20),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=20))
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterThree(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0, 1.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0, 1.0, 1.0,  1.0, 1.0, 1.0, 1.0, 1.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0],
                                           [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0, 10.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0,  1.0, 1.0, 1.0, 1.0, 1.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0],
                                                  [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
        dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   field.Field(input_filled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   interior_cell_min_masked_neighbors=5,
                                                   edge_cell_max_masked_neighbors=4,
                                                   max_range=3,
                                                   iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterFour(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0, 1.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0, 1.0, 1.0,  1.0, 10.0,10.0,10.0, 1.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0, 10.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0,10.0,10.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
        dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   field.Field(input_filled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   interior_cell_min_masked_neighbors=5,
                                                   edge_cell_max_masked_neighbors=4,
                                                   max_range=3,
                                                   iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterFive(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0, 1.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0, 1.0, 1.0,  1.0, 10.0,10.0,10.0, 1.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0, 10.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 10.0,10.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
        dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   field.Field(input_filled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   interior_cell_min_masked_neighbors=5,
                                                   edge_cell_max_masked_neighbors=4,
                                                   max_range=1,
                                                   iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterSix(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0, 1.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0, 1.0, 1.0,  1.0, 10.0,10.0,10.0, 1.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0, 10.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0, 1.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0, 1.0, 1.0,  1.0, 10.0,10.0,10.0, 1.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0, 10.0, 1.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
        dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   field.Field(input_filled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   interior_cell_min_masked_neighbors=4,
                                                   edge_cell_max_masked_neighbors=3,
                                                   max_range=5,
                                                   iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterSeven(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0, 1.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0, 1.0, 1.0,  1.0, 10.0,10.0,10.0, 1.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0, 1.0, 10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0, 10.0, 1.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 10.0,10.0,10.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0, 1.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [ 1.0, 1.0, 1.0, 1.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0, 1.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0,  1.0, 1.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                                  [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
        dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   field.Field(input_filled_orography,
                                                               grid="LatLong",nlat=10,nlong=40),
                                                   interior_cell_min_masked_neighbors=5,
                                                   edge_cell_max_masked_neighbors=4,
                                                   max_range=3,
                                                   iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterEight(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0, 1.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=8,
                                                     edge_cell_max_masked_neighbors=7,
                                                     max_range=3,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterNine(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0, 1.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0, 1.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=7,
                                                     edge_cell_max_masked_neighbors=6,
                                                     max_range=3,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterTen(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0, 1.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0, 1.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0, 1.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=7,
                                                     edge_cell_max_masked_neighbors=2,
                                                     max_range=1,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterEleven(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0, 1.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0, 1.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0, 1.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0, 1.0, 1.0,  1.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=7,
                                                     edge_cell_max_masked_neighbors=2,
                                                     max_range=5,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterTwelve(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,  1.0, 1.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0, 1.0,1.0,  10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=2,
                                                     max_range=1,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterThirteen(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,  1.0, 1.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0, 10.0,10.0,  10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=3,
                                                     max_range=1,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterFourteen(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,  1.0, 1.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0, 1.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,  1.0, 1.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=1,
                                                     max_range=1,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterFifteen(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,  1.0, 1.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0, 1.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0, 1.0,10.0,10.0, 1.0, 10.0,10.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,  1.0, 1.0,1.0,  1.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=0,
                                                     max_range=1,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterSixteen(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0],
                                           [10.0, 1.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0],
                                           [10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [ 1.0,10.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0],
                                         [10.0, 1.0,10.0,10.0,10.0, 10.0, 1.0, 1.0, 1.0, 1.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 1.0, 1.0, 1.0],
                                         [10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=4,
                                                     max_range=2,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterSeventeen(self):
      input_unfilled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0,10.0, 1.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0, 1.0],
                                           [ 1.0,10.0, 1.0,10.0,10.0,  1.0,10.0,10.0,10.0, 1.0],
                                           [10.0,10.0,10.0,10.0,10.0,  1.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                         [ 1.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                         [ 1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0, 1.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=4,
                                                     max_range=2,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterEighteen(self):
      input_unfilled_orography = np.array([[10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0],
                                           [10.0,10.0,10.0, 1.0,10.0],
                                           [10.0, 1.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0, 1.0, 1.0, 1.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=10,nlong=5),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=10,nlong=5),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=4,
                                                     max_range=2,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterNineteen(self):
      input_unfilled_orography = np.array([[10.0, 1.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0,10.0, 1.0,10.0],
                                           [10.0,10.0, 1.0, 1.0,10.0],
                                           [10.0,10.0,10.0,10.0,10.0],
                                           [10.0,1.0, 1.0, 1.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=10,nlong=5),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=10,nlong=5),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=4,
                                                     max_range=2,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterTwenty(self):
      input_unfilled_orography = np.array([[10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0, 1.0, 1.0, 1.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=3,
                                                     max_range=5,
                                                     iterations=1)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterTwentyOne(self):
      input_unfilled_orography = np.array([[10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=3,
                                                     max_range=5,
                                                     iterations=2)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

    def testNarrowLakeFilterTwentyTwo(self):
      input_unfilled_orography = np.array([[10.0, 1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0, 1.0, 1.0, 1.0, 1.0, 10.0,10.0,10.0,10.0,10.0],
                                           [ 1.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                           [10.0,10.0, 1.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      input_filled_orography = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      expected_unfilled_orography_out = \
                               np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                         [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
      output_unfilled_orography = \
          dynamic_lake_operators.filter_narrow_lakes(field.Field(input_unfilled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     field.Field(input_filled_orography,
                                                                 grid="LatLong",nlat=5,nlong=10),
                                                     interior_cell_min_masked_neighbors=5,
                                                     edge_cell_max_masked_neighbors=3,
                                                     max_range=5,
                                                     iterations=3)
      np.testing.assert_array_equal(output_unfilled_orography.get_data(),
                                    expected_unfilled_orography_out)

class TestLocalMinimaFindingDriver(unittest.TestCase):

    def testLocalMinimaFinding(self):
        orography_field = np.array([[10.0,10.0,10.0,-2.3,10.0, 10.0,10.0,10.0,10.0,10.0],
                                    [-1.0,10.0,10.0,10.0,10.0, 10.0,15.0,16.0,18.0,10.0],
                                    [-2.5,10.0,10.0,10.1,10.1, 10.1,14.0,-1.0,19.0,10.0],
                                    [10.0,10.0,10.0,10.1,10.0, 10.1,17.0,17.0,19.0,10.0],
                                    [10.0, 9.9,10.0,10.1,10.1, 10.1,17.0,11.0,17.0,10.0],

                                    [10.0,10.0,10.0,10.0,10.0, 10.0,19.0,18.0,15.0,10.0],
                                    [10.0,10.0, 5.0, 5.0, 5.0,  5.0,10.0,10.0,10.0,10.0],
                                    [10.0,10.0, 5.0, 5.0, 5.0,  5.0,10.0,10.0, 3.0, 3.0],
                                    [10.0,10.0,10.0, 5.0, 5.0,  5.0,10.0,10.0,10.0,10.0],
                                    [10.0,-1.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
        expected_minima = np.array([[False,False,False, True,False,  True, True, True, True,False],
                                    [False,False,False,False,False,  True,False,False,False,False],
                                    [ True,False, True,False,False, False,False, True,False,False],
                                    [False,False,False,False, True, False,False,False,False,False],
                                    [False, True,False,False,False, False,False, True,False, True],

                                    [False,False,False,False,False, False,False,False,False, True],
                                    [False,False, True, True, True,  True,False,False,False,False],
                                    [False,False, True, True, True,  True,False,False, True, True],
                                    [False,False,False, True, True,  True,False,False,False,False],
                                    [False, True,False,False,False, False,False, True, True, True]])
        orography = field.Field(orography_field,grid="LatLong",nlat=10,nlong=10)
        local_minima = orography.find_all_local_minima()
        np.testing.assert_array_equal(expected_minima,local_minima.get_data())

    def testLocalMinimaFindingSinglePointTest(self):
        orography_field = np.array([[10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],

                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0, 5.0,10.0,10.0],
                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0],
                                    [10.0,10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,10.0]])
        expected_minima = np.array([[ True, True, True, True, True,  True, True, True, True, True],
                                    [ True, True, True, True, True,  True, True, True, True, True],
                                    [ True, True, True, True, True,  True, True, True, True, True],
                                    [ True, True, True, True, True,  True, True, True, True, True],
                                    [ True, True, True, True, True,  True, True, True, True, True],

                                    [ True, True, True, True, True,  True, True, True, True, True],
                                    [ True, True, True, True, True,  True,False,False,False, True],
                                    [ True, True, True, True, True,  True,False, True,False, True],
                                    [ True, True, True, True, True,  True,False,False,False, True],
                                    [ True, True, True, True, True,  True, True, True, True, True]])
        orography = field.Field(orography_field,grid="LatLong",nlat=10,nlong=10)
        local_minima = orography.find_all_local_minima()
        np.testing.assert_array_equal(expected_minima,local_minima.get_data())

class TestBurningCarvedRivers(unittest.TestCase):

    def testBurningCarvedRiversOne(self):
        nlat = 8;
        nlong = 8;
        orography = np.array([[1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                              [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                              [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                              [1.0,1.5,2.5,1.2, 1.3,2.5,1.5,1.0],
                              [1.0,1.5,2.5,1.3, 1.3,2.3,1.4,1.0],
                              [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                              [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                              [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],dtype=np.float64)
        rdirs = np.array([[7.0,8.0,8.0,8.0, 8.0,8.0,8.0,9.0],
                          [4.0,7.0,8.0,8.0, 7.0,9.0,7.0,6.0],
                          [4.0,7.0,3.0,2.0, 1.0,9.0,7.0,6.0],
                          [4.0,1.0,4.0,3.0, 3.0,3.0,6.0,6.0],
                          [7.0,7.0,4.0,6.0, 6.0,6.0,9.0,6.0],
                          [4.0,1.0,1.0,2.0, 1.0,6.0,6.0,9.0],
                          [4.0,2.0,2.0,3.0, 1.0,2.0,3.0,3.0],
                          [1.0,2.0,2.0,2.0, 3.0,2.0,3.0,3.0]],dtype=np.float64)
        minima = np.array([[False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False, True, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False]],dtype=np.int32)
        expected_orography_out = np.array([[1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                                           [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                                           [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                                           [1.0,1.5,2.5,1.2, 1.3,2.5,1.5,1.0],
                                           [1.0,1.5,2.5,1.3, 1.2,1.2,1.2,1.0],
                                           [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                                           [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                                           [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]])
        lakemask = np.zeros((nlat,nlong),dtype=np.int32)
        self.assertFalse(np.array_equal(orography,expected_orography_out))
        lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask)
        np.testing.assert_array_equal(orography,expected_orography_out)

    def testBurningCarvedRiversTwo(self):
        nlat = 8;
        nlong = 8;
        orography = np.array([[1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                              [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                              [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                              [1.0,1.5,2.5,1.2, 1.3,2.5,1.5,1.0],
                              [1.0,1.5,2.5,1.3, 1.4,2.5,1.4,1.0],
                              [1.0,1.5,2.5,1.4, 2.5,2.5,1.5,1.0],
                              [1.0,1.5,1.5,1.4, 1.5,1.5,1.5,1.0],
                              [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],
                              dtype=np.float64)
        rdirs = np.array([[7.0,8.0,8.0,8.0, 8.0,8.0,8.0,9.0],
                          [4.0,7.0,8.0,8.0, 7.0,9.0,7.0,6.0],
                          [4.0,7.0,3.0,2.0, 1.0,1.0,7.0,6.0],
                          [4.0,1.0,3.0,2.0, 3.0,4.0,6.0,6.0],
                          [7.0,7.0,3.0,2.0, 1.0,7.0,9.0,6.0],
                          [4.0,1.0,3.0,2.0, 1.0,7.0,6.0,9.0],
                          [4.0,2.0,2.0,1.0, 1.0,2.0,3.0,3.0],
                          [1.0,2.0,2.0,2.0, 3.0,2.0,3.0,3.0]],
                          dtype=np.float64)
        minima = np.array([[False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False, True,  False,False,False,False],
                           [False,False,False,False,  False,False,False,False],
                           [False,False,False,False,  False,False,False,False],
                           [False,False,False,False,  False,False,False,False],
                           [False,False,False,False,  False,False,False,False]],
                           dtype=np.int32)
        expected_orography_out = np.array([[1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                                           [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                                           [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                                           [1.0,1.5,2.5,1.2, 1.3,2.5,1.5,1.0],
                                           [1.0,1.5,2.5,1.2, 1.4,2.5,1.4,1.0],
                                           [1.0,1.5,2.5,1.2, 2.5,2.5,1.5,1.0],
                                           [1.0,1.5,1.5,1.2, 1.5,1.5,1.5,1.0],
                                           [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],
                                           dtype=np.float64)
        lakemask = np.zeros((nlat,nlong),dtype=np.int32)
        self.assertFalse(np.array_equal(orography,expected_orography_out))
        lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask)
        np.testing.assert_array_equal(orography,expected_orography_out)

    def testBurningCarvedRiversThree(self):
        nlat = 8;
        nlong = 8;
        orography = np.array([[1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                              [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                              [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                              [0.5,1.5,1.3,1.2, 1.3,2.5,1.5,1.0],
                              [1.0,1.1,2.5,0.8, 0.7,2.5,1.4,1.0],
                              [1.0,1.5,2.5,1.8, 2.5,2.5,1.5,1.0],
                              [1.0,1.5,1.5,1.4, 1.5,1.5,1.5,1.0],
                              [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],
                              dtype=np.float64)
        rdirs = np.array([[7.0,8.0,8.0,8.0, 8.0,8.0,8.0,9.0],
                          [4.0,7.0,8.0,8.0, 7.0,9.0,7.0,6.0],
                          [4.0,1.0,2.0,1.0, 1.0,1.0,7.0,6.0],
                          [4.0,4.0,1.0,4.0, 3.0,1.0,6.0,6.0],
                          [7.0,7.0,4.0,7.0, 4.0,4.0,9.0,6.0],
                          [4.0,1.0,3.0,2.0, 1.0,7.0,6.0,9.0],
                          [4.0,2.0,2.0,1.0, 1.0,2.0,3.0,3.0],
                          [1.0,2.0,2.0,2.0, 3.0,2.0,3.0,3.0]],
                          dtype=np.float64)

        minima = np.array([[False,False,False,False, False,False,False,False,
                            False,False,False,False, False,False,False,False,
                            False,False,False,False, False,False,False,False,
                            False,False,False,False,  False,False,False,False,
                            False,False,False,False,  True,False,False,False,
                            False,False,False,False,  False,False,False,False,
                            False,False,False,False,  False,False,False,False,
                            False,False,False,False,  False,False,False,False]],
                            dtype=np.int32)
        expected_orography_out = np.array([[1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                                           [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                                           [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                                           [0.5,1.5,0.7,1.2, 1.3,2.5,1.5,1.0],
                                           [1.0,0.7,2.5,0.7, 0.7,2.5,1.4,1.0],
                                           [1.0,1.5,2.5,1.8, 2.5,2.5,1.5,1.0],
                                           [1.0,1.5,1.5,1.4, 1.5,1.5,1.5,1.0],
                                           [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],
                                           dtype=np.float64)
        lakemask = np.zeros((nlat,nlong),dtype=np.int32)
        self.assertFalse(np.array_equal(orography,expected_orography_out))
        lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask)
        np.testing.assert_array_equal(orography,expected_orography_out)

    def testBurningCarvedRiversFour(self):
        nlat = 8;
        nlong = 8;
        orography = np.array([[1.0,1.0,1.0,1.0, 0.7,1.0,1.0,1.0],
                              [1.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.0],
                              [1.0,1.5,2.5,2.5, 2.5,1.2,1.5,1.0],
                              [1.0,1.5,1.4,0.7, 2.5,1.3,1.5,1.0],
                              [1.0,1.5,2.5,0.9, 1.0,2.5,1.4,1.0],
                              [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                              [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                              [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],
                             dtype=np.float64)
        rdirs = np.array([[7.0,8.0,8.0,8.0, 8.0,8.0,8.0,9.0],
                          [4.0,7.0,8.0,9.0, 8.0,8.0,7.0,6.0],
                          [4.0,1.0,2.0,9.0, 8.0,7.0,9.0,6.0],
                          [4.0,4.0,6.0,3.0, 9.0,8.0,6.0,6.0],
                          [7.0,7.0,4.0,6.0, 9.0,8.0,9.0,6.0],
                          [4.0,1.0,3.0,9.0, 8.0,7.0,6.0,9.0],
                          [4.0,2.0,2.0,1.0, 1.0,2.0,3.0,3.0],
                          [1.0,2.0,2.0,2.0, 3.0,2.0,3.0,3.0]],
                         dtype=np.float64)
        minima = np.array([[False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False, True, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
        expected_orography_out = np.array([[1.0,1.0,1.0,1.0, 0.7,1.0,1.0,1.0],
                                           [1.0,1.5,1.5,1.5, 0.7,1.5,1.5,1.0],
                                           [1.0,1.5,2.5,2.5, 2.5,0.7,1.5,1.0],
                                           [1.0,1.5,1.4,0.7, 2.5,0.7,1.5,1.0],
                                           [1.0,1.5,2.5,0.9, 0.7,2.5,1.4,1.0],
                                           [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                                           [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                                           [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],
                                           dtype=np.float64)
        lakemask = np.zeros((nlat,nlong),dtype=np.int32)
        self.assertFalse(np.array_equal(orography,expected_orography_out))
        lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask)
        np.testing.assert_array_equal(orography,expected_orography_out)

    def testBurningCarvedRiversFive(self):
        orography = np.array([[1.0,1.0,1.0,1.0, 0.7,1.0,1.0,1.0],
                              [1.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.0],
                              [1.0,1.5,2.5,2.5, 2.5,1.2,1.5,1.0],
                              [1.0,1.5,1.4,0.7, 2.5,1.3,1.5,1.0],
                              [1.0,1.5,2.5,0.9, 1.0,2.5,1.4,1.0],
                              [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                              [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                              [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],
                             dtype=np.float64)
        rdirs = np.array([[7.0,8.0,8.0,8.0, 8.0,8.0,8.0,9.0],
                          [4.0,7.0,8.0,9.0, 8.0,8.0,7.0,6.0],
                          [4.0,1.0,2.0,9.0, 8.0,7.0,9.0,6.0],
                          [4.0,4.0,6.0,3.0, 9.0,8.0,6.0,6.0],
                          [7.0,7.0,4.0,6.0, 9.0,8.0,9.0,6.0],
                          [4.0,1.0,3.0,9.0, 8.0,7.0,6.0,9.0],
                          [4.0,2.0,2.0,1.0, 1.0,2.0,3.0,3.0],
                          [1.0,2.0,2.0,2.0, 3.0,2.0,3.0,3.0]],
                         dtype=np.float64)
        minima = np.array([[False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False, True, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
        expected_orography_out = np.array([[1.0,1.0,1.0,1.0, 0.7,1.0,1.0,1.0],
                                           [1.0,1.5,1.5,1.5, 0.7,1.5,1.5,1.0],
                                           [1.0,1.5,2.5,2.5, 2.5,1.2,1.5,1.0],
                                           [1.0,1.5,1.4,0.7, 2.5,0.7,1.5,1.0],
                                           [1.0,1.5,2.5,0.9, 1.0,2.5,1.4,1.0],
                                           [1.0,1.5,2.5,2.5, 2.5,2.5,1.5,1.0],
                                           [1.0,1.5,1.5,1.5, 1.5,1.5,1.5,1.0],
                                           [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0]],
                                          dtype=np.float64)
        lakemask = np.array([[False,False,False,False, False,False,False,False],
                             [False,False,False,False, False,False,False,False],
                             [False,False,False,False, False, True,False,False],
                             [False,False,False, True, False,False,False,False],
                             [False,False,False, True, True, False,False,False],
                             [False,False,False,False, False,False,False,False],
                             [False,False,False,False, False,False,False,False],
                             [False,False,False,False, False,False,False,False]],
                            dtype=np.int32)
        self.assertFalse(np.array_equal(orography,expected_orography_out))
        lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask)
        np.testing.assert_array_equal(orography,expected_orography_out)

    def testBurningCarvedRiversSix(self):
        nlat = 16;
        nlong = 16;
        orography = \
        np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                  [0.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.5, 1.5,1.5,1.5,1.5, 1.5,1.5,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,0.4,0.8, 2.0,2.0,1.0,2.0, 1.0,1.0,0.3,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 0.8,1.0,2.0,0.8, 2.0,2.0,2.0,0.2, 0.2,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,2.0,0.2, 0.2,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,0.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,0.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.2,0.2,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,0.1,1.0, 1.0,0.5,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,2.0,1.0,2.0, 2.0,0.8,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,2.0,1.0,2.0, 2.0,0.8,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,2.0,1.0,2.0, 2.0,0.8,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,1.5,1.5, 1.5,1.5,1.2,1.5, 1.5,1.1,1.5,1.5, 1.5,1.5,1.5,0.0],
                  [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                 dtype=np.float64)

        rdirs = np.zeros((nlat,nlong),dtype=np.float64)

        minima = np.array(
        [[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False, True,False, False,False,False,False, False,False, True,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, True, False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False, True,False, False,False,False,False, False,False, True,False, False, True,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False, True,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]]
         ,dtype=np.int32)
        expected_orography_out = \
        np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                  [0.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.5, 1.5,1.5,1.5,1.5, 1.5,1.5,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,0.4,0.4, 2.0,2.0,0.2,2.0, 0.2,0.2,0.2,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 0.4,0.2,2.0,0.8, 2.0,2.0,2.0,0.2, 0.2,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,0.2,2.0,2.0, 2.0,2.0,2.0,0.2, 0.2,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,0.2,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,0.2,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,0.2,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,0.2,0.2,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,0.1,0.5, 0.5,0.5,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,2.0,0.2,2.0, 2.0,0.1,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,2.0,0.2,2.0, 2.0,0.1,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,2.0,2.0, 2.0,2.0,0.2,2.0, 2.0,0.1,2.0,2.0, 2.0,2.0,1.5,0.0],
                  [0.0,1.5,1.5,1.5, 1.5,1.5,0.2,1.5, 1.5,0.1,1.5,1.5, 1.5,1.5,1.5,0.0],
                  [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                  dtype=np.float64)

        lakemask = np.array(
        [[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
         [False,False, True,False, False, True,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]]
         ,dtype=np.int32)
        truesinks = np.zeros((nlat,nlong),dtype=np.int32)
        landsea = np.array([
        [True,True,True,True,    True,True,True,True,     True,True,True,True,        True,True,True,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,True,True,True,    True,True,True,True,     True,True,True,True,        True,True,True,True]],
        dtype=np.int32)
        empty = np.zeros((nlat,nlong),dtype=np.int32)
        fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                               False,0.0,empty,empty,rdirs,empty,False)
        self.assertFalse(np.array_equal(orography,expected_orography_out))
        lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask)
        np.testing.assert_array_equal(orography,expected_orography_out)

    def testBurningCarvedRiversSeven(self):
        nlat = 16;
        nlong = 16;
        orography = np.array([
        [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
        [0.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.5, 1.5,1.5,1.5,1.5, 1.5,1.5,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,0.4,0.8, 2.0,2.0,1.0,2.0, 1.0,1.0,0.3,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 0.8,1.0,2.0,0.8, 2.0,2.0,2.0,0.2, 0.2,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,2.0,0.2, 0.2,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,0.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,0.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.2,0.2,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,0.1,1.0, 1.0,0.5,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,2.0,1.0,2.0, 2.0,0.8,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,2.0,1.0,2.0, 2.0,0.8,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,2.0,1.0,2.0, 2.0,0.8,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,1.5,1.5, 1.5,1.5,1.2,1.5, 1.5,1.1,1.5,1.5, 1.5,1.5,1.5,0.0],
        [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
        dtype=np.float64)


        rdirs = np.zeros((nlat,nlong),dtype=np.float64)

        minima = np.array([
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False, True,False, False,False,False,False, False,False, True,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, True, False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False, True,False, False,False,False,False, False,False, True,False, False, True,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False, True,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
        dtype=np.int32)

        expected_orography_out = np.array([
        [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
        [0.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.5, 1.5,1.5,1.5,1.5, 1.5,1.5,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,0.4,0.4, 2.0,2.0,1.0,2.0, 1.0,1.0,0.2,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 0.4,1.0,2.0,0.8, 2.0,2.0,2.0,0.2, 0.2,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,0.4,2.0,2.0, 2.0,2.0,2.0,0.2, 0.2,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,0.4,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,0.4,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,0.4,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,0.2,0.2,2.0, 2.0,1.0,2.0,2.0, 2.0,2.0,0.1,0.5, 0.5,0.5,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,2.0,0.4,2.0, 2.0,0.1,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,2.0,0.4,2.0, 2.0,0.8,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,2.0,2.0, 2.0,2.0,0.4,2.0, 2.0,0.8,2.0,2.0, 2.0,2.0,1.5,0.0],
        [0.0,1.5,1.5,1.5, 1.5,1.5,1.2,1.5, 1.5,1.1,1.5,1.5, 1.5,1.5,1.5,0.0],
        [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
        dtype=np.float64)

        lakemask = np.array([
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
        [False,False, True,False, False, True,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
        [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
        dtype=np.int32)

        truesinks = np.zeros((nlat,nlong),dtype=np.int32)
        landsea = np.array([
        [True,True,True,True,    True,True,True,True,     True,True,True,True,     True,True,True,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
        [True,True,True,True,    True,True,True,True,     True,True,True,True,     True,True,True,True]],
        dtype=np.int32)
        empty = np.zeros((nlat,nlong),dtype=np.int32)
        fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                               False,0.0,empty,empty,rdirs,empty,False)
        rdirs[13,9] = 5
        rdirs[13,6] = 0
        rdirs[3,10] = -1
        rdirs[10,11] = 5
        rdirs[11,9] = -1
        self.assertFalse(np.array_equal(orography,expected_orography_out))
        lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask)
        np.testing.assert_array_equal(orography,expected_orography_out)


    def testBurnCarvedRiversEight(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,4.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 3.0,3.0,3.0,3.0, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False, True,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.65,2.6, 2.55,2.5,2.45,2.4, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.7,6.0,6.0, 6.0,6.0,6.0,6.0, 2.35,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.75,6.0,6.0, 6.0,6.0,6.0,6.0, 2.3,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.8,6.0,6.0, 6.0,6.0,6.0,6.0, 2.25,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.85,2.90, 2.95,3.0,6.0,6.0, 2.2,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.15,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.1,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.05,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.95,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5, 1.55,1.6,1.65,1.7, 1.75,1.8,1.85,1.9, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversNine(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,4.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 2.5,2.5,2.5,2.5, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False, True,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.65,2.6, 2.55,2.5,2.45,2.4, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.7,6.0,6.0, 6.0,6.0,6.0,6.0, 2.35,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.75,6.0,6.0, 6.0,6.0,6.0,6.0, 2.3,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.8,6.0,6.0, 6.0,6.0,6.0,6.0, 2.25,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.85,2.90, 2.95,3.0,6.0,6.0, 2.2,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.15,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.1,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.05,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.95,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5, 1.55,1.6,1.65,1.7, 1.75,1.8,1.85,1.9, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTen(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 2.5,2.5,2.5,2.5, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.94,2.92, 2.9,2.88,2.86,2.84, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.96,6.0,6.0, 6.0,6.0,6.0,6.0, 2.82,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.98,6.0,6.0, 6.0,6.0,6.0,6.0, 2.8,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.78,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 2.76,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.74,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.72,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.7,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.68,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.66,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5, 2.5,2.52,2.54,2.56, 2.58,2.6,2.62,2.64, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,3,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversEleven(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,0.5,0.5,0.5, 0.5,0.5,1.0,2.5, 2.5,2.5,2.5,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False, True,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,2.9, 2.8,2.7,2.6,2.5, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.4,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.3,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.2,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 2.1,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 2.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.9,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.8,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.7,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.6,6.0,6.0,9.0],
                                         [0.0,0.5,0.5,0.5, 0.5,0.5,1.0,1.1, 1.2,1.3,1.4,1.5, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,9,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwelve(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,0.5,0.5,0.5, 0.5,0.5,1.0,2.5, 2.5,2.5,2.5,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 2.875,2.75,2.625,2.5, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.375,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.25,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.125,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 2.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.875,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.75,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.625,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.5,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.375,6.0,6.0,9.0],
                                         [0.0,0.5,0.5,0.5, 0.5,0.5,0.625,0.75, 0.875,1.0,1.125,1.25, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,9,2.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirteen(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,0.2,0.2,0.2, 0.2,0.2,0.2,0.5, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.875,2.75, 2.625,2.5,2.375,2.25, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.125,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.875,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 1.75,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.625,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.5,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.375,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.25,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.125,6.0,6.0,9.0],
                                         [0.0,0.2,0.2,0.2, 0.2,0.2,0.2,0.5, 0.625,0.75,0.875, 1.0,5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,5,2.1)
      np.testing.assert_array_equal(orography,expected_orography_out)

    def testBurnCarvedRiversFourteen(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,0.2,0.2,0.2, 0.2,0.2,0.2,0.5, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.875,2.75, 2.625,2.5,2.375,2.25, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.125,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.875,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 1.75,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.625,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.5,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.375,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.25,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.125,6.0,6.0,9.0],
                                         [0.0,0.2,0.2,0.2, 0.2,0.2,0.2,0.5, 0.625,0.75,0.875, 1.0,5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,0,5.1)
      np.testing.assert_array_equal(orography,expected_orography_out)

    def testBurnCarvedRiversFifteen(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,0.2,0.2,0.2, 0.2,0.2,0.2,0.5, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.888,2.776, 2.664,2.552,2.44,2.328, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.216,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.104,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.992,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 1.88,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.768,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.656,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,6.0, 1.544,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.432,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.32,6.0,6.0,9.0],
                                         [0.0,0.2,0.2,0.312, 0.424,0.536,0.648,0.76, 0.872,0.984,1.096, 1.208,5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,5,5.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversSixteen(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,4.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 3.0,3.0,3.0,3.0, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False, True,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.65,2.6, 5.0,2.5,2.45,2.4, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.7,6.0,6.0, 6.0,6.0,6.0,6.0, 2.35,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.75,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.8,6.0,6.0, 6.0,6.0,6.0,6.0, 2.25,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.85,2.90, 2.95,3.0,6.0,6.0, 2.2,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.15,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.05,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.95,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5, 1.55,1.6,1.65,1.7, 1.75,1.8,1.85,1.9, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False,  True,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False,  True,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False,  True,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversSeventeen(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 2.0,2.0,2.0,2.0, 2.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False, True,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.72,2.68, 2.64,2.6,2.56,2.52, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.76,6.0,6.0, 6.0,6.0,6.0,6.0, 2.48,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.8,6.0,6.0, 6.0,6.0,6.0,6.0, 2.44,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.84,6.0,6.0, 6.0,6.0,6.0,6.0, 2.4,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.88,2.92, 2.96,3.0,6.0,6.0, 2.36,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.32,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.28,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.24,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.2,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.16,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5,   2,2,2,2, 2,2.04,2.08,2.12, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False, True,False, True, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,8,4.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversEighteen(self):
      nlat = 16
      nlon = 16
      orography = np.array([[9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 5.5,5.5,5.0,5.0, 5.0,4.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,3.0,3.0, 4.0,4.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 4.0,4.0,4.0,4.0, 2.5,2.5,2.5,2.5, 1.5,1.5,1.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False, True,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,5.0, 2.4,2.45,2.5,2.55, 2.6,2.65,4.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.35, 6.0,6.0,6.0,6.0, 6.0,6.0,2.7,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.3, 6.0,6.0,6.0,6.0, 6.0,6.0,2.75,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.25, 6.0,6.0,6.0,6.0, 6.0,6.0,2.8,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.2, 6.0,6.0,3.0,2.95, 2.90,2.85,4.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.15, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.1, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.05, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,1.95, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,5.0, 1.9,1.85,1.8,1.75, 1.7,1.65,1.6,1.55, 1.5,1.5,1.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversNineteen(self):
      nlat = 16
      nlon = 16
      orography = np.array([[9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,5.5, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,5.5, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,4.0, 4.0,4.0,4.0,4.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,1.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,1.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,1.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,5.0,1.95,2.0, 2.05,2.1,2.15,2.2, 2.25,2.3,2.35,5.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.9,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.4, 6.0,6.0,6.0,6.0],
                                         [6.0,1.85,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.45, 6.0,6.0,6.0,6.0],
                                         [6.0,1.8,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,2.5, 6.0,6.0,6.0,6.0],
                                         [6.0,1.75,6.0,6.0, 6.0,6.0,6.0,2.95, 6.0,6.0,6.0,2.55, 6.0,6.0,6.0,6.0],
                                         [6.0,1.7,6.0,6.0, 6.0,6.0,6.0,2.9, 6.0,6.0,6.0, 2.6, 6.0,6.0,6.0,6.0],
                                         [6.0,1.65,6.0,6.0, 6.0,6.0,6.0,2.85, 6.0,6.0,6.0,2.65, 6.0,6.0,6.0,6.0],
                                         [6.0,1.6,6.0,6.0, 6.0,6.0,6.0,4.0, 2.8,2.75,2.7,4.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.55,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True, True, True, True,  True, True, True, True,  True, True, True, True,  True, True, True, True]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwenty(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                            [6.0,1.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,1.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,1.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,4.0, 4.0,4.0,4.0,4.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,5.5, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,5.5, 6.0,6.0,6.0,6.0],
                            [6.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                         [6.0,1.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.55,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.6,6.0,6.0, 6.0,6.0,6.0,4.0, 2.8,2.75,2.7,4.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.65,6.0,6.0, 6.0,6.0,6.0,2.85, 6.0,6.0,6.0,2.65, 6.0,6.0,6.0,6.0],
                                         [6.0,1.7,6.0,6.0, 6.0,6.0,6.0,2.9, 6.0,6.0,6.0,2.6, 6.0,6.0,6.0,6.0],
                                         [6.0,1.75,6.0,6.0, 6.0,6.0,6.0,2.95, 6.0,6.0,6.0,2.55, 6.0,6.0,6.0,6.0],
                                         [6.0,1.8,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,2.5, 6.0,6.0,6.0,6.0],
                                         [6.0,1.85,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.45, 6.0,6.0,6.0,6.0],
                                         [6.0,1.9,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.4, 6.0,6.0,6.0,6.0],
                                         [6.0,5.0,1.95,2.0, 2.05,2.1,2.15,2.2, 2.25,2.3,2.35,5.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True, True, True, True,  True, True, True, True,  True, True, True, True,  True, True, True, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentyOne(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,1.5,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,1.5, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 2.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,2.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,2.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.0, 2.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False, True,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.72,2.68, 2.64,2.6,2.56,2.52, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.76,6.0,6.0, 6.0,6.0,6.0,6.0, 2.48,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.8,6.0,6.0, 6.0,6.0,6.0,6.0, 2.44,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.84,6.0,6.0, 6.0,6.0,6.0,6.0, 2.4,6.0,6.0,9.0],
                                         [0.0,1.0,6.0,6.0, 6.0,4.0,2.88,2.92, 2.96,3.0,6.0,6.0, 2.36,6.0,6.0,9.0],
                                         [0.0,6.0,1.5,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.32,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,1.5, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.28,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 2.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.24,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.2,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,2.0,6.0, 6.0,6.0,6.0,6.0, 2.16,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.0, 2.0,2.04,2.08,2.12, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False, True,False, True, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,8,4.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentyTwo(self):
      nlat = 16
      nlon = 16
      orography = np.array([[9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 5.5,5.5,5.0,5.0, 5.0,4.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,4.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,3.0,3.0, 4.0,4.0,4.0,6.0, 6.0,6.0,1.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,1.5,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.5,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.5, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,6.0,2.5,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0, 6.0,2.5,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,5.0, 4.0,4.0,4.0,4.0, 2.5,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False, True,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,5.0, 2.4,2.45,2.5,2.55, 2.6,2.65,4.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.35, 6.0,6.0,6.0,6.0, 6.0,6.0,2.7,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.3, 6.0,6.0,6.0,6.0, 6.0,6.0,2.75,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.25, 6.0,6.0,6.0,6.0, 6.0,6.0,2.8,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.2, 6.0,6.0,3.0,2.95, 2.90,2.85,4.0,6.0, 6.0,6.0,1.0,0.0],
                                         [9.0,6.0,6.0,2.15, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,1.5,6.0,0.0],
                                         [9.0,6.0,6.0,2.1, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.5,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.05, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,1.55, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,2.0, 6.0,6.0,6.0,6.0, 6.0,6.0,1.6,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,1.95, 6.0,6.0,6.0,6.0, 6.0,1.65,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,5.0, 1.9,1.85,1.8,1.75, 1.7,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentyThree(self):
      nlat = 16
      nlon = 16
      orography = np.array([[9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,5.5, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,5.5, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,2.5,6.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,2.5, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 2.5,6.0,6.0,4.0, 4.0,4.0,4.0,4.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,2.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,1.5,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,1.5, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,5.0,1.95,2.0, 2.05,2.1,2.15,2.2, 2.25,2.3,2.35,5.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.9,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.4, 6.0,6.0,6.0,6.0],
                                         [6.0,1.85,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.45, 6.0,6.0,6.0,6.0],
                                         [6.0,1.8,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,2.5, 6.0,6.0,6.0,6.0],
                                         [6.0,1.75,6.0,6.0, 6.0,6.0,6.0,2.95, 6.0,6.0,6.0,2.55, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,1.7,6.0, 6.0,6.0,6.0,2.9, 6.0,6.0,6.0, 2.6, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,1.65, 6.0,6.0,6.0,2.85, 6.0,6.0,6.0,2.65, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 1.6,6.0,6.0,4.0, 2.8,2.75,2.7,4.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,1.55,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,1.5,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,1.5, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 1.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True, True, True, True,  True, True, True, True,  True, True, True, True,  True, True, True, True]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentyFour(self):
      nlat = 16
      nlon = 16
      orography = np.array([[9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,5.5, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,5.5, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,4.0,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,2.5,6.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,5.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,2.5, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,4.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,2.5,6.0, 6.0,6.0,6.0,4.0, 4.0,4.0,4.0,4.0, 6.0,6.0,6.0,6.0],
                            [6.0,2.5,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [1.5,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,1.5],
                            [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,1.0,6.0],
                            [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,5.0,1.95,2.0, 2.05,2.1,2.15,2.2, 2.25,2.3,2.35,5.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.9,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.4, 6.0,6.0,6.0,6.0],
                                         [6.0,1.85,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,2.45, 6.0,6.0,6.0,6.0],
                                         [6.0,1.8,6.0,6.0, 6.0,6.0,6.0,3.0, 6.0,6.0,6.0,2.5, 6.0,6.0,6.0,6.0],
                                         [6.0,1.75,6.0,6.0, 6.0,6.0,6.0,2.95, 6.0,6.0,6.0,2.55, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,1.7,6.0, 6.0,6.0,6.0,2.9, 6.0,6.0,6.0, 2.6, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,1.65, 6.0,6.0,6.0,2.85, 6.0,6.0,6.0,2.65, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,1.6,6.0, 6.0,6.0,6.0,4.0, 2.8,2.75,2.7,4.0, 6.0,6.0,6.0,6.0],
                                         [6.0,1.55,6.0,6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [1.5,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,1.5],
                                         [6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,1.0,6.0],
                                         [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True, True, True, True,  True, True, True, True,  True, True, True, True,  True, True, True, True]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentyFive(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 2.0,2.0,2.0,2.0, 2.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False, True,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.72,2.68, 5.0,2.6,2.56,2.52, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.76,6.0,6.0, 6.0,6.0,6.0,6.0, 2.48,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.8,6.0,6.0, 6.0,6.0,6.0,6.0, 2.44,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.84,6.0,6.0, 6.0,6.0,6.0,6.0, 2.4,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.88,2.92, 2.96,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.32,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.28,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.24,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.2,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.16,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5,   2,2,2,2, 2,2.04,2.08,2.12, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False,  True,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, True,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False, True,False, True, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,8,4.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentySix(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 4.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 4.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 2.0,2.0,2.0,2.0, 2.0,4.0,4.0,3.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False, True,False,False,  True,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False, True, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.72,2.68, 2.64,2.6,2.56,2.52, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.76,6.0,6.0, 6.0,6.0,6.0,6.0, 2.48,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.8,6.0,6.0, 6.0,6.0,6.0,6.0, 2.44,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.84,6.0,6.0, 6.0,6.0,6.0,6.0, 2.4,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.88,2.92, 2.96,3.0,6.0,6.0, 2.36,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.32,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.28,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.24,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.2,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.16,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5,   2,2,2,2, 2,2.04,2.08,2.12, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False, True,False, True, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,8,4.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentySeven(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,9.0],
                            [0.0,1.0,1.5,2.0, 2.0,2.0,2.5,2.5, 2.5,2.5,2.5,5.0, 5.0,3.0,3.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False, True,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,2.9,9.0],
                                         [0.0,1.0,1.5,2.0, 2.0,2.0,2.1,2.2, 2.3,2.4,2.5,2.6, 2.7,2.8,3.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,8,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentyEight(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.25,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.25,9.0],
                            [0.0,1.0,1.0,2.0, 2.0,2.0,2.6,2.7, 2.5,2.5,2.5,5.0, 5.0,3.25,3.25,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False, True,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, True,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.25,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.125,9.0],
                                         [0.0,1.0,1.0,1.25, 1.5,1.75,2.0,2.25, 2.375,2.5,2.625, 2.75,2.875,3,3.25,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,10,0.9)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversTwentyNine(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                            [9.0,3.25,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,3.25,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,3.25,3.25,5.0, 5.0,2.5,2.5,2.5, 2.7,2.6,2.0,2.0, 2.0,1.0,1.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False, True,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                                         [9.0,3.25,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,3.125,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,3.25,3,2.875, 2.75,2.625,2.5,2.375, 2.25,2.0,1.75,1.5, 1.25,1.0,1.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,10,0.9)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirty(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                            [9.0,3.25,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,3.25,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                            [9.0,3.25,3.25,5.0, 5.0,2.75,2.5,2.5, 2.7,2.6,2.0,2.0, 2.0,1.0,1.0,0.0],
                            [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False, True,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0],
                                         [9.0,3.25,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,3.125,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0],
                                         [9.0,3.25,3,2.875, 2.75,2.625,2.5,2.375, 2.25,2.0,1.75,1.5, 1.25,1.0,1.0,0.0],
                                         [9.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,0.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, False],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                          [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,10,0.9)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirtyOne(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 5.0,5.0,5.5,5.5, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.25,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.25,9.0],
                            [0.0,1.0,1.0,2.0, 2.0,2.0,2.6,2.7, 2.5,2.5,2.75,5.0, 5.0,3.25,3.25,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False, True,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, True,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,3.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.25,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,3.125,9.0],
                                         [0.0,1.0,1.0,1.25, 1.5,1.75,2.0,2.25, 2.375,2.5,2.625, 2.75,2.875,3,3.25,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,10,0.9)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirtyTwo(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 3.0,2.75,2.75,3.0, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.95,2.94, 2.93,2.92,2.91,2.90, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.96,6.0,6.0, 6.0,6.0,6.0,6.0, 2.89,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.97,6.0,6.0, 6.0,6.0,6.0,6.0, 2.88,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.98,6.0,6.0, 6.0,6.0,6.0,6.0, 2.87,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.99,3.0, 3.0,3.0,6.0,6.0, 2.86,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.85,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.84,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.83,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.82,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.81,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5, 3.0,2.75,2.75,2.76, 2.77,2.78,2.79,2.80, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False, True,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                            dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirtyThree(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,3.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,4.0,3.0,3.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0],
                            [0.0,1.0,1.5,1.5, 3.0,2.75,2.75,3.0, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.95,2.94, 2.93,2.92,2.91,2.90, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.96,6.0,6.0, 6.0,6.0,6.0,6.0, 2.89,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.97,6.0,6.0, 6.0,6.0,6.0,6.0, 2.88,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,2.98,6.0,6.0, 6.0,6.0,6.0,6.0, 2.87,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,4.0,2.99,3.0, 3.0,3.0,6.0,6.0, 2.86,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.85,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.84,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.83,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.82,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 2.81,6.0,6.0,9.0],
                                         [0.0,1.0,1.5,1.5, 3.0,2.75,2.75,2.76, 2.77,2.78,2.79,2.80, 5.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                            [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                            dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,True,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.6)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirtyFour(self):
      nlat = 16
      nlon = 16
      orography = np.array([[6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [4.0,5.0, 5.0,5.0,5.5,5.5, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,4.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,4.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,4.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,4.0],
                            [4.0,4.0, 3.0,3.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,4.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0],
                            [3.0,3.0, 4.0,4.0,4.0,4.0, 5.0,6.0,6.0,9.0, 0.0,1.0,1.5,1.5, 3.0,3.0],
                            [6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,6.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False, True, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,    0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,    0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,    0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,    0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [2.65,2.6, 2.55,2.5,2.45,2.4, 5.0,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,4.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 2.35,6.0,6.0,9.0,   0.0,6.0,6.0,6.0, 6.0,2.7],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 2.3,6.0,6.0,9.0,   0.0,6.0,6.0,6.0, 6.0,2.75],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 2.25,6.0,6.0,9.0,   0.0,6.0,6.0,6.0, 6.0,2.8],
                                         [2.85,2.90, 2.95,3.0,6.0,6.0, 2.2,6.0,6.0,9.0, 0.0,6.0,6.0,6.0, 6.0,4.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 2.15,6.0,6.0,9.0,   0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 2.1,6.0,6.0,9.0,    0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 2.05,6.0,6.0,9.0,   0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 2.0,6.0,6.0,9.0,    0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 1.95,6.0,6.0,9.0,   0.0,6.0,6.0,6.0, 6.0,6.0],
                                         [1.65,1.7, 1.75,1.8,1.85,1.9, 5.0,6.0,6.0,9.0,  0.0,1.0,1.5,1.5, 1.55,1.6],
                                         [6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,     0.0,6.0,6.0,6.0, 6.0,6.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                          [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,4,0.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirtyFive(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,5.0,5.0,5.0, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,2.5,2.5,2.5, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,True, False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,2.5,2.5,2.5, 2.75,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,8,0.6,4,0.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirtySix(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,5.0,5.0,5.0, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,2.5,2.5,2.5, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,True, False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,2.5,2.5,2.5, 2.75,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,8,0.6,3,0.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)

    def testBurnCarvedRiversThirtySeven(self):
      nlat = 16
      nlon = 16
      orography = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,5.0,5.0,5.0, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                            [0.0,2.0,2.0,2.0, 2.5,2.5,2.5,2.5, 2.5,5.0,5.0,5.0, 5.0,3.0,6.0,9.0],
                            [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                            dtype=np.float64)
      rdirs = np.zeros((nlat,nlon),dtype=np.float64)
      minima = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,True, False,False],
                         [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                         dtype=np.int32)
      expected_orography_out = np.array([[0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0],
                                         [0.0,2.0,2.0,2.0, 2.1,2.2,2.3,2.4, 2.5,2.6,2.7,2.8, 2.9,3.0,6.0,9.0],
                                         [0.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0]],
                                         dtype=np.float64)
      lakemask = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                           [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                           dtype=np.int32)
      truesinks = np.zeros((16,16),dtype=np.int32)
      landsea = np.array([[True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                          [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                          dtype=np.int32)
      empty = np.zeros((16,16),dtype=np.int32)
      fill_sinks_wrapper.fill_sinks_cpp_func(orography,4,True,landsea,False,True,truesinks,
                                                 False,0.0,empty,empty,rdirs,empty,False)
      self.assertFalse(np.array_equal(orography,expected_orography_out))
      lake_operators_wrapper.burn_carved_rivers(orography,rdirs,minima,lakemask,True,8,0.6,3,0.1)
      np.testing.assert_array_almost_equal(orography,expected_orography_out)


class TestConnectedAreaReduction(unittest.TestCase):

    def testConnectedAreaReductionOne(self):
      nlat = 16
      nlon = 16
      areas = \
        np.array([[True, False, True,False, False,False,False,False, False,True, True, False, False,True, False,False],
                  [True,  True,False,False, False,False,False,False, False,False,False,False, True, False, True,False],
                  [False,False, True,False, False,False,False,False, False,False,False,False, False, True,False,False],
                  [False, True,False, True, False,False,False,False, False,False,False,False, False,False, True,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                  [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                  [True, False,False,False, True,  True, True,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False, True, True,False, False,False,False,False, False,False,False, True],
                  [False, True,False,False, False,False,False,False,  True,False,False,True, False,False,False,False],
                  [True,False,True, False, False,False,False,False, False, True,False,True, False,False,False,False],
                  [True,False,False, True, False,False,False,False, False, True,False,True, False,False,True ,False],
                  [False, True,False, True, False,False,False,False, False,False,True,False, False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, True, False,False,True],
                  [True, False,False,False, False,False, True,False, False,False,False,False, True, False,False,True],
                  [False,False,False,False, False,False,False, True, False,False,False,False, True, False,False,True],
                  [True,False,False,False, False, True, True,False, False,True, True ,False, True, True, True, False]],
                  dtype=np.int32)
      expected_areas_out = \
        np.array([[True, False,False,False, False,False,False,False, False,True, False,False, False,True, False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False, True, False,False,False,False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False, True,False,False, False,False,False,False,  True,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,True ,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, True, False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,True, False,False, False,False,False,False]],
                                     dtype=np.int32)
      lake_operators_wrapper.reduce_connected_areas_to_points(areas,True)
      np.testing.assert_array_equal(areas,expected_areas_out)

    def testConnectedAreaReductionTwo(self):
      nlat = 16
      nlon = 16
      areas = \
        np.array([[False,False,False,False, False,False,False,False, False,False,True, False, False,False,False,False],
                  [False,True, True, True,  False, True,False,False, False,True, False,True,  False,False,False,False],
                  [False,True, False,False, False,False,True, False, False,True, False,True,  False,False,False,False],
                  [False,True, False,False, False,False,True, False, False,False,True, False, False,False,False,False],
                  [False,True, False,False, False,False,True, False, False,False,False,False, False,True, True, True],
                  [False,True, False,False, False,False,True, False, False,False,False,False, False,True, False,True],
                  [False,True, True, True,  True, True, False,False, False,False,False,False, False,True, False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,True, True, True],
                  [False,False,False,False, False,False,False,False, False,True, True, True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,False,True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,False,True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,True,  False,False,False,False],
                  [True, True, True, False, True, True, True, True,  False,False,False,False, False,False,True, False],
                  [True, False,False,False, False,False,False,True,  False,False,False,False, True, False,True, False],
                  [True, False,False,False, False,False,False,True,  False,False,False,False, True, False,True, False],
                  [False,True, True, False, True, True, True, True,  False,False,False,False, False,True, False,False]],
                        dtype=np.int32)
      expected_areas_out = \
        np.array([[False,False,False,False, False,False,False,False, False,False,True, False, False,False,False,False],
                  [False,True, False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,True, False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,True, False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [True, False,False,False, True, False,False,False, False,False,False,False, False,False,True, False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                                     dtype=np.int32)
      lake_operators_wrapper.reduce_connected_areas_to_points(areas,True)
      np.testing.assert_array_equal(areas,expected_areas_out)

    def testConnectedAreaReductionThree(self):
      nlat = 16
      nlon = 16
      areas = \
        np.array([[False,False,False,False, False,True, True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, False,False,True,  False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, False,False,True,  False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,True, True, False, False,False,False,False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, True, True, True, True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,False,True,  False,False,False,True],
                  [True, False,False,False, False,False,False,False, True, False,False,True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, True, True, True,  False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,True, False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, False,True, False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, True, False,True, False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      expected_areas_out = \
        np.array([[False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, False,False,True,  False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, True, False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,True, False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, False,True, False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,True, False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                                     dtype=np.int32)
      lake_operators_wrapper.reduce_connected_areas_to_points(areas,False)
      np.testing.assert_array_equal(areas,expected_areas_out)

    def testConnectedAreaReductionFour(self):
      nlat = 16
      nlon = 16
      areas = \
        np.array([[False,False,False,False, False,True, True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, False,False,True,  False,False,False,False, False, True, True,False],
                  [False,False,False,False, True, False,False,True,  False,False,False,False, False, True, True,False],
                  [False,False,False,False, False,True, True, False, False,False,False,False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, True, True, True, True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,False,True,  False,False,False,True],
                  [True, False,False,False, False,False,False,False, True, False,False,True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, True, True, True,  False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,True, False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, False,True, False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, True, False,True, False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      expected_areas_out = \
        np.array([[False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False, True,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      orography = np.array([[1.0,1.0,1.0,1.0, 1.0,0.1,0.1,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 0.1,1.0,1.0,0.1, 1.0,1.0,1.0,1.0, 1.0,0.5,0.5,1.0],
                            [1.0,1.0,1.0,1.0, 0.1,1.0,1.0,0.1, 1.0,1.0,1.0,1.0, 1.0,0.5,0.5,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,0.1,0.1,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [0.1,0.1,1.0,1.0, 1.0,1.0,1.0,1.0, 0.2,0.2,0.2,0.2, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.2,1.0,1.0,0.2, 1.0,1.0,1.0,0.1],
                            [0.1,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.2,1.0,1.0,0.2, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.2,0.2,0.2,0.2, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,0.1,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.1,1.0,0.1,1.0, 1.0,1.0,1.0,1.0],
                            [0.5,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,0.1,1.0,1.0, 1.0,1.0,1.0,0.5],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.1,1.0,0.1,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,0.1,1.0, 1.0,1.0,1.0,1.0]],
                            dtype=np.float64)
      lake_operators_wrapper.reduce_connected_areas_to_points(areas,True,orography,True)
      np.testing.assert_array_equal(areas,expected_areas_out)

    def testConnectedAreaReductionFive(self):
      nlat = 16
      nlon = 16
      areas = \
        np.array([[False,False,False,False, False,True, True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, False,False,True,  False,False,False,False, False, True, True,False],
                  [False,False,False,False, True, False,False,True,  False,False,False,False, False, True, True,False],
                  [False,False,False,False, False,True, True, False, False,False,False,False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, True, True, True, True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,False,True,  False,False,False,True],
                  [True, False,False,False, False,False,False,False, True, False,False,True,  False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, True, True, True,  False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,True, False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, True, False,True, False, False,False,False,False],
                  [True, False,False,False, False,False,False,False, False,True, False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, True, False,True, False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      expected_areas_out = \
        np.array([[False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False,  True,False,False, True, False,False,False,False, False, True,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False, True,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                  [True,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False,  True,False, True,False, False,False,False,False],
                  [True,False,False,False, False,False,False,False, False, True,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False,  True,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      orography = np.array([[1.0,1.0,1.0,1.0, 1.0,0.1,0.1,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 0.1,1.0,1.0,0.1, 1.0,1.0,1.0,1.0, 1.0,0.5,0.5,1.0],
                            [1.0,1.0,1.0,1.0, 0.1,1.0,1.0,0.1, 1.0,1.0,1.0,1.0, 1.0,0.5,0.5,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,0.1,0.1,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [0.1,0.1,1.0,1.0, 1.0,1.0,1.0,1.0, 0.2,0.2,0.2,0.2, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.2,1.0,1.0,0.2, 1.0,1.0,1.0,0.1],
                            [0.1,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.2,1.0,1.0,0.2, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.2,0.2,0.2,0.2, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,0.1,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.1,1.0,0.1,1.0, 1.0,1.0,1.0,1.0],
                            [0.5,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,0.1,1.0,1.0, 1.0,1.0,1.0,0.5],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 0.1,1.0,0.1,1.0, 1.0,1.0,1.0,1.0],
                            [1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0, 1.0,1.0,0.1,1.0, 1.0,1.0,1.0,1.0]],
                            dtype=np.float64)
      lake_operators_wrapper.reduce_connected_areas_to_points(areas,False,orography,True)
      np.testing.assert_array_equal(areas,expected_areas_out)

    def testLakeFillingOne(self):
      nlat = 16
      nlon = 16
      lake_minima = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      lake_mask = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      orography = np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                            [0.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.5, 1.5,1.5,1.5,1.5, 1.5,1.5,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.6,0.6,0.6,0.5, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.6,0.2,0.2,0.3, 0.4,1.8,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.5,0.2,0.1,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.5,0.2,0.1,0.2, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.4,0.2,0.2,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.4,0.4,0.4,0.4, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,1.5,1.5, 1.5,1.5,1.2,1.5, 1.5,1.1,1.5,1.5, 1.5,1.5,1.5,0.0],
                            [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                            dtype=np.float64)
      expected_orography_out = np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                         [0.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.5, 1.5,1.5,1.5,1.5, 1.5,1.5,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,1.8,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,1.5,1.5, 1.5,1.5,1.2,1.5, 1.5,1.1,1.5,1.5, 1.5,1.5,1.5,0.0],
                                         [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                                         dtype=np.float64)
      lake_operators_wrapper.fill_lakes(lake_minima,lake_mask,orography,False)
      np.testing.assert_array_equal(orography,expected_orography_out)

    def testLakeFillingTwo(self):
      nlat = 16
      nlon = 16
      lake_minima = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                              dtype=np.int32)
      lake_mask = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      orography = np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                            [0.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.5, 1.5,1.5,1.5,1.5, 1.5,1.5,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.6,0.6,0.6,0.5, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.6,0.2,0.2,0.3, 0.4,1.8,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.5,0.2,0.1,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.5,0.2,0.1,0.2, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.4,0.2,0.2,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 0.4,0.4,0.4,0.4, 0.4,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                            [0.0,1.5,1.5,1.5, 1.5,1.5,1.2,1.5, 1.5,1.1,1.5,1.5, 1.5,1.5,1.5,0.0],
                            [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                            dtype=np.float64)
      expected_orography_out = np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                         [0.0,1.5,1.5,1.5, 1.1,1.5,1.5,1.5, 1.5,1.5,1.5,1.5, 1.5,1.5,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,1.8,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,1.5,0.0],
                                         [0.0,1.5,1.5,1.5, 1.5,1.5,1.2,1.5, 1.5,1.1,1.5,1.5, 1.5,1.5,1.5,0.0],
                                         [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                                         dtype=np.float64)
      lake_operators_wrapper.fill_lakes(lake_minima,lake_mask,orography,True)
      np.testing.assert_array_equal(orography,expected_orography_out)

    def testLakeFillingThree(self):
      nlat = 16
      nlon = 16
      lake_minima = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      lake_mask = \
        np.array([[True, True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, True, True,  False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [True, False,False,False, True, True, True, True,  True, False,False, True, False,False,False,True],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, True, True, False,True],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, False,True, True, True],
                  [True, False,False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [False,True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,True, True,  False,False,False,False, False,False,False,False, False,False,False,True]],
                  dtype=np.int32)
      orography = np.array([[-0.1,-0.0,0.3,2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [0.2,0.1,0.2,0.5, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.2,0.5,0.3,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.2,0.2,2.0,2.0, 0.6,0.6,0.6,0.5, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.3,2.0,2.0,2.0, 0.6,0.2,0.2,0.3, 0.4,1.8,2.0,0.1, 2.0,2.0,2.0,0.2],
                            [0.3,2.0,2.0,2.0, 0.5,0.2,0.1,0.3, 0.4,2.0,0.2,2.0, 0.2,0.1,2.0,0.3],
                            [0.2,2.0,2.0,2.0, 0.5,0.2,0.1,0.2, 0.4,2.0,0.3,2.0, 2.0,0.2,0.1,0.2],
                            [0.1,2.0,2.0,2.0, 0.4,0.2,0.2,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.5],
                            [0.2,0.3,2.0,2.0, 0.4,0.4,0.4,0.4, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.3],
                            [2.0,0.1,0.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.3],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [2.0,2.0,0.1,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,0.2,0.3, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.3]],
                            dtype=np.float64)
      expected_orography_out = np.array([[1.7,1.7,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,1.7,1.7,1.7, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,1.7,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,1.7,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,1.8,2.0,1.7, 2.0,2.0,2.0,1.7],
                                         [1.7,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,1.7,2.0, 1.7,1.7,2.0,1.7],
                                         [1.7,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,1.7,2.0, 2.0,1.7,1.7,1.7],
                                         [1.7,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,1.7,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,1.7,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,0.1,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,0.2,0.3, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7]],
                                         dtype=np.float64)
      lake_operators_wrapper.fill_lakes(lake_minima,lake_mask,orography,True)
      np.testing.assert_array_equal(orography,expected_orography_out)

    def testLakeFillingFour(self):
      nlat = 16
      nlon = 16
      lake_minima = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,False]],
                              dtype=np.int32)
      lake_mask = \
        np.array([[True, True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, True, True,  False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [True, False,False,False, True, True, True, True,  True, False,False, True, False,False,False,True],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, True, True, False,True],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, False,True, True, True],
                  [True, False,False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [False,True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,True, False,  False,False,False,False, False,False,False,False, False,False,False,True]],
                  dtype=np.int32)
      orography = np.array([[-0.1,-0.0,0.3,2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [0.2,0.1,0.2,0.5, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.2,0.5,0.3,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.2,0.2,2.0,2.0, 0.6,0.6,0.6,0.5, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.3,2.0,2.0,2.0, 0.6,0.2,0.2,0.3, 0.4,1.8,2.0,0.1, 2.0,2.0,2.0,0.2],
                            [0.3,2.0,2.0,2.0, 0.5,0.2,0.1,0.3, 0.4,2.0,0.2,2.0, 0.2,0.1,2.0,0.3],
                            [0.2,2.0,2.0,2.0, 0.5,0.2,0.1,0.2, 0.4,2.0,0.3,2.0, 2.0,0.2,0.1,0.2],
                            [0.1,2.0,2.0,2.0, 0.4,0.2,0.2,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.5],
                            [0.2,0.3,2.0,2.0, 0.4,0.4,0.4,0.4, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.3],
                            [2.0,0.1,0.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.3],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [2.0,2.0,0.1,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,0.2,0.3, 1.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.3]],
                            dtype=np.float64)
      expected_orography_out = np.array([[1.7,1.7,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,1.7,1.7,1.7, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,1.7,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,1.7,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,1.8,2.0,1.7, 2.0,2.0,2.0,1.7],
                                         [1.7,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,1.7,2.0, 1.7,1.7,2.0,1.7],
                                         [1.7,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,1.7,2.0, 2.0,1.7,1.7,1.7],
                                         [1.7,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [1.7,1.7,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,1.7,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,0.3,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7],
                                         [2.0,2.0,0.3,0.3, 1.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.7]],
                                         dtype=np.float64)
      lake_operators_wrapper.fill_lakes(lake_minima,lake_mask,orography,True)
      np.testing.assert_array_equal(orography,expected_orography_out)

    def testLakeFillingSix(self):
      nlat = 16
      nlon = 16
      lake_minima = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False, True],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,False]],
                  dtype=np.int32)
      lake_mask = \
        np.array([[True, True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, True, True,  False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [True, False,False,False, True, True, True, True,  True, False,False, True, False,False,False,True],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, True, True, False,True],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, False,True, True, True],
                  [True, False,False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,True],
                  [False,True, True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,True, False,  False,False,False,False, False,False,False,False, False,False,False,True]],
                  dtype=np.int32)
      orography = np.array([[-0.1,-0.0,0.3,2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [0.2,0.1,0.2,0.5, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.2,0.5,0.3,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.2,0.2,2.0,2.0, 0.6,0.6,0.6,0.5, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.3,2.0,2.0,2.0, 0.6,0.2,0.2,0.3, 0.4,1.8,2.0,0.1, 2.0,2.0,2.0,0.2],
                            [0.3,2.0,2.0,2.0, 0.5,0.2,0.1,0.3, 0.4,2.0,0.2,2.0, 0.2,0.1,2.0,0.3],
                            [0.2,2.0,2.0,2.0, 0.5,0.2,0.1,0.2, 0.4,2.0,0.3,2.0, 2.0,0.2,0.1,0.2],
                            [0.1,2.0,2.0,2.0, 0.4,0.2,0.2,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.5],
                            [0.2,0.3,2.0,2.0, 0.4,0.4,0.4,0.4, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,0.3],
                            [2.0,0.1,0.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.3],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.1],
                            [2.0,2.0,0.1,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [2.0,2.0,0.2,0.3, 1.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.3]],
                            dtype=np.float64)
      expected_orography_out = np.array([[0.7,0.7,0.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [0.7,0.7,0.7,0.7, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [0.7,0.7,0.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [0.7,0.7,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [0.7,2.0,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,1.8,2.0,0.7, 2.0,2.0,2.0,0.7],
                                         [0.7,2.0,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,0.7,2.0, 0.7,0.7,2.0,0.7],
                                         [0.7,2.0,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,0.7,2.0, 2.0,0.7,0.7,0.7],
                                         [0.7,2.0,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [0.7,0.7,2.0,2.0, 0.6,0.6,0.6,0.6, 0.6,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [2.0,0.7,0.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [2.0,2.0,1.7,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [2.0,2.0,0.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [2.0,2.0,0.2,0.3, 1.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7]],
                                         dtype=np.float64)
      lake_operators_wrapper.fill_lakes(lake_minima,lake_mask,orography,False)
      np.testing.assert_array_equal(orography,expected_orography_out)

    def testLakeFillingSeven(self):
      nlat = 16
      nlon = 16
      lake_minima = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,True, False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True]],
                  dtype=np.int32)
      lake_mask = \
        np.array([[True, True, True, False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [True, True, True, True,  False,False,True,False,  False,False,False,False, False,False,False,False],
                  [True, True, True, False, False,False,True,False,  False,False,False,False, False,False,False,False],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [True, False,False,False, True, True, True, True,  True, False,False, True, False,False,False,False],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, False,False,False,False],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, False,False,False,False],
                  [True, False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,True, True, False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True]],
                  dtype=np.int32)
      orography = np.array([[-0.1,-0.0,0.3,2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [0.2,0.1,0.2,0.5, 2.0,2.0,1.9,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [0.2,0.5,0.3,2.0, 2.0,2.0,1.9,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.4],
                            [0.2,0.2,2.0,2.0, 0.6,0.6,0.6,0.5, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [0.3,2.0,2.0,2.0, 0.6,0.2,0.2,0.3, 0.4,1.8,2.0,0.1, 2.0,2.0,2.0,2.0],
                            [0.3,2.0,2.0,2.0, 0.5,0.2,0.1,0.3, 0.4,2.0,0.2,2.0, 0.2,0.1,2.0,2.0],
                            [0.2,2.0,2.0,2.0, 0.5,0.2,0.1,0.2, 0.4,2.0,0.3,2.0, 2.0,0.2,0.1,2.0],
                            [0.1,2.0,2.0,2.0, 0.4,0.2,0.2,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [0.2,0.3,2.0,2.0, 0.4,0.4,0.4,0.4, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,0.1,0.7,2.0, 2.0,2.0,2.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,1.7,2.0, 2.0,2.0,2.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,0.1,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.2],
                            [0.7,2.0,0.2,0.3, 1.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.3]],
                            dtype=np.float64)
      expected_orography_out = np.array([[1.4,1.4,1.4,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [1.4,1.4,1.4,1.4, 2.0,2.0,1.9,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [1.4,1.4,1.4,2.0, 2.0,2.0,1.9,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.4],
                                         [1.4,1.4,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [1.4,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,1.8,2.0,0.1, 2.0,2.0,2.0,2.0],
                                         [1.4,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,0.2,2.0, 0.2,0.1,2.0,2.0],
                                         [1.4,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,0.3,2.0, 2.0,0.2,0.1,2.0],
                                         [1.4,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [1.4,1.4,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,1.4,1.4,2.0, 2.0,2.0,2.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,1.7,2.0, 2.0,2.0,2.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,0.3,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7],
                                         [0.7,2.0,0.3,0.3, 1.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7]],
                                         dtype=np.float64)
      lake_operators_wrapper.fill_lakes(lake_minima,lake_mask,orography,True)
      np.testing.assert_array_equal(orography,expected_orography_out)

    def testLakeFillingEight(self):
      nlat = 16
      nlon = 16
      lake_minima = \
        np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,True, False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, False, False,False,False,False, False,False,False,False],
                  [False,False,False,True,  False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, True,  False,True, False,False, False,False,False,False],
                  [False,False,False,False, False,False,True, True,  False,False,False,False, False,False,False,False],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True]],
                  dtype=np.int32)
      lake_mask = \
        np.array([[True, True, True, False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [True, True, True, True,  False,False,True,False,  False,False,False,False, False,False,False,False],
                  [True, True, True, False, False,False,True,False,  False,False,False,False, False,False,False,False],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [True, False,False,False, True, True, True, True,  True, False,False, True, False,False,False,False],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, False,False,False,False],
                  [True, False,False,False, True, True, True, True,  True, False, True,False, False,False,False,False],
                  [True, False,False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [True, True, False,False, True, True, True, True,  True, False,False,False, False,False,False,False],
                  [False,True, True, False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True],
                  [False,False,True, False, False,False,False,False, False,False,False,False, False,False,False,True]],
                  dtype=np.int32)
      orography = np.array([[-0.1,-0.0,0.3,2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [0.2,0.1,0.2,0.5, 2.0,2.0,1.9,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [0.2,0.5,0.3,2.0, 2.0,2.0,1.9,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.4],
                            [0.2,0.2,2.0,2.0, 0.6,0.6,0.6,0.5, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [0.3,2.0,2.0,2.0, 0.6,0.2,0.2,0.3, 0.4,1.8,2.0,0.1, 2.0,2.0,2.0,2.0],
                            [0.3,2.0,2.0,2.0, 0.5,0.2,0.1,0.3, 0.4,2.0,0.2,2.0, 0.2,0.1,2.0,2.0],
                            [0.2,2.0,2.0,2.0, 0.5,0.2,0.1,0.2, 0.4,2.0,0.3,2.0, 2.0,0.2,0.1,2.0],
                            [0.1,2.0,2.0,2.0, 0.4,0.2,0.2,0.3, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [0.2,0.3,2.0,2.0, 0.4,0.4,0.4,0.4, 0.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,0.1,0.7,2.0, 2.0,2.0,2.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,1.7,2.0, 2.0,2.0,2.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,2.0,2.0, 2.0,2.0,0.2,0.1, 2.0,0.1,0.1,2.0, 2.0,2.0,2.0,2.0],
                            [2.0,2.0,0.1,2.0, 2.0,2.0,0.3,0.2, 2.0,0.2,0.2,2.0, 2.0,2.0,2.0,0.2],
                            [0.7,2.0,0.2,0.3, 1.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.3]],
                            dtype=np.float64)
      expected_orography_out = np.array([[1.4,1.4,1.4,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [1.4,1.4,1.4,1.4, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [1.4,1.4,1.4,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,1.4],
                                         [1.4,1.4,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [1.4,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,1.8,2.0,0.1, 2.0,2.0,2.0,2.0],
                                         [1.4,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,0.2,2.0, 0.2,0.1,2.0,2.0],
                                         [1.4,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,0.3,2.0, 2.0,0.2,0.1,2.0],
                                         [1.4,2.0,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [1.4,1.4,2.0,2.0, 1.8,1.8,1.8,1.8, 1.8,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,1.4,1.4,2.0, 2.0,2.0,2.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,1.7,2.0, 2.0,2.0,2.2,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,2.0,2.0, 2.0,2.0,0.2,0.1, 2.0,0.1,0.1,2.0, 2.0,2.0,2.0,2.0],
                                         [2.0,2.0,0.3,2.0, 2.0,2.0,0.3,0.2, 2.0,0.2,0.2,2.0, 2.0,2.0,2.0,0.7],
                                         [0.7,2.0,0.3,0.3, 1.4,2.0,2.0,2.0, 2.0,2.0,2.0,2.0, 2.0,2.0,2.0,0.7]],
                                         dtype=np.float64)
      lake_operators_wrapper.fill_lakes(lake_minima,lake_mask,orography,True)
      np.testing.assert_array_equal(orography,expected_orography_out)

class BasinEvaluationDriver(unittest.TestCase):

  merge_data_file = os.path.join(data_dir,"temp/merge_test_data.nc")
  merge_data_file_evaluate_basins_one = os.path.join(data_dir,
                                                     "temp/merge_test_data_eval_basins_one.nc")
  merge_data_expected_output_file = os.path.join(data_dir,
                                                 "unit_test_data/merge_test_data_expected_out.nc")
  merge_data_expected_output_file_evaluate_basins_one = \
    os.path.join(data_dir,
                 "unit_test_data/merge_test_data_eval_basins_one_expected_out.nc")
  def setUp(self):
    self.cdo_instance = cdo.Cdo()

  def tearDown(self):
    files_to_remove = [self.merge_data_file,
                       self.merge_data_file_evaluate_basins_one]
    for filename in files_to_remove:
      try:
        os.remove(filename)
      except:
        pass

  def testEvaluateBasinsOne(self):
    coarse_catchment_nums_in = np.array([[3,3,2,2],
                                         [3,3,2,2],
                                         [1,1,1,2],
                                         [1,1,1,1]],
                                         dtype=np.int32)
    prior_coarse_rdirs_in = np.array([[5.0,5.0,5.0,5.0],
                                      [5.0,5.0,5.0,5.0],
                                      [5.0,5.0,5.0,5.0],
                                      [5.0,5.0,5.0,5.0]],
                                      dtype=np.float64)
    corrected_orography_in =\
    np.array([[10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0],
              [1.0, 8.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 6.0, 6.0, 5.0, 6.0,10.0,10.0,10.0, 1.0],
              [10.0, 3.0, 3.0,10.0,10.0, 7.0, 3.0,10.0,10.0,10.0,10.0, 6.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,10.0,10.0],
              [10.0, 3.0, 3.0,10.0,10.0, 3.0, 3.0, 4.0, 3.0,10.0,10.0,10.0, 2.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,10.0],
              [10.0, 3.0, 3.0, 6.0, 2.0, 1.0,10.0, 2.0, 3.0, 5.0, 3.0, 2.0, 3.0, 2.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0],
              [4.0, 4.0, 3.0,10.0, 2.0, 1.0, 2.0, 2.0, 3.0,10.0, 3.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0],
              [10.0, 4.0, 4.0,10.0,10.0, 2.0,10.0, 4.0,10.0,10.0,10.0, 3.0, 2.0, 3.0, 2.0, 3.0, 5.0, 9.0,10.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0, 3.0, 3.0, 3.0, 4.0, 5.0,10.0, 8.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0, 5.0,10.0,10.0,10.0,10.0, 7.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 6.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 4.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0, 2.0, 3.0, 3.0,10.0],
              [10.0,10.0,10.0, 3.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0, 3.0, 3.0,10.0,10.0],
              [10.0,10.0,10.0, 2.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 4.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0, 3.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 1.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0, 1.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 0.0,10.0,10.0,10.0,10.0]],
              dtype=np.float64)
    raw_orography_in =\
    np.array([[10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0],
              [1.0, 8.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 6.0, 6.0, 5.0, 6.0,10.0,10.0,10.0, 1.0],
              [10.0, 3.0, 3.0,10.0,10.0, 8.0, 7.0,10.0,10.0,10.0,10.0, 6.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,10.0,10.0],
              [10.0, 3.0, 3.0,10.0,10.0, 3.0, 3.0, 4.0, 3.0,10.0,10.0,10.0, 2.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,10.0],
              [10.0, 3.0, 3.0, 6.0, 2.0, 1.0,10.0, 2.0, 3.0,10.0, 3.0, 2.0, 3.0, 2.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0],
              [4.0, 4.0, 3.0,10.0, 2.0, 1.0, 2.0, 2.0, 3.0,10.0, 3.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0],
              [10.0, 4.0, 4.0,10.0,10.0, 2.0,10.0, 4.0,10.0,10.0,10.0, 3.0, 2.0, 3.0, 2.0, 3.0, 5.0, 9.0,10.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0, 3.0, 3.0, 3.0, 4.0, 5.0,10.0, 8.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0, 5.0,10.0,10.0,10.0,10.0, 7.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 6.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0,10.0],
              [10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 4.0,10.0],
              [10.0,10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0, 2.0, 3.0, 3.0,10.0],
              [10.0,10.0,10.0, 3.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0, 3.0, 3.0,10.0,10.0],
              [10.0,10.0,10.0, 2.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 4.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0, 3.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 1.0,10.0,10.0,10.0,10.0],
              [10.0,10.0,10.0, 1.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 0.0,10.0,10.0,10.0,10.0]],
              dtype=np.float64)
    minima_in =\
    np.array([[False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [True, False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,True, False,False,
              False,False,False,False],
              [False,False,False,False,False,True, False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,True, False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,True, False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False],
              [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,
              False,False,False,False]],
              dtype=np.int32)
    prior_fine_rdirs_in = np.array([[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,3.0,3.0,2.0,1.0,1.0,3.0,3.0,2.0],
                                    [2.0,1.0,2.0,1.0,1.0,2.0,1.0,1.0,1.0,3.0,3.0,3.0,2.0,3.0,2.0,1.0,1.0,3.0,3.0,3.0],
                                    [5.0,4.0,1.0,1.0,3.0,2.0,1.0,1.0,1.0,1.0,3.0,3.0,2.0,1.0,1.0,1.0,1.0,6.0,6.0,6.0],
                                    [8.0,7.0,4.0,4.0,3.0,2.0,1.0,1.0,2.0,1.0,6.0,3.0,2.0,1.0,1.0,1.0,1.0,1.0,9.0,9.0],
                                    [9.0,8.0,7.0,3.0,3.0,2.0,1.0,2.0,1.0,1.0,3.0,6.0,3.0,2.0,1.0,1.0,1.0,1.0,1.0,9.0],
                                    [9.0,8.0,7.0,3.0,3.0,2.0,1.0,1.0,1.0,1.0,3.0,3.0,6.0,5.0,4.0,4.0,1.0,1.0,1.0,3.0],
                                    [9.0,8.0,7.0,6.0,6.0,5.0,4.0,4.0,4.0,4.0,6.0,6.0,9.0,8.0,7.0,1.0,1.0,4.0,4.0,6.0],
                                    [9.0,9.0,8.0,9.0,9.0,8.0,7.0,7.0,7.0,7.0,9.0,9.0,8.0,7.0,5.0,4.0,4.0,7.0,7.0,9.0],
                                    [9.0,9.0,8.0,7.0,9.0,8.0,7.0,8.0,7.0,7.0,9.0,9.0,8.0,7.0,8.0,7.0,7.0,7.0,2.0,1.0],
                                    [9.0,9.0,8.0,9.0,9.0,8.0,7.0,7.0,7.0,9.0,9.0,9.0,8.0,7.0,7.0,7.0,7.0,7.0,2.0,1.0],
                                    [1.0,1.0,9.0,9.0,9.0,8.0,7.0,7.0,7.0,9.0,9.0,9.0,8.0,7.0,7.0,7.0,7.0,3.0,2.0,1.0],
                                    [1.0,3.0,3.0,2.0,1.0,1.0,1.0,1.0,9.0,9.0,9.0,9.0,8.0,3.0,3.0,2.0,1.0,3.0,2.0,1.0],
                                    [1.0,3.0,3.0,2.0,1.0,1.0,1.0,1.0,1.0,9.0,9.0,9.0,3.0,3.0,3.0,2.0,1.0,1.0,1.0,1.0],
                                    [4.0,3.0,3.0,2.0,1.0,1.0,1.0,1.0,1.0,9.0,9.0,3.0,6.0,6.0,6.0,5.0,4.0,4.0,4.0,4.0],
                                    [7.0,3.0,3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,9.0,9.0,8.0,7.0,7.0,7.0,7.0],
                                    [7.0,3.0,6.0,5.0,4.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,9.0,8.0,7.0,7.0,7.0,7.0],
                                    [3.0,3.0,3.0,2.0,1.0,4.0,4.0,4.0,4.0,4.0,3.0,3.0,3.0,3.0,3.0,2.0,1.0,1.0,7.0,7.0],
                                    [3.0,3.0,3.0,2.0,1.0,7.0,7.0,7.0,7.0,7.0,3.0,3.0,3.0,3.0,3.0,2.0,1.0,1.0,1.0,7.0],
                                    [3.0,3.0,3.0,2.0,1.0,1.0,7.0,7.0,7.0,7.0,3.0,3.0,3.0,3.0,3.0,2.0,1.0,1.0,1.0,3.0],
                                    [6.0,6.0,6.0,0.0,4.0,4.0,4.0,7.0,7.0,7.0,6.0,6.0,6.0,6.0,6.0,0.0,4.0,4.0,4.0,6.0]],
                                    dtype=np.float64)
    prior_fine_catchments_in = np.array([[11,11,11,11,11,11,13,13,12,12,12,12,12,12,12,12,12,11,11,11],
                                         [11,11,11,11,11,13,13,13,13,12,12,12,12,12,12,12,12,11,11,11],
                                         [11,11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,12,11,11,11],
                                         [11,11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,12,12,11,11],
                                         [11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,12,12,14,14,11],
                                         [11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,12,14,14,14,11],
                                         [11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,14,14,14,14,11],
                                         [11,11,11,13,13,13,13,13,13,13,12,12,12,12,14,14,14,14,14,11],
                                         [11,11,11,11,13,13,13,13,13,13,12,12,12,12,14,14,14,14,15,15],
                                         [11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,14,14,14,15,15],
                                         [15,15,13,13,13,13,13,13,13,12,12,12,12,12,12,12,14,15,15,15],
                                         [15,16,16,16,16,16,16,16,12,12,12,12,12,15,15,15,15,15,15,15],
                                         [15,16,16,16,16,16,16,16, 4,12,12,12,15,15,15,15,15,15,15,15],
                                         [15,16,16,16,16,16,16, 4, 4,12,12, 9,15,15,15,15,15,15,15,15],
                                         [15,16,16,16,16,16, 4, 4, 4, 4,10, 9, 9,15,15,15,15,15,15,15],
                                         [15, 4,16,16,16, 4, 4, 4, 4, 4, 7,10, 9, 9,15,15,15,15,15,15],
                                         [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7,10, 9, 9, 9, 9, 9,15,15],
                                         [2, 5, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7,10, 9, 9, 9, 8, 6,15],
                                         [2, 2, 5, 4, 3, 1, 4, 4, 4, 4, 7, 7, 7, 7,10, 9, 8, 6, 6, 2],
                                         [2, 2, 2, 0, 1, 1, 1, 4, 4, 4, 7, 7, 7, 7, 7, 0, 6, 6, 6, 2]],
                                         dtype=np.int32)
    cell_areas_in = np.zeros((20,20),dtype=np.float64)
    cell_areas_in.fill(1.0)
    connection_volume_thresholds_in = np.zeros((20,20),dtype=np.float64)
    connection_volume_thresholds_in.fill(0.0)
    flood_volume_thresholds_in = np.zeros((20,20),dtype=np.float64)
    flood_volume_thresholds_in.fill(0.0)
    connection_heights_in = np.zeros((20,20),dtype=np.float64)
    connection_heights_in.fill(0.0)
    flood_heights_in = np.zeros((20,20),dtype=np.float64)
    flood_heights_in.fill(0.0)
    flood_next_cell_lat_index_in = np.zeros((20,20),dtype=np.int32)
    flood_next_cell_lat_index_in.fill(-1)
    flood_next_cell_lon_index_in = np.zeros((20,20),dtype=np.int32)
    flood_next_cell_lon_index_in.fill(-1)
    connect_next_cell_lat_index_in = np.zeros((20,20),dtype=np.int32)
    connect_next_cell_lat_index_in.fill(-1)
    connect_next_cell_lon_index_in = np.zeros((20,20),dtype=np.int32)
    connect_next_cell_lon_index_in.fill(-1)
    connect_merge_and_redirect_indices_index_in = np.zeros((20,20),dtype=np.int32)
    connect_merge_and_redirect_indices_index_in.fill(-1)
    flood_merge_and_redirect_indices_index_in = np.zeros((20,20),dtype=np.int32)
    flood_merge_and_redirect_indices_index_in.fill(-1)
    flood_volume_thresholds_expected_out =\
    np.array([[-1,  -1,   -1,   -1,   -1, -1,   -1, -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1, -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   5.0],
      [0.0, 262.0,5.0, -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,    111.0,111.0,56.0,111.0,-1,  -1,     -1,   2.0],
      [-1,   5.0,  5.0, -1,   -1,  340.0,262.0,-1, -1,  -1, -1,  111.0,1.0,  1.0,  56.0,56.0,-1,   -1,     -1,   -1],
      [-1,   5.0,  5.0, -1,   -1,  10.0, 10.0, 38.0,10.0,-1,-1, -1,    0.0,  1.0,  1.0, 26.0, 56.0,-1,     -1,   -1],
      [-1,   5.0,  5.0, 186.0, 2.0,2.0,  -1,    10.0,10.0,-1, 1.0,6.0,  1.0,  0.0,  1.0, 26.0, 26.0,111.0, -1,   -1],
      [16.0,16.0, 16.0,-1,    2.0,0.0,  2.0,  2.0, 10.0,-1, 1.0,0.0,  0.0,  1.0,  1.0, 1.0,  26.0,56.0,   -1,   -1],
      [-1,   46.0, 16.0,-1,   -1,  2.0, -1,    23.0,-1,  -1, -1,  1.0,  0.0,  1.0,  1.0, 1.0,  56.0,-1,    -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1,  56.0, 1.0,  1.0,  1.0, 26.0, 56.0,-1,    -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,    56.0, 56.0,-1,  -1,   -1,  -1,     -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,   0.0,  3.0, 3.0,    10.0,-1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,   0.0,  3.0, 3.0,   -1,   -1],
      [-1,  -1,   -1,    1.0, -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   -1],
      [-1,  -1,   -1,   -1,   -1, -1,   -1,    -1,  -1,  -1, -1, -1,   -1,   -1,   -1,  -1,   -1,  -1,     -1,   -1]],
      dtype=np.float64)
    connection_volume_thresholds_expected_out =\
       np.array([[-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  186.0, 23.0,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, 56.0,-1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
                 [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1]],
                 dtype=np.float64)
    flood_next_cell_lat_index_expected_out = \
    np.array([[-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,   3],
              [ 2,  3,   5,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,   2,   2,   5,   5,  -1,  -1, -1,   1],
              [-1,  4,   2,  -1,  -1,  8,  2,  -1,  -1,  -1, -1,  2,   8,   3,   9,   2,  -1,  -1, -1,  -1],
              [-1,  3,   4,  -1,  -1,  6,  4,   6,   3,  -1, -1, -1,   7,   7,   4,   3,   6,  -1, -1,  -1],
              [-1,  6,   5,   3,   6,  7, -1,   4,   4,  -1,  5,  7,   4,   6,   5,   8,   4,   3, -1,  -1],
              [ 7,  6,   6,  -1,   5,  5,  6,   5,   5,  -1,  5,  5,   4,   5,   6,   6,   5,   5, -1,  -1],
              [-1,  6,   7,  -1,  -1,  6, -1,   4,  -1,  -1, -1,  3,   6,   6,   8,   7,   3,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1,  9,   6,   7,   8,   6,   7,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,   8,   8,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  14,  14,  13, 16,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  13,  14,  13, -1,  -1],
              [-1, -1,  -1,  17,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1]],
                                dtype=np.int32)

    flood_next_cell_lon_index_expected_out = \
    np.array([[ -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,   1],
              [19,  5,   2,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  15,  12,   9,   3,  -1,  -1, -1,  19],
              [-1,  2,   2,  -1,  -1, 18,  1,  -1,  -1,  -1, -1, 13,  12,  12,  13,  14,  -1,  -1, -1,  -1],
              [-1,  2,   1,  -1,  -1,  8,  5,  10,   6,  -1, -1, -1,  12,  11,  13,  14,  17,  -1, -1,  -1],
              [-1,  2,   1,   5,   7,  5, -1,   6,   8,  -1, 15, 14,  14,  12,  12,  15,  15,  11, -1,  -1],
              [ 2,  0,   1,  -1,   4,  5,  4,   7,   8,  -1, 10, 11,  12,  14,  13,  14,  16,  17, -1,  -1],
              [-1,  4,   1,  -1,  -1,  6, -1,   7,  -1,  -1, -1, 13,  11,  15,  14,  13,  15,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, 12,  10,  15,  13,  16,  16,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  16,  11,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  15,  16,  18, 15,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  16,  17,  17, -1,  -1],
              [-1, -1,  -1,   3,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1],
              [-1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1, -1,  -1]],
              dtype=np.int32)
    connect_next_cell_lat_index_expected_out = \
    np.array([[-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,   3,       7,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1,  4,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1]],
              dtype=np.int32)
    connect_next_cell_lon_index_expected_out = \
    np.array([[-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,   6,       7,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1, -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, 16,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,  -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1,  -1,      -1,  -1,  -1, -1,   -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1]],
              dtype=np.int32)
    connect_merge_and_redirect_indices_index_expected_out = \
      np.array([[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]],
              dtype=np.int32)
    flood_merge_and_redirect_indices_index_expected_out = \
      np.array([[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 5, 6,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 4,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]],
              dtype=np.int32)
    connection_heights_expected_out  = \
        np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 7, 4 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
              dtype=np.int32)
    flood_heights_expected_out  = \
        np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
                  [1, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 5, 6, 0, 0, 0, 2],
                  [0, 3, 3, 0, 0, 9, 8, 0, 0, 0, 0, 6, 3, 3, 5, 5, 0, 0, 0, 0],
                  [0, 3, 3, 0, 0, 3, 3, 5, 3, 0, 0, 0, 2, 3, 3, 4, 5, 0, 0, 0],
                  [0, 3, 3, 7, 2, 2, 0, 3, 3, 0, 3, 3, 3, 2, 3, 4, 4, 6, 0, 0],
                  [4, 4, 4, 0, 2, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 3, 4, 5, 0, 0],
                  [0, 6, 4, 0, 0, 2, 0, 4, 0, 0, 0, 3, 2, 3, 3, 3, 5, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 3, 4, 5, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0, 0],
                  [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
              dtype=np.int32)
    evaluate_basins_wrapper.evaluate_basins(minima_in,
                                            raw_orography_in,
                                            corrected_orography_in,
                                            cell_areas_in,
                                            connection_volume_thresholds_in,
                                            flood_volume_thresholds_in,
                                            connection_heights_in,
                                            flood_heights_in,
                                            prior_fine_rdirs_in,
                                            prior_coarse_rdirs_in,
                                            prior_fine_catchments_in,
                                            coarse_catchment_nums_in,
                                            flood_next_cell_lat_index_in,
                                            flood_next_cell_lon_index_in,
                                            connect_next_cell_lat_index_in,
                                            connect_next_cell_lon_index_in,
                                            connect_merge_and_redirect_indices_index_in,
                                            flood_merge_and_redirect_indices_index_in,
                                            self.merge_data_file_evaluate_basins_one)
    np.testing.assert_array_equal(flood_volume_thresholds_in,
                                  flood_volume_thresholds_expected_out)
    np.testing.assert_array_equal(connection_volume_thresholds_in,
                                  connection_volume_thresholds_expected_out)
    np.testing.assert_array_equal(flood_next_cell_lat_index_in,
                                  flood_next_cell_lat_index_expected_out)
    np.testing.assert_array_equal(flood_next_cell_lon_index_in,
                                  flood_next_cell_lon_index_expected_out)
    np.testing.assert_array_equal(connect_next_cell_lat_index_in,
                                  connect_next_cell_lat_index_expected_out)
    np.testing.assert_array_equal(connect_next_cell_lon_index_in,
                                  connect_next_cell_lon_index_expected_out)
    np.testing.assert_array_equal(connect_merge_and_redirect_indices_index_in,
                                  connect_merge_and_redirect_indices_index_expected_out)
    np.testing.assert_array_equal(flood_merge_and_redirect_indices_index_in,
                                  flood_merge_and_redirect_indices_index_expected_out)
    np.testing.assert_array_equal(connection_heights_in,
                                  connection_heights_expected_out)
    np.testing.assert_array_equal(flood_heights_in,
                                  flood_heights_expected_out)
    self.cdo_instance.sinfon(input=[self.merge_data_file_evaluate_basins_one,
                                    self.merge_data_expected_output_file_evaluate_basins_one])
    diff_out  = \
      self.cdo_instance.diff(input=[self.merge_data_file_evaluate_basins_one,
                                    self.merge_data_expected_output_file_evaluate_basins_one])
    self.assertTrue(not diff_out and diff_out is not None,
                    "Basin evaluation test doesn't produce expected merge file")

  def testWritingMergesToFile(self):
    lake_operators_wrapper.create_merge_structure_test_data(self.merge_data_file)
    self.cdo_instance.sinfon(input=[self.merge_data_file,
                                    self.merge_data_expected_output_file])
    diff_out  = self.cdo_instance.diff(input=[self.merge_data_file,
                                              self.merge_data_expected_output_file])
    self.assertTrue(not diff_out and diff_out is not None,
                    "Trial of writing merges doesn't produce expected results")


class TestWaterRedistributionDriver(unittest.TestCase):

  def testWaterRedistributionOne(self):
    nlat = 16
    nlon = 16
    coarse_nlat = 4
    coarse_nlon = 4
    lake_numbers_in = np.array([[0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0],
                                [0,0,0,0, 0,0,0,9, 9,9,9,9, 9,9,9,0],
                                [0,0,0,0, 3,3,0,0, 0,9,9,0, 0,0,9,0],
                                [0,0,0,0, 3,0,3,0, 0,9,9,0, 0,0,0,0],
                                [0,0,0,3, 1,0,0,0, 0,0,0,0, 0,0,0,1],
                                [0,0,15,0, 0,0,0,0, 0,0,4,0, 0,0,1,0],
                                [15,15,0,0, 0,0,0,0, 0,4,0,0, 0,0,0,0],
                                [15,15,0,0, 0,0,0,0, 0,4,4,0, 0,0,0,0],
                                [0,0,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0],
                                [2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,2],
                                [0,0,2,2, 2,0,0,0, 0,0,0,0, 0,2,2,2],
                                [0,0,0,0, 0,0,0,0, 0,0,7,0, 0,0,0,0],
                                [0,0,0,0, 0,0,0,0, 0,0,7,0, 0,0,0,1],
                                [0,0,0,12, 0,0,0,0, 0,0,7,0, 0,1,1,0],
                                [0,0,0,12, 12,0,0,0, 0,0,0,0, 0,0,0,0],
                                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0]],
                                dtype=np.int32)
    lake_centers_in = np.array([[False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False, True, False,False,False,False, False,False,False,False, False,False,False, True],
                                [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False, True,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False, True,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False, True,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False, True,False, False,False,False,False],
                                [False,False,False, True, False,False,False,False, False,False,False,False, False,False,False,False],
                                [False,False,False,False, False,False,False,False, False,False,False,False, False,False,False,False]],
                                dtype=np.int32)
    water_to_redistribute_in = np.array([[0,0,  1,0, 0,0,0,0, 0,  0,21.0,0,   0,0,  0,0],
                                         [1.5,0,  0,0, 0,0,0,0, 0,7.0,   0,0, 8.0,0,7.5,0],
                                         [0,0,1.6,0, 0,0,0,0, 0,  0,   0,0,   0,0,  0,0],
                                         [0,0,  0,0, 0,0,0,0, 0,  0,   0,0,   0,0,  0,0],
                                         [3.0,0,  0,2.0, 0,  0,0,0, 0,0,  0,0,   0,0,0,7.0],
                                         [0,0,6.0,  0, 0,2.2,0,0, 0,0,  0,0,   0,0,0,  0],
                                         [0,0,  0,  0, 0,  0,0,0, 0,0,6.0,0,   0,0,0,  0],
                                         [1.5,0,  0,  0, 0,  0,0,0, 0,0,  0,0, 4.0,0,0,  0],
                                         [0,  0,0,0, 0,0,0,0, 0,0,   0,0, 0,0,0,  0],
                                         [2.8,  0,0,0, 0,0,0,0, 0,0,   0,0, 0,0,0,9.0],
                                         [0,  0,0,0, 0,0,0,0, 0,0,13.0,0, 0,0,0,  0],
                                         [0,1.0,0,0, 0,0,0,0, 0,0,   0,0, 0,0,0,  0],
                                         [0,0,0,  0, 0,0,0,8.0, 0,0,  0,0,    0,  0,  0,0],
                                         [0,0,0,  0, 0,0,0,  0, 0,0,2.8,0, 13.0,2.1,3.8,0],
                                         [2.5,0,0,1.1, 0,0,0,  0, 0,0,  0,0,  5.0,  0,  0,0],
                                         [0,0,0,  0, 0,0,0,  0, 0,0,  0,0,    0,  0,  0,0]],
                                         dtype=np.float64)
    water_redistributed_to_lakes_out = np.zeros((nlat,nlon),dtype=np.float64)
    water_redistributed_to_rivers_out = np.zeros((coarse_nlat,coarse_nlon),
                                                 dtype=np.float64)
    water_redistributed_to_lakes_expected_out = np.array([[0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,22.5,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,2.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,12.9],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,7.5,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,11.8,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,2.8,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,1.1, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0],
                                                          [0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0]],
                                                          dtype=np.float64)
    water_redistributed_to_rivers_expected_out = np.array([[4.1,0.0,21.0,0.0],
                                                           [3.0,2.2,6.0,4.0],
                                                           [1.0,0.0,13.0,0.0],
                                                           [2.5,8.0,0.0,18.0]],
                                                           dtype=np.float64)
    lake_operators_wrapper.redistribute_water(lake_numbers_in,
                                              lake_centers_in,
                                              water_to_redistribute_in,
                                              water_redistributed_to_lakes_out,
                                              water_redistributed_to_rivers_out)
    np.testing.assert_array_almost_equal(water_redistributed_to_lakes_expected_out,
                                         water_redistributed_to_lakes_out)
    np.testing.assert_array_almost_equal(water_redistributed_to_rivers_expected_out,
                                         water_redistributed_to_rivers_out)



if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
