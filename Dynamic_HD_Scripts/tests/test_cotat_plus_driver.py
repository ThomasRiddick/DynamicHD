'''
Unit test of the COTAT plus driver using same data as top-level
Fortran FRUIT unit tests

Created on Oct 19, 2016

@author: thomasriddick
'''

import unittest
import numpy as np
import os
import re
import textwrap
import subprocess
from mpi4py import MPI
from subprocess import CalledProcessError
from Dynamic_HD_Scripts.base import field
from Dynamic_HD_Scripts.tools import cotat_plus_driver
from Dynamic_HD_Scripts.utilities.process_manager import ProcessManager
from Dynamic_HD_Scripts.utilities.process_manager import using_mpi
from Dynamic_HD_Scripts.utilities.process_manager import MPICommands
from Dynamic_HD_Scripts import context as scripts_context
from tests.context import data_dir,valgrind_path


class Test(unittest.TestCase):
    """Unit test object"""

    show_output = False

    input_fine_river_directions_test_data = np.array([[-1,-1,-1, -1,0,4,   2,2,2, 2,2,2, 3,2,2],
                                                      [-1,-1,-1, -1,-1,-1, 0,4,4, 4,4,1, 4,4,1],
                                                      [-1,-1,-1, -1,-1,9,  8,8,8, 1,7,7, 4,4,4],
                                                      [-1,-1,-1, -1,-1,0, 4,4,4, 6,8,5, 8,4,8],
                                                      [-1,0,4, 4,4,5, 7,1,8, 4,6,7, 6,5,4],
                                                      [-1,0,4, 4,5,7, 4,4,1, 9,6,8, 1,6,2],
                                                      [-1,-1,0, 4,6,8, 4,4,6, 6,6,7, 4,2,5],
                                                      [-1,-1,-1, 7,6,8, 4,1,3, 9,9,8, 8,7,4],
                                                      [-1,0,0, 4,6,8, 4,4,5, 1,5,5, 9,1,7],
                                                      [0,8,7, 7,7,7, 7,4,4, 6,7,4, 4,1,2],
                                                      [8,8,8, 8,1,2, 6,7,5, 9,8,6, 8,7,4],
                                                      [9,2,7, 4,4,2, 9,8,7, 9,8,4, 9,8,8],
                                                      [6,6,8, 4,8,1, 2,1,8, 3,8,2, 3,5,8],
                                                      [4,6,8, 7,8,7, 4,4,3, 3,2,6, 6,5,8],
                                                      [9,8,8, 7,8,5, 8,9,8, 6,6,8, 9,8,7]],
                                                     dtype=np.int64)

    input_fine_total_cumulative_flow_test_data = np.array([[1,1,1,  1,1,1,  1,1,1,  1,1,1,  1,1,1],
                                                           [1,1,1,  1,1,1, 52,48,45, 42,11,6, 4,3,2],
                                                           [1,1,1, 1,1,1, 1,1,1, 1,29,9, 8,5,2],
                                                           [1,1,1, 1,1,8, 6,5,4, 1,22,1, 2,1,1],
                                                           [1,55,54, 53,52,1, 1,1,2, 1,2,20, 1,3,1],
                                                           [1,3,2, 1,1,51, 3,1,1, 1,16,17, 1,1,2],
                                                           [1,1,3, 1,1,47, 3,2,1, 2,4,15, 7,1,3],
                                                           [1,1,1, 1,1,42, 1,1,1, 1,1,1, 1,5,1],
                                                           [1,35,5, 2,2,39, 3,1,1, 24,1,1, 1,1,1],
                                                           [2,32,2, 2,1,1, 33,26,25, 1,22,14, 13,1,1],
                                                           [1,31,1, 1,1,1, 1,6,1, 1,5,1, 3,8,5],
                                                           [1,1,29, 15,13,2, 1,1,2, 1,3,1, 1,1,3],
                                                           [1,3,13, 1,12,3, 1,1,1, 1,1,1, 1,1,2],
                                                           [1,4,7, 1,5,6, 5,1,3, 1,2,11, 12,17,1],
                                                           [1,1,1, 1,1,1, 1,1,1, 4,8,9, 1,1,1]],
                                                          dtype=np.int64)

    small_grid_expected_result = np.array([[-1,6,0,4,4],
                                           [0,4,4,8,5],
                                           [0,7,4,8,7],
                                           [8,4,7,4,7],
                                           [8,7,7,6,5]],dtype=np.int64)

    directory = None

    def setUp(self):
        """Unit test setup. Creates a temporary directory for results if necessary"""
        #create files
        if False:
            self.directory = os.path.expanduser('~')+ '/temp'
        else:
            self.directory = data_dir + '/temp'
        try:
            os.stat(self.directory)
        except:
            os.mkdir(self.directory)
        self.cotat_params_file_path = os.path.join(self.directory,'cotat_plus_params_temp.nl')

    def testUsingSmallGrid(self):
        """
        Test using a small 5 by 5 grid

        Same data was used in FRUIT unit testing
        """

        input_fine_river_directions_test_field = field.makeField(self.input_fine_river_directions_test_data,
                                                                 field_type='RiverDirections',
                                                                 grid_type='LatLong',nlat=15,nlong=15)
        input_fine_total_cumulative_flow_test_field = field.makeField(self.input_fine_total_cumulative_flow_test_data,
                                                                      field_type='CumulativeFlow',
                                                                      grid_type='LatLong',nlat=15,nlong=15)
        cotat_params_text =\
            """
            &cotat_parameters
            MUFP = 1.5
            area_threshold = 9
            run_check_for_sinks = .True.
            /
            """
        with open(self.cotat_params_file_path,'w') as f:
            f.write(textwrap.dedent(cotat_params_text))
        output_coarse_river_directions = \
            cotat_plus_driver.run_cotat_plus(fine_rdirs_field=input_fine_river_directions_test_field,
                                             fine_total_cumulative_flow_field=\
                                             input_fine_total_cumulative_flow_test_field,
                                             cotat_plus_parameters_filepath=self.cotat_params_file_path,
                                             coarse_grid_type='LatLong',nlat=5,nlong=5)
        np.testing.assert_array_equal(output_coarse_river_directions.get_data(),
                                      self.small_grid_expected_result,
                                      "Running scaling code over small 5 by 5 grid doesn't"
                                      " produce expected results")

    @unittest.skip("Valgrind not working at present")
    def testForMemoryLeaksWithValgrind(self):
        """Run valgrind to check no new memory leaks are occurring"""
        try:
            valgrind_output =  subprocess.check_output([valgrind_path,'--leak-check=full',
                                                        scripts_context.fortran_project_executable_path],
                                                       stderr=subprocess.STDOUT,
                                                       cwd=scripts_context.fortran_project_include_path)
        except CalledProcessError as cperror:
            raise RuntimeError("Failure in called process {0}; return code {1}; output:\n{2}".format(cperror.cmd,
                                                                                                     cperror.returncode,
                                                                                                     cperror.output))
        direct_mem_loss_match = re.search(r'definitely lost: ([,0-9]*)',valgrind_output)
        indirect_mem_loss_match = re.search(r'indirectly lost: ([,0-9]*)',valgrind_output)
        if self.show_output:
            print(valgrind_output)
        direct_mem_loss = int(direct_mem_loss_match.group(1).replace(',',''))
        indirect_mem_loss = int(indirect_mem_loss_match.group(1).replace(',',''))
        # 80 byte loss is a known problem that occurs sometimes related to using valgrind in python
        self.assertTrue((direct_mem_loss == 0 or direct_mem_loss == 80),"Direct memory leak detected")
        # 68 byte loss is a known problem that occurs sometimes related to using valgrind in python
        self.assertTrue((indirect_mem_loss == 0 or indirect_mem_loss == 68),"Indirect memory leak detected")

    def testSmallGridLatLonToIcon(self):

        input_fine_river_directions = np.array([
            [3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1],
            [3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1],
            [3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1],
            [3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1],
            [3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1, 3,2,2,2,2,2,2,2,2,1],
            [6,6,6,6,6,6,6,6,6,6, 6,6,6,6,6,6,6,6,6,6, 6,6,6,6,6,0,4,4,4,4, 4,4,4,4,4,4,4,4,4,4],
            [9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8],
            [9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8],
            [9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8],
            [9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8],
            [9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8],
            [9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8, 9,7,7,7,7,7,7,7,7,8]],
            dtype=np.int32)

        input_fine_total_cumulative_flow = np.array([
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,3,2,2,2,2,2,2,3,1,1,3,2,2,2,2,2,2,3,1,1,3,2,2,2,2,2,2,3,1,1,3,2,2,2,2,2,2,3,1],
            [1,5,3,3,3,3,3,3,5,1,1,5,3,3,3,3,3,3,5,1,1,5,3,3,3,3,3,3,5,1,1,5,3,3,3,3,3,3,5,1],
            [1,7,4,4,4,4,4,4,7,1,1,7,4,4,4,4,4,4,7,1,1,7,4,4,4,4,4,4,7,1,1,7,4,4,4,4,4,4,7,1],
            [1,9,5,5,5,5,5,5,9,1,1,9,5,5,5,5,5,5,9,1,1,9,5,5,5,5,5,5,9,1,1,9,5,5,5,5,5,5,9,1],
            [16,45,57,68,78,87,95,102,113,120,136,165,177,188,198,207,215,222,233,240,256,285,297,308,
                318, 480,153,145,138,127,120,104,75,63,52,42,33,25,18,7],
            [12,15,6,6,5,4,3,2,1,6,2,5,6,6,5,4,3,2,1,6,2,5,6,6,5,4,3,2,1,6,2,5,6,6,5,4,3,2,1,6],
            [9,11,5,5,5,4,3,2,1,5,9,1,5,5,5,4,3,2,1,5,9,1,5,5,5,4,3,2,1,5,9,1,5,5,5,4,3,2,1,5],
            [6,8,4,4,4,4,3,2,1,4,6,8,4,4,4,4,3,2,1,4,6,8,4,4,4,4,3,2,1,4,6,8,4,4,4,4,3,2,1,4],
            [4,5,3,3,3,3,3,2,1,3,4,5,3,3,3,3,3,2,1,3,4,5,3,3,3,3,3,2,1,3,4,5,3,3,3,3,3,2,1,3],
            [2,3,2,2,2,2,2,2,1,2,2,3,2,2,2,2,2,2,1,2,2,3,2,2,2,2,2,2,1,2,2,3,2,2,2,2,2,2,1,2],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
            dtype=np.int32)

        cell_neighbors = np.array([ [5,7,2],
                                    [1,10,3],
                                    [2,13,4],
                                    [3,16,5],
                                    [4,19,1],
                                    [20,21,7],
                                    [1,6,8],
                                    [7,23,9],
                                    [8,25,10],
                                    [2,9,11],
                                    [10,27,12],
                                    [11,29,13],
                                    [3,12,14],
                                    [13,31,15],
                                    [14,33,16],
                                    [4,15,17],
                                    [16,35,18],
                                    [17,37,19],
                                    [5,18,20],
                                    [19,39,6],
                                    [6,40,22],
                                    [21,41,23],
                                    [8,22,24],
                                    [23,43,25],
                                    [24,26,9],
                                    [25,45,27],
                                    [11,26,28],
                                    [27,47,29],
                                    [12,28,30],
                                    [29,49,31],
                                    [14,30,32],
                                    [31,51,33],
                                    [15,32,34],
                                    [33,53,35],
                                    [17,34,36],
                                    [35,55,37],
                                    [18,36,38],
                                    [37,57,39],
                                    [20,38,40],
                                    [39,59,21],
                                    [22,60,42],
                                    [41,61,43],
                                    [24,42,44],
                                    [43,63,45],
                                    [26,44,46],
                                    [45,64,47],
                                    [28,46,48],
                                    [47,66,49],
                                    [30,48,50],
                                    [49,67,51],
                                    [32,50,52],
                                    [51,69,53],
                                    [34,52,54],
                                    [53,70,55],
                                    [36,54,56],
                                    [55,72,57],
                                    [38,56,58],
                                    [57,73,59],
                                    [40,58,60],
                                    [59,75,41],
                                    [42,75,62],
                                    [61,76,63],
                                    [44,62,64],
                                    [46,63,65],
                                    [64,77,66],
                                    [48,65,67],
                                    [50,66,68],
                                    [67,78,69],
                                    [52,68,70],
                                    [54,69,71],
                                    [70,79,72],
                                    [56,71,73],
                                    [58,72,74],
                                    [73,80,75],
                                    [60,74,61],
                                    [62,80,77],
                                    [65,76,78],
                                    [68,77,79],
                                    [71,78,80],
                                    [74,79,76]], dtype=np.int32)
        cell_vertices_lats = np.array([[ 90.0,  60.0,  60.0],
                                       [ 90.0,  60.0,  60.0],
                                       [ 90.0,  60.0,  60.0],
                                       [ 90.0,  60.0,  60.0],
                                       [ 90.0,  60.0,  60.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  60.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  60.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  60.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  60.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 60.0,  30.0,  60.0],
                                       [ 60.0,  30.0,  30.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [ 30.0,   0.0,  30.0],
                                       [ 30.0,   0.0,   0.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [  0.0, -30.0,   0.0],
                                       [  0.0, -30.0, -30.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -60.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -60.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -60.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -60.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -30.0],
                                       [-30.0, -60.0, -60.0],
                                       [-30.0, -60.0, -30.0],
                                       [-60.0, -90.0, -60.0],
                                       [-60.0, -90.0, -60.0],
                                       [-60.0, -90.0, -60.0],
                                       [-60.0, -90.0, -60.0],
                                       [-60.0, -90.0, -60.0] ], dtype=np.float64)
        cell_vertices_lons =  np.array([[ 0.0, 324.0,  36.0  ],
                                        [   0.0,  36.0, 108.0],
                                        [   0.0, 108.0, 180.0],
                                        [   0.0, 180.0, 252.0],
                                        [   0.0, 252.0, 324.0],
                                        [ 324.0, 324.0,   0.0],
                                        [ 324.0,   0.0,  36.0],
                                        [  36.0,   0.0,  36.0],
                                        [  36.0,  36.0,  72.0],
                                        [  36.0,  72.0, 108.0],
                                        [ 108.0,  72.0, 108.0],
                                        [ 108.0, 108.0, 144.0],
                                        [ 108.0, 144.0, 180.0],
                                        [ 180.0, 144.0, 180.0],
                                        [ 180.0, 180.0, 216.0],
                                        [ 180.0, 216.0, 252.0],
                                        [ 252.0, 216.0, 252.0],
                                        [ 252.0, 252.0, 288.0],
                                        [ 252.0, 288.0, 324.0],
                                        [ 324.0, 288.0, 324.0],
                                        [ 324.0, 342.0,   0.0],
                                        [   0.0, 342.0,  18.0],
                                        [   0.0,  18.0,  36.0],
                                        [  36.0,  18.0,  54.0],
                                        [  36.0,  54.0,  72.0],
                                        [  72.0,  54.0,  90.0],
                                        [  72.0,  90.0, 108.0],
                                        [ 108.0,  90.0, 126.0],
                                        [ 108.0, 126.0, 144.0],
                                        [ 144.0, 126.0, 162.0],
                                        [ 144.0, 162.0, 180.0],
                                        [ 180.0, 162.0, 198.0],
                                        [ 180.0, 198.0, 216.0],
                                        [ 216.0, 198.0, 234.0],
                                        [ 216.0, 234.0, 252.0],
                                        [ 252.0, 234.0, 270.0],
                                        [ 252.0, 270.0, 288.0],
                                        [ 288.0, 270.0, 306.0],
                                        [ 288.0, 306.0, 324.0],
                                        [ 324.0, 306.0, 342.0],
                                        [ 342.0,   0.0,  18.0],
                                        [  18.0,   0.0,  36.0],
                                        [  18.0,  36.0,  54.0],
                                        [  54.0,  36.0,  72.0],
                                        [  54.0,  72.0,  90.0],
                                        [  90.0,  72.0, 108.0],
                                        [  90.0, 108.0, 126.0],
                                        [ 126.0, 108.0, 144.0],
                                        [ 126.0, 144.0, 162.0],
                                        [ 162.0, 144.0, 180.0],
                                        [ 162.0, 180.0, 198.0],
                                        [ 198.0, 180.0, 216.0],
                                        [ 198.0, 216.0, 234.0],
                                        [ 234.0, 216.0, 252.0],
                                        [ 234.0, 252.0, 270.0],
                                        [ 270.0, 252.0, 288.0],
                                        [ 270.0, 288.0, 306.0],
                                        [ 306.0, 288.0, 324.0],
                                        [ 306.0, 324.0, 342.0],
                                        [ 342.0, 324.0,   0.0],
                                        [   0.0,   0.0,  36.0],
                                        [  36.0,   0.0,  72.0],
                                        [  36.0,  72.0,  72.0],
                                        [  72.0,  72.0, 108.0],
                                        [ 108.0,  72.0, 144.0],
                                        [ 108.0, 144.0, 144.0],
                                        [ 144.0, 144.0, 180.0],
                                        [ 180.0, 144.0, 216.0],
                                        [ 180.0, 216.0, 216.0],
                                        [ 216.0, 216.0, 252.0],
                                        [ 252.0, 216.0, 288.0],
                                        [ 252.0, 288.0, 288.0],
                                        [ 288.0, 288.0, 324.0],
                                        [ 324.0, 288.0,   0.0],
                                        [ 324.0,   0.0,   0.0],
                                        [   0.0,   0.0,  72.0],
                                        [  72.0,   0.0, 144.0],
                                        [ 144.0,   0.0, 216.0],
                                        [ 216.0,   0.0, 288.0],
                                        [ 288.0,   0.0,   0.0 ] ], dtype=np.float64)
        pixel_center_lats = np.array([ 82.5, 67.5, 52.5, 37.5, 22.5, 7.5,
                               -7.5,-22.5,-37.5,-52.5,-67.5,-82.5 ], dtype=np.float64)
        pixel_center_lons = np.array([ 4.5, 13.5, 22.5, 31.5, 40.5, 49.5, 58.5, 67.5, 76.5, 85.5,
                              94.5,103.5,112.5,121.5,130.5,139.5,148.5,157.5,166.5,175.5,
                             184.5,193.5,202.5,211.5,220.5,229.5,238.5,247.5,256.5,265.5,
                             274.5,283.5,292.5,301.5,310.5,319.5,328.5,337.5,346.5,355.5 ],
                             dtype=np.float64)
        expected_output_coarse_next_cell_index = np.array([
              8,         10,         14,         15,         18,
         40, 23, 24, 24, 26, 28, 28, 30, 31, 33, 34, 36, 36, 38, 40,
         40,23,24,25,26,27,28,29,30,31,32,33,34,35,-1,35,36,37,38,39,
         23,23,23,24,25,27,28,28,29,30,32,33,33,34,35,37,38,38,39,40,
         41, 42, 43, 45, 47, 47, 49, 51, 51, 53, 54, 57, 57, 58, 41,
             61,         65,         69,         72,         72 ],
                             dtype=np.int32)
        output_coarse_next_cell_index = cotat_plus_driver.\
            cotat_plus_icon_icosohedral_cell_latlon_pixel(input_fine_river_directions,
                                                          input_fine_total_cumulative_flow,
                                                          cell_neighbors,
                                                          pixel_center_lats,
                                                          pixel_center_lons,
                                                          cell_vertices_lats,
                                                          cell_vertices_lons)
        np.testing.assert_array_equal(expected_output_coarse_next_cell_index,
                                      output_coarse_next_cell_index)

    def testSmallGridLatLonToIconTwo(self):

        input_fine_river_directions = np.array([
            [6,6,6,6,6,6,6,6,1,4, 4,4,4,4,4,4,4,4,4,4, 2,2,2,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,2,6,6],
            [4,4,6,6,6,6,6,1,7,7, 7,7,4,4,4,4,4,4,4,4, 6,6,6,6,6,6,6,0,6,6, 6,6,6,6,2,4,4,4,4,4],
            [4,4,6,2,1,4,4,7,7,7, 7,7,4,2,4,4,4,6,6,6, 6,6,6,6,6,6,9,8,6,6, 6,6,6,6,2,4,4,4,4,4],
            [4,4,2,1,7,7,7,7,7,7, 7,7,4,2,4,4,4,6,6,6, 6,6,8,8,8,8,8,8,6,6, 6,6,6,6,2,4,4,4,4,4],
            [4,4,1,4,4,4,4,4,4,4, 4,4,4,2,4,4,4,6,6,6, 6,6,8,8,8,8,8,8,6,6, 6,6,6,6,3,4,4,4,4,4],
            [4,1,8,7,4,4,4,4,4,4, 2,2,4,2,4,4,4,6,6,6, 6,6,8,8,8,8,8,8,6,6, 6,6,6,6,6,3,4,4,4,4],
            [1,8,8,6,7,4,4,4,4,4, 2,2,4,2,4,4,6,6,6,9, 8,8,8,8,8,8,8,8,6,6, 6,6,6,6,6,6,3,4,4,4],
            [8,8,8,6,8,4,4,4,4,4, 2,6,6,6,6,9,8,8,8,8, 8,8,8,8,8,8,8,8,6,6, 6,6,6,6,6,6,6,1,4,4],
            [8,8,8,6,8,4,4,4,4,4, 9,8,8,8,8,8,8,8,8,8, 2,2,2,2,2,2,2,2,2,2, 2,2,6,6,1,4,4,8,8,8],
            [6,6,6,6,6,6,6,6,6,9, 8,8,8,8,8,8,8,8,8,8, 2,2,2,2,2,2,2,2,2,2, 2,2,4,4,8,8,8,8,8,8],
            [6,6,6,6,6,6,6,6,9,4, 8,8,8,8,8,8,8,8,8,8, 6,6,6,6,6,6,6,6,6,6, 6,5,8,8,8,8,8,8,8,8],
            [6,6,6,6,6,6,6,9,4,4, 8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8]],
            dtype=np.int32)


        input_fine_total_cumulative_flow =  np.array([
    [3, 4, 5, 6, 7, 8, 9,13,41,23,19, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
    [2, 1, 1, 2, 3, 4, 7,51, 3, 4, 3, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 4, 6, 8,10,12,14,185,2, 4, 6, 8,10,12,24,10, 8, 6, 4, 3],
    [2, 1, 1, 3,57,55,53, 2, 2, 2, 3, 2, 1, 4, 3, 2, 1, 1, 2, 3, 4, 5,139,145,151,157,163,6,1,2,3,4, 5, 6,38, 7, 6, 5, 4, 3],
    [2, 1, 1,61, 1, 1, 1, 1, 1, 1, 1, 2, 1, 8, 3, 2, 1, 1, 2, 3, 4, 5,133,5, 5, 5, 5, 5, 1, 2, 3, 4, 5, 6,52, 7, 6, 5, 4, 3],
    [2, 1,105,10,9, 8, 7, 6, 5, 4, 3, 2, 1,12, 3, 2, 1, 1, 2, 3, 4, 5,127,4, 4, 4, 4, 4, 1, 2, 3, 4, 5, 6,66, 7, 6, 5, 4, 3],
    [1,109,4,28, 6, 5, 4, 3, 2, 1, 1, 2, 1,16, 3, 2, 1, 1, 2, 3,115,118,121,3,3,3, 3, 3, 1, 2, 3, 4, 5, 6, 7,79, 5, 4, 3, 2],
  [112, 3, 3, 1,21, 5, 4, 3, 2, 1, 2, 4, 1,19, 2, 1,91,97,103,109,2,2, 2, 2, 2, 2, 2, 2, 1, 2, 3, 4, 5, 6, 7, 8,91, 3, 2, 1],
    [2, 2, 2, 1,14, 5, 4, 3, 2, 1, 3,46,51,75,80,85, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6,7,8,9,227,122,117],
    [1, 1, 1, 1, 7, 5, 4, 3, 2, 1,37, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,241,235,231,4,4,4],
    [1, 2, 3, 4, 5, 6, 7, 8, 9,30, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3,  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,249,247,244,3,3,3,3,3,3],
    [1, 2, 3, 4, 5, 6, 7, 8,20, 1, 2, 2, 2,2, 2, 2, 2, 2,  2, 2, 4, 8,12,16,20,24,28,32,36,40,44,295, 2, 2, 2, 2, 2, 2, 2,2],
    [1, 2, 3, 4, 5, 6, 7,10, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]],
            dtype=np.int32)

        cell_neighbors =  np.array([ [5,7,2],
                                     [1,10,3],
                                     [2,13,4],
                                     [3,16,5],
                                     [4,19,1],
                                     [20,21,7],
                                     [1,6,8],
                                     [7,23,9],
                                     [8,25,10],
                                     [2,9,11],
                                     [10,27,12],
                                     [11,29,13],
                                     [3,12,14],
                                     [13,31,15],
                                     [14,33,16],
                                     [4,15,17],
                                     [16,35,18],
                                     [17,37,19],
                                     [5,18,20],
                                     [19,39,6],
                                     [6,40,22],
                                     [21,41,23],
                                     [8,22,24],
                                     [23,43,25],
                                     [24,26,9],
                                     [25,45,27],
                                     [11,26,28],
                                     [27,47,29],
                                     [12,28,30],
                                     [29,49,31],
                                     [14,30,32],
                                     [31,51,33],
                                     [15,32,34],
                                     [33,53,35],
                                     [17,34,36],
                                     [35,55,37],
                                     [18,36,38],
                                     [37,57,39],
                                     [20,38,40],
                                     [39,59,21],
                                     [22,60,42],
                                     [41,61,43],
                                     [24,42,44],
                                     [43,63,45],
                                     [26,44,46],
                                     [45,64,47],
                                     [28,46,48],
                                     [47,66,49],
                                     [30,48,50],
                                     [49,67,51],
                                     [32,50,52],
                                     [51,69,53],
                                     [34,52,54],
                                     [53,70,55],
                                     [36,54,56],
                                     [55,72,57],
                                     [38,56,58],
                                     [57,73,59],
                                     [40,58,60],
                                     [59,75,41],
                                     [42,75,62],
                                     [61,76,63],
                                     [44,62,64],
                                     [46,63,65],
                                     [64,77,66],
                                     [48,65,67],
                                     [50,66,68],
                                     [67,78,69],
                                     [52,68,70],
                                     [54,69,71],
                                     [70,79,72],
                                     [56,71,73],
                                     [58,72,74],
                                     [73,80,75],
                                     [60,74,61],
                                     [62,80,77],
                                     [65,76,78],
                                     [68,77,79],
                                     [71,78,80],
                                     [74,79,76] ],
                                     dtype=np.int32)
        cell_vertices_lats = np.array([[  90.0,  60.0,  60.0],
                                       [  90.0,  60.0,  60.0],
                                       [  90.0,  60.0,  60.0],
                                       [  90.0,  60.0,  60.0],
                                       [  90.0,  60.0,  60.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  60.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  60.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  60.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  60.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  30.0],
                                       [  60.0,  30.0,  60.0],
                                       [  60.0,  30.0,  30.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [  30.0,   0.0,  30.0],
                                       [  30.0,   0.0,   0.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [   0.0, -30.0,   0.0],
                                       [   0.0, -30.0, -30.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -60.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -60.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -60.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -60.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -30.0, -60.0, -60.0],
                                       [ -30.0, -60.0, -30.0],
                                       [ -60.0, -90.0, -60.0],
                                       [ -60.0, -90.0, -60.0],
                                       [ -60.0, -90.0, -60.0],
                                       [ -60.0, -90.0, -60.0],
                                       [ -60.0, -90.0, -60.0] ],
                                     dtype=np.float64)
        cell_vertices_lons = np.array([[   0.0, 324.0,  36.0 ],
                                       [   0.0,  36.0, 108.0 ],
                                       [   0.0, 108.0, 180.0 ],
                                       [   0.0, 180.0, 252.0 ],
                                       [   0.0, 252.0, 324.0 ],
                                       [ 324.0, 324.0,   0.0 ],
                                       [ 324.0,   0.0,  36.0 ],
                                       [  36.0,   0.0,  36.0 ],
                                       [  36.0,  36.0,  72.0 ],
                                       [  36.0,  72.0, 108.0 ],
                                       [ 108.0,  72.0, 108.0 ],
                                       [ 108.0, 108.0, 144.0 ],
                                       [ 108.0, 144.0, 180.0 ],
                                       [ 180.0, 144.0, 180.0 ],
                                       [ 180.0, 180.0, 216.0 ],
                                       [ 180.0, 216.0, 252.0 ],
                                       [ 252.0, 216.0, 252.0 ],
                                       [ 252.0, 252.0, 288.0 ],
                                       [ 252.0, 288.0, 324.0 ],
                                       [ 324.0, 288.0, 324.0 ],
                                       [ 324.0, 342.0,   0.0 ],
                                       [   0.0, 342.0,  18.0 ],
                                       [   0.0,  18.0,  36.0 ],
                                       [  36.0,  18.0,  54.0 ],
                                       [  36.0,  54.0,  72.0 ],
                                       [  72.0,  54.0,  90.0 ],
                                       [  72.0,  90.0, 108.0 ],
                                       [ 108.0,  90.0, 126.0 ],
                                       [ 108.0, 126.0, 144.0 ],
                                       [ 144.0, 126.0, 162.0 ],
                                       [ 144.0, 162.0, 180.0 ],
                                       [ 180.0, 162.0, 198.0 ],
                                       [ 180.0, 198.0, 216.0 ],
                                       [ 216.0, 198.0, 234.0 ],
                                       [ 216.0, 234.0, 252.0 ],
                                       [ 252.0, 234.0, 270.0 ],
                                       [ 252.0, 270.0, 288.0 ],
                                       [ 288.0, 270.0, 306.0 ],
                                       [ 288.0, 306.0, 324.0 ],
                                       [ 324.0, 306.0, 342.0 ],
                                       [ 342.0,   0.0,  18.0 ],
                                       [  18.0,   0.0,  36.0 ],
                                       [  18.0,  36.0,  54.0 ],
                                       [  54.0,  36.0,  72.0 ],
                                       [  54.0,  72.0,  90.0 ],
                                       [  90.0,  72.0, 108.0 ],
                                       [  90.0, 108.0, 126.0 ],
                                       [ 126.0, 108.0, 144.0 ],
                                       [ 126.0, 144.0, 162.0 ],
                                       [ 162.0, 144.0, 180.0 ],
                                       [ 162.0, 180.0, 198.0 ],
                                       [ 198.0, 180.0, 216.0 ],
                                       [ 198.0, 216.0, 234.0 ],
                                       [ 234.0, 216.0, 252.0 ],
                                       [ 234.0, 252.0, 270.0 ],
                                       [ 270.0, 252.0, 288.0 ],
                                       [ 270.0, 288.0, 306.0 ],
                                       [ 306.0, 288.0, 324.0 ],
                                       [ 306.0, 324.0, 342.0 ],
                                       [ 342.0, 324.0,   0.0 ],
                                       [   0.0,   0.0,  36.0 ],
                                       [  36.0,   0.0,  72.0 ],
                                       [  36.0,  72.0,  72.0 ],
                                       [  72.0,  72.0, 108.0 ],
                                       [ 108.0,  72.0, 144.0 ],
                                       [ 108.0, 144.0, 144.0 ],
                                       [ 144.0, 144.0, 180.0 ],
                                       [ 180.0, 144.0, 216.0 ],
                                       [ 180.0, 216.0, 216.0 ],
                                       [ 216.0, 216.0, 252.0 ],
                                       [ 252.0, 216.0, 288.0 ],
                                       [ 252.0, 288.0, 288.0 ],
                                       [ 288.0, 288.0, 324.0 ],
                                       [ 324.0, 288.0,   0.0 ],
                                       [ 324.0,   0.0,   0.0 ],
                                       [   0.0,   0.0,  72.0 ],
                                       [  72.0,   0.0, 144.0 ],
                                       [ 144.0,   0.0, 216.0 ],
                                       [ 216.0,   0.0, 288.0 ],
                                       [ 288.0,   0.0,   0.0 ]],
                                     dtype=np.float64)
        pixel_center_lats = np.array([ 82.5, 67.5, 52.5, 37.5, 22.5, 7.5,
                                       -7.5,-22.5,-37.5,-52.5,-67.5,-82.5 ],
                                     dtype=np.float64)
        pixel_center_lons = np.array([ 4.5, 13.5, 22.5, 31.5, 40.5, 49.5, 58.5, 67.5, 76.5, 85.5,
                                      94.5,103.5,112.5,121.5,130.5,139.5,148.5,157.5,166.5,175.5,
                                     184.5,193.5,202.5,211.5,220.5,229.5,238.5,247.5,256.5,265.5,
                                     274.5,283.5,292.5,301.5,310.5,319.5,328.5,337.5,346.5,355.5 ],
                                     dtype=np.float64)
        expected_output_coarse_next_cell_index = np.array([
                 5,          8,          2,         -1,         19,
            20, 19, 23, 23,  8,  2, 29, 29, 15, 16,  4,  4, 20, 20, 39,
            39,40,41,23,23,24,25,47,48,29,33,33,16,16,16,17,39,40,40,59,
            60,23,23,43,43,44,48,49,51,49,33,33,33,35,35,58,59,60,60,73,
            41, 65, 43, 62, 47, 49, 49, 51, 78, 79, 79, 79, 79, 79, 41,
                77,         65,         79,         -5,         73 ],
                             dtype=np.int32)
        output_coarse_next_cell_index = cotat_plus_driver.\
            cotat_plus_icon_icosohedral_cell_latlon_pixel(input_fine_river_directions,
                                                          input_fine_total_cumulative_flow,
                                                          cell_neighbors,
                                                          pixel_center_lats,
                                                          pixel_center_lons,
                                                          cell_vertices_lats,
                                                          cell_vertices_lons)
        np.testing.assert_array_equal(expected_output_coarse_next_cell_index,
                                      output_coarse_next_cell_index)

    def testSmallGridLatLonToIconThree(self):

        input_fine_river_directions = np.array([
            [6,6,6,6,6,6,6,6,1,4, 4,4,4,4,4,4,4,4,4,4, 2,2,2,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,2,6,6],
            [4,4,6,6,6,6,6,1,7,7, 7,7,4,4,4,4,4,4,4,4, 6,6,6,6,6,6,6,0,6,6, 6,6,6,6,2,4,4,4,4,4],
            [4,4,6,2,1,4,4,7,7,7, 7,7,4,2,4,4,4,6,6,6, 6,6,6,6,6,6,9,8,6,6, 6,6,6,6,2,4,4,4,4,4],
            [4,4,2,1,7,7,7,7,7,7, 7,7,4,2,4,4,4,6,6,6, 6,6,8,8,8,8,8,8,6,6, 6,6,6,6,2,4,4,4,4,4],
            [4,4,1,4,4,4,4,4,4,4, 4,4,4,2,4,4,4,6,6,6, 6,6,8,8,8,8,8,8,6,6, 6,6,6,6,3,4,4,4,4,4],
            [4,1,8,7,4,4,4,4,4,4, 2,2,4,2,4,4,4,6,6,6, 6,6,8,8,8,8,8,8,6,6, 6,6,6,6,6,3,4,4,4,4],
            [1,8,8,6,7,4,4,4,4,4, 2,2,4,2,4,4,6,6,6,9, 8,8,8,8,8,8,8,8,6,6, 6,6,6,6,6,6,3,4,4,4],
            [8,8,8,6,8,4,4,4,4,4, 2,6,6,6,6,9,8,8,8,8, 8,8,8,8,8,8,8,8,6,6, 6,6,6,6,6,6,6,1,4,4],
            [8,8,8,6,8,4,4,4,4,4, 9,8,8,8,8,8,8,8,8,8, 2,2,2,2,2,2,2,2,2,2, 2,2,6,6,1,4,4,8,8,8],
            [6,6,6,6,6,6,6,6,6,9, 8,8,8,8,8,8,8,8,8,8, 2,2,2,2,2,2,2,2,2,2, 2,2,4,4,8,8,8,8,8,8],
            [6,6,6,6,6,6,6,6,9,4, 8,8,8,8,8,8,8,8,8,8, 6,6,6,6,6,6,6,6,6,6, 6,5,8,8,8,8,8,8,8,8],
            [6,6,6,6,6,6,6,9,4,4, 8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8]],
                                     dtype=np.int32)

        input_fine_total_cumulative_flow = np.array([
 [  3, 4, 5, 6, 7, 8, 9,13,41,23,19, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
 [  2, 1, 1, 2, 3, 4, 7,51, 3, 4, 3, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 4, 6, 8,10,12,14,185,2, 4, 6, 8,10,12,24,10, 8, 6, 4, 3],
 [  2, 1, 1, 3,57,55,53, 2, 2, 2, 3, 2, 1, 4, 3, 2, 1, 1, 2, 3, 4, 5,139,145,151,157,163,6,1,2,3,4, 5, 6,38, 7, 6, 5, 4, 3],
 [  2, 1, 1,61, 1, 1, 1, 1, 1, 1, 1, 2, 1, 8, 3, 2, 1, 1, 2, 3, 4, 5,133,5, 5, 5, 5, 5, 1, 2, 3, 4, 5, 6,52, 7, 6, 5, 4, 3],
 [  2, 1,105,10,9, 8, 7, 6, 5, 4, 3, 2, 1,12, 3, 2, 1, 1, 2, 3, 4, 5,127,4, 4, 4, 4, 4, 1, 2, 3, 4, 5, 6,66, 7, 6, 5, 4, 3],
 [  1,109,4,28, 6, 5, 4, 3, 2, 1, 1, 2, 1,16, 3, 2, 1, 1, 2, 3,115,118,121,3,3,3, 3, 3, 1, 2, 3, 4, 5, 6, 7,79, 5, 4, 3, 2],
 [112, 3, 3, 1,21, 5, 4, 3, 2, 1, 2, 4, 1,19, 2, 1,91,97,103,109,2,2, 2, 2, 2, 2, 2, 2, 1, 2, 3, 4, 5, 6, 7, 8,91, 3, 2, 1],
 [  2, 2, 2, 1,14, 5, 4, 3, 2, 1, 3,46,51,75,80,85, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6,7,8,9,227,122,117],
 [  1, 1, 1, 1, 7, 5, 4, 3, 2, 1,37, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,241,235,231,4,4,4],
 [  1, 2, 3, 4, 5, 6, 7, 8, 9,30, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3,  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,249,247,244,3,3,3,3,3,3],
 [  1, 2, 3, 4, 5, 6, 7, 8,20, 1, 2, 2, 2,2, 2, 2, 2, 2,  2, 2, 4, 8,12,16,20,24,28,32,36,40,44,295, 2, 2, 2, 2, 2, 2, 2,2],
 [  1, 2, 3, 4, 5, 6, 7,10, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]],dtype=np.int32)
        cell_neighbors = np.array([[5,7,2],
                                   [1,10,3],
                                   [2,13,4],
                                   [3,16,5],
                                   [4,19,1],
                                   [20,21,7],
                                   [1,6,8],
                                   [7,23,9],
                                   [8,25,10],
                                   [2,9,11],
                                   [10,27,12],
                                   [11,29,13],
                                   [3,12,14],
                                   [13,31,15],
                                   [14,33,16],
                                   [4,15,17],
                                   [16,35,18],
                                   [17,37,19],
                                   [5,18,20],
                                   [19,39,6],
                                   [6,40,22],
                                   [21,41,23],
                                   [8,22,24],
                                   [23,43,25],
                                   [24,26,9],
                                   [25,45,27],
                                   [11,26,28],
                                   [27,47,29],
                                   [12,28,30],
                                   [29,49,31],
                                   [14,30,32],
                                   [31,51,33],
                                   [15,32,34],
                                   [33,53,35],
                                   [17,34,36],
                                   [35,55,37],
                                   [18,36,38],
                                   [37,57,39],
                                   [20,38,40],
                                   [39,59,21],
                                   [22,60,42],
                                   [41,61,43],
                                   [24,42,44],
                                   [43,63,45],
                                   [26,44,46],
                                   [45,64,47],
                                   [28,46,48],
                                   [47,66,49],
                                   [30,48,50],
                                   [49,67,51],
                                   [32,50,52],
                                   [51,69,53],
                                   [34,52,54],
                                   [53,70,55],
                                   [36,54,56],
                                   [55,72,57],
                                   [38,56,58],
                                   [57,73,59],
                                   [40,58,60],
                                   [59,75,41],
                                   [42,75,62],
                                   [61,76,63],
                                   [44,62,64],
                                   [46,63,65],
                                   [64,77,66],
                                   [48,65,67],
                                   [50,66,68],
                                   [67,78,69],
                                   [52,68,70],
                                   [54,69,71],
                                   [70,79,72],
                                   [56,71,73],
                                   [58,72,74],
                                   [73,80,75],
                                   [60,74,61],
                                   [62,80,77],
                                   [65,76,78],
                                   [68,77,79],
                                   [71,78,80],
                                   [74,79,76]],
                                   dtype=np.int32)
        cell_vertices_lats = np.array([[  90.0,  60.0,  60.0 ],
                                       [  90.0,  60.0,  60.0 ],
                                       [  90.0,  60.0,  60.0 ],
                                       [  90.0,  60.0,  60.0 ],
                                       [  90.0,  60.0,  60.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  60.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  60.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  60.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  60.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  60.0,  30.0,  60.0 ],
                                       [  60.0,  30.0,  30.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [  30.0,   0.0,  30.0 ],
                                       [  30.0,   0.0,   0.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [   0.0, -30.0,   0.0 ],
                                       [   0.0, -30.0, -30.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -60.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -60.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -60.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -60.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -30.0, -60.0, -60.0 ],
                                       [ -30.0, -60.0, -30.0 ],
                                       [ -60.0, -90.0, -60.0 ],
                                       [ -60.0, -90.0, -60.0 ],
                                       [ -60.0, -90.0, -60.0 ],
                                       [ -60.0, -90.0, -60.0 ],
                                       [ -60.0, -90.0, -60.0 ]],
                                      dtype=np.float64)
        cell_vertices_lons = np.array([[    0.0, -36.0,  36.0 ],
                                       [    0.0,  36.0, 108.0 ],
                                       [    0.0, 108.0, 180.0 ],
                                       [    0.0, 180.0,-108.0 ],
                                       [    0.0,-108.0, -36.0 ],
                                       [  -36.0, -36.0,   0.0 ],
                                       [  -36.0,   0.0,  36.0 ],
                                       [   36.0,   0.0,  36.0 ],
                                       [   36.0,  36.0,  72.0 ],
                                       [   36.0,  72.0, 108.0 ],
                                       [  108.0,  72.0, 108.0 ],
                                       [  108.0, 108.0, 144.0 ],
                                       [  108.0, 144.0, 180.0 ],
                                       [  180.0, 144.0, 180.0 ],
                                       [  180.0, 180.0,-144.0 ],
                                       [  180.0,-144.0,-108.0 ],
                                       [ -108.0,-144.0,-108.0 ],
                                       [ -108.0,-108.0, -72.0 ],
                                       [ -108.0, -72.0, -36.0 ],
                                       [  -36.0, -72.0, -36.0 ],
                                       [  -36.0, -18.0,   0.0 ],
                                       [    0.0, -18.0,  18.0 ],
                                       [    0.0,  18.0,  36.0 ],
                                       [   36.0,  18.0,  54.0 ],
                                       [   36.0,  54.0,  72.0 ],
                                       [   72.0,  54.0,  90.0 ],
                                       [   72.0,  90.0, 108.0 ],
                                       [  108.0,  90.0, 126.0 ],
                                       [  108.0, 126.0, 144.0 ],
                                       [  144.0, 126.0, 162.0 ],
                                       [  144.0, 162.0, 180.0 ],
                                       [  180.0, 162.0,-162.0 ],
                                       [  180.0,-162.0,-144.0 ],
                                       [ -144.0,-162.0,-126.0 ],
                                       [ -144.0,-126.0,-108.0 ],
                                       [ -108.0,-126.0, -90.0 ],
                                       [ -108.0, -90.0, -72.0 ],
                                       [  -72.0, -90.0, -54.0 ],
                                       [  -72.0, -54.0, -36.0 ],
                                       [  -36.0, -54.0, -18.0 ],
                                       [  -18.0,   0.0,  18.0 ],
                                       [   18.0,   0.0,  36.0 ],
                                       [   18.0,  36.0,  54.0 ],
                                       [   54.0,  36.0,  72.0 ],
                                       [   54.0,  72.0,  90.0 ],
                                       [   90.0,  72.0, 108.0 ],
                                       [   90.0, 108.0, 126.0 ],
                                       [  126.0, 108.0, 144.0 ],
                                       [  126.0, 144.0, 162.0 ],
                                       [  162.0, 144.0, 180.0 ],
                                       [  162.0, 180.0,-162.0 ],
                                       [ -162.0, 180.0,-144.0 ],
                                       [ -162.0,-144.0,-126.0 ],
                                       [ -126.0,-144.0,-108.0 ],
                                       [ -126.0,-108.0, -90.0 ],
                                       [  -90.0,-108.0, -72.0 ],
                                       [  -90.0, -72.0, -54.0 ],
                                       [  -54.0, -72.0, -36.0 ],
                                       [  -54.0, -36.0, -18.0 ],
                                       [  -18.0, -36.0,   0.0 ],
                                       [    0.0,   0.0,  36.0 ],
                                       [   36.0,   0.0,  72.0 ],
                                       [   36.0,  72.0,  72.0 ],
                                       [   72.0,  72.0, 108.0 ],
                                       [  108.0,  72.0, 144.0 ],
                                       [  108.0, 144.0, 144.0 ],
                                       [  144.0, 144.0, 180.0 ],
                                       [  180.0, 144.0,-144.0 ],
                                       [  180.0,-144.0,-144.0 ],
                                       [ -144.0,-144.0,-108.0 ],
                                       [ -108.0,-144.0, -72.0 ],
                                       [ -108.0, -72.0, -72.0 ],
                                       [  -72.0, -72.0, -36.0 ],
                                       [  -36.0, -72.0,   0.0 ],
                                       [  -36.0,   0.0,   0.0 ],
                                       [    0.0,   0.0,  72.0 ],
                                       [   72.0,   0.0, 144.0 ],
                                       [  144.0,   0.0,-144.0 ],
                                       [ -144.0,   0.0, -72.0 ],
                                       [  -72.0,   0.0,   0.0 ]],
                                       dtype=np.float64)
        pixel_center_lats = np.array([ 82.5, 67.5, 52.5, 37.5, 22.5, 7.5,
                                       -7.5,-22.5,-37.5,-52.5,-67.5,-82.5 ],
                                     dtype=np.float64)
        pixel_center_lons = \
            np.array([  4.5, 13.5, 22.5, 31.5, 40.5, 49.5, 58.5, 67.5, 76.5, 85.5,
                       94.5,103.5,112.5,121.5,130.5,139.5,148.5,157.5,166.5,175.5,
                      184.5,193.5,202.5,211.5,220.5,229.5,238.5,247.5,256.5,265.5,
                      274.5,283.5,292.5,301.5,310.5,319.5,328.5,337.5,346.5,355.5 ],
                      dtype=np.float64)
        expected_output_coarse_next_cell_index = np.array([
                 5,          8,          2,         -1,         19,
            20, 19, 23, 23,  8,  2, 29, 29, 15, 16,  4,  4, 20, 20, 39,
            39,40,41,23,23,24,25,47,48,29,33,33,16,16,16,17,39,40,40,59,
            60,23,23,43,43,44,48,49,51,49,33,33,33,35,35,58,59,60,60,73,
            41, 65, 43, 62, 47, 49, 49, 51, 78, 79, 79, 79, 79, 79, 41,
                77,         65,         79,         -5,        73],
                             dtype=np.int32)
        output_coarse_next_cell_index = cotat_plus_driver.\
            cotat_plus_icon_icosohedral_cell_latlon_pixel(input_fine_river_directions,
                                                          input_fine_total_cumulative_flow,
                                                          cell_neighbors,
                                                          pixel_center_lats,
                                                          pixel_center_lons,
                                                          cell_vertices_lats,
                                                          cell_vertices_lons)
        np.testing.assert_array_equal(expected_output_coarse_next_cell_index,
                                      output_coarse_next_cell_index)

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    if using_mpi():
        comm = MPI.COMM_WORLD
        rank = comm.Get_rank()
        if rank == 0:
            unittest.main(exit=False)
            command = MPICommands.EXIT
            comm.bcast(command, root=0)
        else:
            process_manager = ProcessManager(comm)
            process_manager.wait_for_commands()
    else:
      unittest.main()
