module L2LakeInputTestModule

using Test: @test, @testset
using FieldModule: Field,LatLonField
using GridModule: Grid,LatLonGrid
using L2LakeModelDefsModule: LakeModelParameters
using L2LakeInputModule: load_lake_parameters

@testset "Lake Input Tests 1" begin
  #Without binary mask
  lake_para_filepath = "/Users/thomasriddick/Documents/data/temp/l2_lake_model_para.nc"
  lake_grid::Grid = LatLonGrid(20,20,true)
  hd_grid::Grid = LatLonGrid(4,4,true)
  surface_model_grid::Grid = LatLonGrid(3,3,true)
  cell_areas_on_surface_model_grid::Field{Float64} =
    LatLonField{Float64}(surface_model_grid,Float64[ 2.5 3.0 2.5
                                                     3.0 4.0 3.0
                                                     2.5 3.0 2.5 ])
  expected_lake_parameters_as_array::Vector{Float64} = Float64[12.0, 236.0, 1.0, 8.0, 0.0, 15.0, 2.0, 45.0, 15.0, 2.0, 1.0, 0.0, 6.0, 16.0, 3.0, 1.0, 0.0, 6.0, 15.0, 3.0, 1.0, 0.0, 6.0, 16.0, 4.0, 1.0, 0.0, 6.0, 16.0, 2.0, 1.0, 0.0, 6.0, 17.0, 4.0, 1.0, 0.0, 6.0, 15.0, 5.0, 1.0, 0.0, 6.0, 16.0, 5.0, 1.0, 0.0, 6.0, 18.0, 3.0, 1.0, 0.0, 6.0, 16.0, 6.0, 1.0, 0.0, 6.0, 17.0, 6.0, 1.0, 0.0, 6.0, 15.0, 6.0, 1.0, 0.0, 6.0, 18.0, 2.0, 1.0, 0.0, 6.0, 15.0, 7.0, 1.0, 0.0, 6.0, 18.0, 6.0, 1.0, 0.0, 6.0, 18.0, 7.0, 1.0, 0.0, 6.0, 15.0, 4.0, 1.0, 0.0, 6.0, 18.0, 8.0, 1.0, 0.0, 6.0, 17.0, 8.0, 1.0, 0.0, 6.0, 18.0, 9.0, 1.0, 0.0, 6.0, 17.0, 9.0, 1.0, 0.0, 6.0, 16.0, 9.0, 1.0, 0.0, 6.0, 18.0, 10.0, 1.0, 0.0, 6.0, 17.0, 10.0, 1.0, 0.0, 6.0, 16.0, 10.0, 1.0, 0.0, 6.0, 15.0, 9.0, 1.0, 0.0, 6.0, 18.0, 11.0, 1.0, 0.0, 6.0, 15.0, 10.0, 1.0, 0.0, 6.0, 17.0, 2.0, 1.0, 0.0, 6.0, 18.0, 4.0, 1.0, 0.0, 6.0, 18.0, 5.0, 1.0, 0.0, 6.0, 15.0, 8.0, 1.0, 0.0, 6.0, 17.0, 12.0, 1.0, 0.0, 6.0, 16.0, 8.0, 1.0, 0.0, 6.0, 18.0, 13.0, 1.0, 0.0, 6.0, 16.0, 12.0, 1.0, 0.0, 6.0, 16.0, 13.0, 1.0, 0.0, 6.0, 17.0, 3.0, 1.0, 0.0, 6.0, 17.0, 5.0, 1.0, 0.0, 6.0, 16.0, 7.0, 1.0, 0.0, 6.0, 17.0, 7.0, 1.0, 0.0, 6.0, 17.0, 11.0, 1.0, 0.0, 6.0, 18.0, 12.0, 1.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 6.0, 17.0, 13.0, 1.0, 45.0, 7.0, 1.0, 4.0, 3.0, 1.0, 0.0, 116.0, 2.0, 9.0, 0.0, 8.0, 17.0, 21.0, 8.0, 17.0, 1.0, 0.0, 3.0, 9.0, 18.0, 1.0, 0.0, 3.0, 7.0, 18.0, 1.0, 0.0, 3.0, 10.0, 17.0, 1.0, 0.0, 3.0, 7.0, 17.0, 1.0, 0.0, 3.0, 8.0, 19.0, 1.0, 0.0, 3.0, 11.0, 18.0, 1.0, 0.0, 3.0, 7.0, 19.0, 1.0, 0.0, 3.0, 8.0, 18.0, 1.0, 0.0, 3.0, 10.0, 19.0, 1.0, 0.0, 3.0, 9.0, 17.0, 1.0, 0.0, 3.0, 12.0, 18.0, 1.0, 0.0, 3.0, 12.0, 17.0, 1.0, 0.0, 3.0, 13.0, 17.0, 1.0, 0.0, 3.0, 12.0, 19.0, 1.0, 0.0, 3.0, 11.0, 19.0, 1.0, 0.0, 3.0, 13.0, 19.0, 1.0, 0.0, 3.0, 13.0, 18.0, 1.0, 0.0, 3.0, 10.0, 18.0, 1.0, 0.0, 3.0, 9.0, 19.0, 1.0, 0.0, 3.0, 11.0, 17.0, 1.0, 63.0, 6.0, 1.0, 5.0, -1.0, -1.0, 1.0, 101.0, 3.0, 10.0, 0.0, 8.0, 12.0, 18.0, 8.0, 12.0, 1.0, 0.0, 4.0, 9.0, 13.0, 1.0, 0.0, 4.0, 8.0, 13.0, 1.0, 0.0, 4.0, 10.0, 12.0, 1.0, 0.0, 4.0, 9.0, 12.0, 1.0, 0.0, 4.0, 11.0, 13.0, 1.0, 0.0, 4.0, 11.0, 12.0, 1.0, 0.0, 4.0, 12.0, 14.0, 1.0, 0.0, 4.0, 11.0, 14.0, 1.0, 0.0, 4.0, 12.0, 12.0, 1.0, 0.0, 4.0, 13.0, 13.0, 1.0, 0.0, 4.0, 8.0, 14.0, 1.0, 0.0, 4.0, 10.0, 14.0, 1.0, 0.0, 4.0, 9.0, 14.0, 1.0, 0.0, 4.0, 13.0, 14.0, 1.0, 0.0, 4.0, 13.0, 12.0, 1.0, 0.0, 4.0, 10.0, 13.0, 1.0, 0.0, 4.0, 12.0, 13.0, 1.0, 18.0, 5.0, 1.0, 6.0, 2.0, 3.0, 0.0, 66.0, 4.0, 8.0, 0.0, 3.0, 2.0, 11.0, 3.0, 2.0, 1.0, 0.0, 1.0, 4.0, 2.0, 1.0, 0.0, 1.0, 5.0, 2.0, 1.0, 0.0, 1.0, 6.0, 2.0, 1.0, 0.0, 1.0, 7.0, 2.0, 1.0, 0.0, 1.0, 8.0, 2.0, 1.0, 0.0, 1.0, 9.0, 2.0, 1.0, 0.0, 1.0, 10.0, 2.0, 1.0, 0.0, 1.0, 11.0, 2.0, 1.0, 0.0, 1.0, 12.0, 2.0, 1.0, 0.0, 1.0, 13.0, 2.0, 1.0, 66.0, 7.0, 1.0, 1.0, -1.0, -1.0, 1.0, 71.0, 5.0, 9.0, 0.0, 2.0, 17.0, 12.0, 2.0, 17.0, 1.0, 0.0, 2.0, 3.0, 18.0, 1.0, 0.0, 2.0, 2.0, 18.0, 1.0, 0.0, 2.0, 4.0, 17.0, 1.0, 0.0, 2.0, 3.0, 17.0, 1.0, 0.0, 2.0, 5.0, 18.0, 1.0, 0.0, 2.0, 5.0, 17.0, 1.0, 0.0, 2.0, 5.0, 19.0, 1.0, 0.0, 2.0, 2.0, 19.0, 1.0, 0.0, 2.0, 4.0, 19.0, 1.0, 0.0, 2.0, 3.0, 19.0, 1.0, 0.0, 2.0, 4.0, 18.0, 1.0, 48.0, 6.0, 1.0, 2.0, -1.0, -1.0, 1.0, 141.0, 6.0, 10.0, 0.0, 2.0, 8.0, 26.0, 2.0, 8.0, 1.0, 0.0, 1.0, 3.0, 9.0, 1.0, 0.0, 1.0, 2.0, 9.0, 1.0, 0.0, 1.0, 4.0, 8.0, 1.0, 0.0, 1.0, 3.0, 8.0, 1.0, 0.0, 1.0, 4.0, 10.0, 1.0, 0.0, 1.0, 3.0, 10.0, 1.0, 0.0, 1.0, 4.0, 11.0, 1.0, 0.0, 1.0, 4.0, 9.0, 1.0, 0.0, 1.0, 3.0, 11.0, 1.0, 0.0, 1.0, 2.0, 11.0, 1.0, 0.0, 1.0, 4.0, 12.0, 1.0, 0.0, 1.0, 3.0, 12.0, 1.0, 0.0, 1.0, 2.0, 12.0, 1.0, 0.0, 1.0, 4.0, 13.0, 1.0, 0.0, 1.0, 3.0, 13.0, 1.0, 0.0, 1.0, 2.0, 13.0, 1.0, 0.0, 1.0, 5.0, 14.0, 1.0, 0.0, 1.0, 4.0, 14.0, 1.0, 0.0, 1.0, 6.0, 14.0, 1.0, 0.0, 1.0, 6.0, 13.0, 1.0, 0.0, 1.0, 3.0, 14.0, 1.0, 0.0, 1.0, 6.0, 12.0, 1.0, 0.0, 1.0, 2.0, 14.0, 1.0, 0.0, 1.0, 5.0, 12.0, 1.0, 0.0, 1.0, 5.0, 13.0, 1.0, 104.0, 5.0, 1.0, 3.0, -1.0, -1.0, 1.0, 56.0, 7.0, 11.0, 0.0, 2.0, 4.0, 9.0, 2.0, 4.0, 1.0, 0.0, 3.0, 3.0, 5.0, 1.0, 0.0, 3.0, 2.0, 5.0, 1.0, 0.0, 3.0, 4.0, 6.0, 1.0, 0.0, 3.0, 4.0, 5.0, 1.0, 0.0, 3.0, 3.0, 4.0, 1.0, 0.0, 3.0, 3.0, 6.0, 1.0, 0.0, 3.0, 4.0, 4.0, 1.0, 0.0, 3.0, 2.0, 6.0, 1.0, 27.0, 6.0, 1.0, 10.0, 1.0, 2.0, 0.0, 298.0, 8.0, -1.0, 2.0, 1.0, 4.0, 15.0, 2.0, 57.0, 15.0, 2.0, 1.0, 0.0, 7.0, 16.0, 3.0, 1.0, 0.0, 7.0, 15.0, 3.0, 1.0, 0.0, 7.0, 14.0, 2.0, 2.0, 0.0, 7.0, 16.0, 4.0, 1.0, 0.0, 7.0, 16.0, 2.0, 1.0, 0.0, 7.0, 17.0, 3.0, 1.0, 0.0, 7.0, 16.0, 5.0, 1.0, 0.0, 7.0, 15.0, 5.0, 1.0, 0.0, 7.0, 18.0, 3.0, 1.0, 0.0, 7.0, 18.0, 2.0, 1.0, 0.0, 7.0, 17.0, 6.0, 1.0, 0.0, 7.0, 15.0, 6.0, 1.0, 0.0, 7.0, 18.0, 4.0, 1.0, 0.0, 7.0, 18.0, 5.0, 1.0, 0.0, 7.0, 15.0, 4.0, 1.0, 0.0, 7.0, 17.0, 2.0, 1.0, 0.0, 7.0, 17.0, 5.0, 1.0, 0.0, 7.0, 15.0, 7.0, 1.0, 0.0, 7.0, 18.0, 6.0, 1.0, 0.0, 7.0, 13.0, 2.0, 1.0, 0.0, 7.0, 16.0, 7.0, 1.0, 0.0, 7.0, 12.0, 2.0, 1.0, 0.0, 7.0, 17.0, 8.0, 1.0, 0.0, 7.0, 11.0, 2.0, 1.0, 0.0, 7.0, 18.0, 9.0, 1.0, 0.0, 7.0, 17.0, 9.0, 1.0, 0.0, 7.0, 18.0, 8.0, 1.0, 0.0, 7.0, 10.0, 2.0, 1.0, 0.0, 7.0, 16.0, 9.0, 1.0, 0.0, 7.0, 15.0, 8.0, 1.0, 0.0, 7.0, 17.0, 7.0, 1.0, 0.0, 7.0, 16.0, 8.0, 1.0, 0.0, 7.0, 17.0, 4.0, 1.0, 0.0, 7.0, 18.0, 7.0, 1.0, 0.0, 7.0, 15.0, 9.0, 1.0, 0.0, 7.0, 16.0, 10.0, 1.0, 0.0, 7.0, 9.0, 2.0, 1.0, 0.0, 7.0, 15.0, 10.0, 1.0, 0.0, 7.0, 16.0, 6.0, 1.0, 0.0, 7.0, 17.0, 10.0, 1.0, 0.0, 7.0, 8.0, 2.0, 1.0, 0.0, 7.0, 17.0, 11.0, 1.0, 0.0, 7.0, 16.0, 11.0, 1.0, 0.0, 7.0, 18.0, 11.0, 1.0, 0.0, 7.0, 17.0, 12.0, 1.0, 0.0, 7.0, 16.0, 12.0, 1.0, 0.0, 7.0, 7.0, 2.0, 1.0, 0.0, 7.0, 18.0, 13.0, 1.0, 0.0, 7.0, 16.0, 13.0, 1.0, 0.0, 7.0, 17.0, 13.0, 1.0, 0.0, 7.0, 6.0, 2.0, 1.0, 0.0, 7.0, 18.0, 12.0, 1.0, 0.0, 7.0, 5.0, 2.0, 1.0, 0.0, 7.0, 18.0, 10.0, 1.0, 0.0, 7.0, 4.0, 2.0, 1.0, 0.0, 7.0, 3.0, 2.0, 1.0, 56.0, 8.0, 1.0, -1.0, 4.0, 4.0, 0.0, 183.0, 9.0, 12.0, 2.0, 2.0, 5.0, 8.0, 17.0, 34.0, 8.0, 17.0, 1.0, 0.0, 6.0, 9.0, 18.0, 1.0, 0.0, 6.0, 7.0, 18.0, 1.0, 0.0, 6.0, 10.0, 17.0, 1.0, 0.0, 6.0, 7.0, 17.0, 1.0, 0.0, 6.0, 8.0, 19.0, 1.0, 0.0, 6.0, 6.0, 18.0, 1.0, 0.0, 6.0, 11.0, 18.0, 1.0, 0.0, 6.0, 7.0, 19.0, 1.0, 0.0, 6.0, 5.0, 17.0, 1.0, 0.0, 6.0, 12.0, 18.0, 1.0, 0.0, 6.0, 12.0, 17.0, 1.0, 0.0, 6.0, 4.0, 18.0, 1.0, 0.0, 6.0, 13.0, 19.0, 1.0, 0.0, 6.0, 13.0, 17.0, 1.0, 0.0, 6.0, 13.0, 18.0, 1.0, 0.0, 6.0, 4.0, 19.0, 1.0, 0.0, 6.0, 4.0, 17.0, 1.0, 0.0, 6.0, 8.0, 18.0, 1.0, 0.0, 6.0, 10.0, 19.0, 1.0, 0.0, 6.0, 9.0, 17.0, 1.0, 0.0, 6.0, 11.0, 19.0, 1.0, 0.0, 6.0, 12.0, 19.0, 1.0, 0.0, 6.0, 5.0, 19.0, 1.0, 0.0, 6.0, 5.0, 18.0, 1.0, 0.0, 6.0, 10.0, 18.0, 1.0, 0.0, 6.0, 9.0, 19.0, 1.0, 0.0, 6.0, 11.0, 17.0, 1.0, 0.0, 6.0, 3.0, 17.0, 1.0, 0.0, 6.0, 3.0, 19.0, 1.0, 0.0, 6.0, 3.0, 18.0, 1.0, 0.0, 6.0, 2.0, 18.0, 1.0, 0.0, 6.0, 2.0, 17.0, 1.0, 0.0, 6.0, 2.0, 19.0, 1.0, 34.0, 7.0, 1.0, 11.0, 1.0, 3.0, 0.0, 238.0, 10.0, 11.0, 2.0, 3.0, 6.0, 8.0, 12.0, 45.0, 8.0, 12.0, 1.0, 0.0, 5.0, 9.0, 13.0, 1.0, 0.0, 5.0, 7.0, 13.0, 1.0, 0.0, 5.0, 10.0, 12.0, 1.0, 0.0, 5.0, 8.0, 13.0, 1.0, 0.0, 5.0, 8.0, 14.0, 1.0, 0.0, 5.0, 6.0, 13.0, 1.0, 0.0, 5.0, 11.0, 13.0, 1.0, 0.0, 5.0, 6.0, 12.0, 1.0, 0.0, 5.0, 6.0, 14.0, 1.0, 0.0, 5.0, 5.0, 12.0, 1.0, 0.0, 5.0, 12.0, 12.0, 1.0, 0.0, 5.0, 4.0, 13.0, 1.0, 0.0, 5.0, 4.0, 11.0, 1.0, 0.0, 5.0, 13.0, 13.0, 1.0, 0.0, 5.0, 13.0, 12.0, 1.0, 0.0, 5.0, 4.0, 14.0, 1.0, 0.0, 5.0, 3.0, 10.0, 1.0, 0.0, 5.0, 4.0, 12.0, 1.0, 0.0, 5.0, 10.0, 13.0, 1.0, 0.0, 5.0, 10.0, 14.0, 1.0, 0.0, 5.0, 9.0, 14.0, 1.0, 0.0, 5.0, 12.0, 13.0, 1.0, 0.0, 5.0, 2.0, 9.0, 1.0, 0.0, 5.0, 3.0, 9.0, 1.0, 0.0, 5.0, 11.0, 14.0, 1.0, 0.0, 5.0, 5.0, 13.0, 1.0, 0.0, 5.0, 12.0, 14.0, 1.0, 0.0, 5.0, 4.0, 8.0, 1.0, 0.0, 5.0, 3.0, 8.0, 1.0, 0.0, 5.0, 2.0, 8.0, 1.0, 0.0, 5.0, 4.0, 9.0, 1.0, 0.0, 5.0, 9.0, 12.0, 1.0, 0.0, 5.0, 5.0, 14.0, 1.0, 0.0, 5.0, 2.0, 11.0, 1.0, 0.0, 5.0, 4.0, 10.0, 1.0, 0.0, 5.0, 13.0, 14.0, 1.0, 0.0, 5.0, 2.0, 12.0, 1.0, 0.0, 5.0, 11.0, 12.0, 1.0, 0.0, 5.0, 3.0, 12.0, 1.0, 0.0, 5.0, 2.0, 13.0, 1.0, 0.0, 5.0, 3.0, 11.0, 1.0, 0.0, 5.0, 3.0, 14.0, 1.0, 0.0, 5.0, 2.0, 14.0, 1.0, 0.0, 5.0, 3.0, 13.0, 1.0, 45.0, 6.0, 1.0, 7.0, 1.0, 2.0, 0.0, 288.0, 11.0, 12.0, 2.0, 10.0, 7.0, 8.0, 12.0, 55.0, 8.0, 12.0, 1.0, 0.0, 6.0, 9.0, 13.0, 1.0, 0.0, 6.0, 7.0, 13.0, 1.0, 0.0, 6.0, 10.0, 12.0, 1.0, 0.0, 6.0, 8.0, 13.0, 1.0, 0.0, 6.0, 8.0, 14.0, 1.0, 0.0, 6.0, 6.0, 13.0, 1.0, 0.0, 6.0, 11.0, 13.0, 1.0, 0.0, 6.0, 6.0, 12.0, 1.0, 0.0, 6.0, 6.0, 14.0, 1.0, 0.0, 6.0, 5.0, 12.0, 1.0, 0.0, 6.0, 12.0, 12.0, 1.0, 0.0, 6.0, 4.0, 13.0, 1.0, 0.0, 6.0, 4.0, 11.0, 1.0, 0.0, 6.0, 13.0, 13.0, 1.0, 0.0, 6.0, 13.0, 12.0, 1.0, 0.0, 6.0, 4.0, 14.0, 1.0, 0.0, 6.0, 3.0, 10.0, 1.0, 0.0, 6.0, 4.0, 12.0, 1.0, 0.0, 6.0, 10.0, 13.0, 1.0, 0.0, 6.0, 10.0, 14.0, 1.0, 0.0, 6.0, 9.0, 14.0, 1.0, 0.0, 6.0, 12.0, 13.0, 1.0, 0.0, 6.0, 2.0, 9.0, 1.0, 0.0, 6.0, 3.0, 9.0, 1.0, 0.0, 6.0, 11.0, 14.0, 1.0, 0.0, 6.0, 5.0, 13.0, 1.0, 0.0, 6.0, 12.0, 14.0, 1.0, 0.0, 6.0, 4.0, 8.0, 1.0, 0.0, 6.0, 3.0, 8.0, 1.0, 0.0, 6.0, 2.0, 8.0, 1.0, 0.0, 6.0, 4.0, 9.0, 1.0, 0.0, 6.0, 3.0, 7.0, 1.0, 0.0, 6.0, 9.0, 12.0, 1.0, 0.0, 6.0, 2.0, 6.0, 1.0, 0.0, 6.0, 5.0, 14.0, 1.0, 0.0, 6.0, 3.0, 5.0, 1.0, 0.0, 6.0, 2.0, 5.0, 1.0, 0.0, 6.0, 4.0, 5.0, 1.0, 0.0, 6.0, 4.0, 4.0, 1.0, 0.0, 6.0, 2.0, 4.0, 1.0, 0.0, 6.0, 3.0, 4.0, 1.0, 0.0, 6.0, 4.0, 6.0, 1.0, 0.0, 6.0, 3.0, 6.0, 1.0, 0.0, 6.0, 2.0, 11.0, 1.0, 0.0, 6.0, 4.0, 10.0, 1.0, 0.0, 6.0, 2.0, 12.0, 1.0, 0.0, 6.0, 13.0, 14.0, 1.0, 0.0, 6.0, 2.0, 13.0, 1.0, 0.0, 6.0, 11.0, 12.0, 1.0, 0.0, 6.0, 2.0, 14.0, 1.0, 0.0, 6.0, 3.0, 12.0, 1.0, 0.0, 6.0, 3.0, 11.0, 1.0, 0.0, 6.0, 3.0, 14.0, 1.0, 0.0, 6.0, 3.0, 13.0, 1.0, 55.0, 7.0, 1.0, 9.0, 1.0, 4.0, 0.0, 468.0, 12.0, -1.0, 2.0, 9.0, 11.0, 8.0, 17.0, 91.0, 8.0, 17.0, 1.0, 0.0, 7.0, 9.0, 18.0, 1.0, 0.0, 7.0, 7.0, 18.0, 1.0, 0.0, 7.0, 10.0, 17.0, 1.0, 0.0, 7.0, 7.0, 17.0, 1.0, 0.0, 7.0, 8.0, 19.0, 1.0, 0.0, 7.0, 6.0, 18.0, 1.0, 0.0, 7.0, 11.0, 18.0, 1.0, 0.0, 7.0, 7.0, 19.0, 1.0, 0.0, 7.0, 5.0, 17.0, 1.0, 0.0, 7.0, 12.0, 18.0, 1.0, 0.0, 7.0, 12.0, 17.0, 1.0, 0.0, 7.0, 4.0, 18.0, 1.0, 0.0, 7.0, 13.0, 19.0, 1.0, 0.0, 7.0, 13.0, 17.0, 1.0, 0.0, 7.0, 13.0, 18.0, 1.0, 0.0, 7.0, 4.0, 19.0, 1.0, 0.0, 7.0, 4.0, 17.0, 1.0, 0.0, 7.0, 8.0, 18.0, 1.0, 0.0, 7.0, 10.0, 19.0, 1.0, 0.0, 7.0, 9.0, 17.0, 1.0, 0.0, 7.0, 11.0, 19.0, 1.0, 0.0, 7.0, 12.0, 19.0, 1.0, 0.0, 7.0, 5.0, 19.0, 1.0, 0.0, 7.0, 5.0, 18.0, 1.0, 0.0, 7.0, 3.0, 16.0, 1.0, 0.0, 7.0, 10.0, 18.0, 1.0, 0.0, 7.0, 9.0, 19.0, 1.0, 0.0, 7.0, 11.0, 17.0, 1.0, 0.0, 7.0, 3.0, 15.0, 1.0, 0.0, 7.0, 3.0, 17.0, 1.0, 0.0, 7.0, 2.0, 17.0, 1.0, 0.0, 7.0, 3.0, 19.0, 1.0, 0.0, 7.0, 4.0, 14.0, 1.0, 0.0, 7.0, 2.0, 14.0, 1.0, 0.0, 7.0, 2.0, 19.0, 1.0, 0.0, 7.0, 5.0, 14.0, 1.0, 0.0, 7.0, 4.0, 13.0, 1.0, 0.0, 7.0, 6.0, 14.0, 1.0, 0.0, 7.0, 6.0, 13.0, 1.0, 0.0, 7.0, 5.0, 12.0, 1.0, 0.0, 7.0, 4.0, 12.0, 1.0, 0.0, 7.0, 6.0, 12.0, 1.0, 0.0, 7.0, 4.0, 11.0, 1.0, 0.0, 7.0, 3.0, 11.0, 1.0, 0.0, 7.0, 3.0, 12.0, 1.0, 0.0, 7.0, 4.0, 10.0, 1.0, 0.0, 7.0, 3.0, 10.0, 1.0, 0.0, 7.0, 2.0, 12.0, 1.0, 0.0, 7.0, 2.0, 11.0, 1.0, 0.0, 7.0, 4.0, 9.0, 1.0, 0.0, 7.0, 3.0, 9.0, 1.0, 0.0, 7.0, 2.0, 9.0, 1.0, 0.0, 7.0, 7.0, 13.0, 1.0, 0.0, 7.0, 2.0, 8.0, 1.0, 0.0, 7.0, 3.0, 13.0, 1.0, 0.0, 7.0, 2.0, 13.0, 1.0, 0.0, 7.0, 5.0, 13.0, 1.0, 0.0, 7.0, 2.0, 18.0, 1.0, 0.0, 7.0, 3.0, 14.0, 1.0, 0.0, 7.0, 3.0, 18.0, 1.0, 0.0, 7.0, 8.0, 13.0, 1.0, 0.0, 7.0, 8.0, 12.0, 1.0, 0.0, 7.0, 3.0, 7.0, 1.0, 0.0, 7.0, 8.0, 14.0, 1.0, 0.0, 7.0, 4.0, 8.0, 1.0, 0.0, 7.0, 3.0, 8.0, 1.0, 0.0, 7.0, 9.0, 13.0, 1.0, 0.0, 7.0, 4.0, 6.0, 1.0, 0.0, 7.0, 3.0, 6.0, 1.0, 0.0, 7.0, 2.0, 6.0, 1.0, 0.0, 7.0, 10.0, 13.0, 1.0, 0.0, 7.0, 10.0, 12.0, 1.0, 0.0, 7.0, 3.0, 5.0, 1.0, 0.0, 7.0, 2.0, 5.0, 1.0, 0.0, 7.0, 4.0, 5.0, 1.0, 0.0, 7.0, 4.0, 4.0, 1.0, 0.0, 7.0, 3.0, 4.0, 1.0, 0.0, 7.0, 2.0, 4.0, 1.0, 0.0, 7.0, 11.0, 14.0, 1.0, 0.0, 7.0, 11.0, 13.0, 1.0, 0.0, 7.0, 11.0, 12.0, 1.0, 0.0, 7.0, 12.0, 14.0, 1.0, 0.0, 7.0, 12.0, 13.0, 1.0, 0.0, 7.0, 12.0, 12.0, 1.0, 0.0, 7.0, 13.0, 14.0, 1.0, 0.0, 7.0, 13.0, 13.0, 1.0, 0.0, 7.0, 13.0, 12.0, 1.0, 0.0, 7.0, 9.0, 12.0, 1.0, 0.0, 7.0, 10.0, 14.0, 1.0, 0.0, 7.0, 9.0, 14.0, 1.0, 91.0, 8.0, 1.0, -1.0, 4.0, 4.0, 0.0]
    expected_corresponding_surface_cell_lat_index::Field{Int64} = LatLonField{Int64}(lake_grid,
                                                    Int64[   1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ])
  expected_corresponding_surface_cell_lon_index::Field{Int64} = LatLonField{Int64}(lake_grid,
                                                      Int64[ 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 ])
  expected_number_fine_grid_cells::Field{Int64} = LatLonField{Int64}(surface_model_grid,
        Int64[ 36 48 36
               48 64 48
               36 48 36  ])
  expected_surface_cell_to_fine_cell_maps::Vector{Vector{CartesianIndex}} =
    Vector{CartesianIndex}[
      CartesianIndex[CartesianIndex(3, 2),CartesianIndex(4,2),CartesianIndex(5,2),CartesianIndex(6,2),CartesianIndex(2,4),CartesianIndex(3,4),CartesianIndex(4,4),CartesianIndex(2,5),CartesianIndex(3,5),CartesianIndex(4,5),CartesianIndex(2,6),CartesianIndex(3,6),CartesianIndex(4,6)],
      CartesianIndex[CartesianIndex(7,2),CartesianIndex(8,2),CartesianIndex(9,2),CartesianIndex(10,2),CartesianIndex(11,2),CartesianIndex(12,2),CartesianIndex(13,2),CartesianIndex(14,2)],
      CartesianIndex[CartesianIndex(15,2),CartesianIndex(16,2),CartesianIndex(17,2),CartesianIndex(18,2),CartesianIndex(15,3),CartesianIndex(16,3),CartesianIndex(17,3),CartesianIndex(18,3),CartesianIndex(15,4),CartesianIndex(16,4),CartesianIndex(17,4),CartesianIndex(18,4),CartesianIndex(15,5),CartesianIndex(16,5),CartesianIndex(17,5),CartesianIndex(18,5),CartesianIndex(15,6),CartesianIndex(16,6),CartesianIndex(17,6),CartesianIndex(18,6)],
      CartesianIndex[CartesianIndex(3,7),CartesianIndex(2,8),CartesianIndex(3,8),CartesianIndex(4,8),CartesianIndex(2,9),CartesianIndex(3,9),CartesianIndex(4,9),CartesianIndex(3,10),CartesianIndex(4,10),CartesianIndex(2,11),CartesianIndex(3,11),CartesianIndex(4,11),CartesianIndex(2,12),CartesianIndex(3,12),CartesianIndex(4,12),CartesianIndex(5,12),CartesianIndex(6,12),CartesianIndex(2,13),CartesianIndex(3,13),CartesianIndex(4,13),CartesianIndex(5,13),CartesianIndex(6,13),CartesianIndex(2,14),CartesianIndex(3,14),CartesianIndex(4,14),CartesianIndex(5,14),CartesianIndex(6,14)],
      CartesianIndex[CartesianIndex(15,7),CartesianIndex(16,7),CartesianIndex(17,7),CartesianIndex(18,7),CartesianIndex(15,8),CartesianIndex(16,8),CartesianIndex(17,8),CartesianIndex(18,8),CartesianIndex(15,9),CartesianIndex(16,9),CartesianIndex(17,9),CartesianIndex(18,9),CartesianIndex(15,10),CartesianIndex(16,10),CartesianIndex(17,10),CartesianIndex(18,10),CartesianIndex(16,11),CartesianIndex(17,11),CartesianIndex(18,11),CartesianIndex(16,12),CartesianIndex(17,12),CartesianIndex(18,12),CartesianIndex(16,13),CartesianIndex(17,13),CartesianIndex(18,13)],
      CartesianIndex[CartesianIndex(8,12),CartesianIndex(9,12),CartesianIndex(10,12),CartesianIndex(11,12),CartesianIndex(12,12),CartesianIndex(13,12),CartesianIndex(7,13),CartesianIndex(8,13),CartesianIndex(9,13),CartesianIndex(10,13),CartesianIndex(11,13),CartesianIndex(12,13),CartesianIndex(13,13),CartesianIndex(8,14),CartesianIndex(9,14),CartesianIndex(10,14),CartesianIndex(11,14),CartesianIndex(12,14),CartesianIndex(13,14)],
      CartesianIndex[CartesianIndex(3,15),CartesianIndex(3,16),CartesianIndex(2,17),CartesianIndex(3,17),CartesianIndex(4,17),CartesianIndex(5,17),CartesianIndex(2,18),CartesianIndex(3,18),CartesianIndex(4,18),CartesianIndex(5,18),CartesianIndex(6,18),CartesianIndex(2,19),CartesianIndex(3,19),CartesianIndex(4,19),CartesianIndex(5,19)],
      CartesianIndex[CartesianIndex(7,17),CartesianIndex(8,17),CartesianIndex(9,17),CartesianIndex(10,17),CartesianIndex(11,17),CartesianIndex(12,17),CartesianIndex(13,17),CartesianIndex(7,18),CartesianIndex(8,18),CartesianIndex(9,18),CartesianIndex(10,18),CartesianIndex(11,18),CartesianIndex(12,18),CartesianIndex(13,18),CartesianIndex(7,19),CartesianIndex(8,19),CartesianIndex(9,19),CartesianIndex(10,19),CartesianIndex(11,19),CartesianIndex(12,19),CartesianIndex(13,19)]]
  expected_surface_cell_to_fine_cell_map_numbers::Field{Int64} = LatLonField{Int64}(surface_model_grid,
        Int64[ 1 4 7
               2 6 8
               3 5 0  ])
  lake_model_parameters::LakeModelParameters,
    lake_parameters_as_array::Vector{Float64} =
    load_lake_parameters(lake_para_filepath,
                         cell_areas_on_surface_model_grid,
                         false,
                         lake_grid,
                         hd_grid,
                         surface_model_grid)
  @test lake_parameters_as_array == expected_lake_parameters_as_array
  @test lake_model_parameters.grid_specific_lake_model_parameters.corresponding_surface_cell_lat_index ==
        expected_corresponding_surface_cell_lat_index
  @test lake_model_parameters.grid_specific_lake_model_parameters.corresponding_surface_cell_lon_index ==
        expected_corresponding_surface_cell_lon_index
  @test lake_model_parameters.number_of_lakes == 12
  @test lake_model_parameters.basins == Vector{Int64}[]
  @test lake_model_parameters.basin_numbers == LatLonField{Int64}(hd_grid,0)
  @test lake_model_parameters.cells_with_lakes ==CartesianIndex[]
  @test lake_model_parameters.cell_areas_on_surface_model_grid == cell_areas_on_surface_model_grid
  @test lake_model_parameters.lake_centers == LatLonField{Bool}(lake_grid,false)
  @test lake_model_parameters.number_fine_grid_cells == expected_number_fine_grid_cells
  @test lake_model_parameters.surface_cell_to_fine_cell_maps == expected_surface_cell_to_fine_cell_maps
  @test lake_model_parameters.surface_cell_to_fine_cell_map_numbers == expected_surface_cell_to_fine_cell_map_numbers
  @test lake_model_parameters.binary_lake_mask == LatLonField{Bool}(surface_model_grid,false)
end

@testset "Lake Input Tests 2" begin
  #With binary mask
  lake_para_filepath =
    "/Users/thomasriddick/Documents/data/temp/l2_lake_model_para_with_mask.nc"
  lake_grid::Grid = LatLonGrid(20,20,true)
  hd_grid::Grid = LatLonGrid(4,4,true)
  surface_model_grid::Grid = LatLonGrid(3,3,true)
  cell_areas_on_surface_model_grid::Field{Float64} =
    LatLonField{Float64}(surface_model_grid,Float64[ 2.5 3.0 2.5
                                                     3.0 4.0 3.0
                                                     2.5 3.0 2.5 ])
  expected_lake_parameters_as_array::Vector{Float64} = Float64[12.0, 236.0, 1.0, 8.0, 0.0, 15.0, 2.0, 45.0, 15.0, 2.0, 1.0, 0.0, 6.0, 16.0, 3.0, 1.0, 0.0, 6.0, 15.0, 3.0, 1.0, 0.0, 6.0, 16.0, 4.0, 1.0, 0.0, 6.0, 16.0, 2.0, 1.0, 0.0, 6.0, 17.0, 4.0, 1.0, 0.0, 6.0, 15.0, 5.0, 1.0, 0.0, 6.0, 16.0, 5.0, 1.0, 0.0, 6.0, 18.0, 3.0, 1.0, 0.0, 6.0, 16.0, 6.0, 1.0, 0.0, 6.0, 17.0, 6.0, 1.0, 0.0, 6.0, 15.0, 6.0, 1.0, 0.0, 6.0, 18.0, 2.0, 1.0, 0.0, 6.0, 15.0, 7.0, 1.0, 0.0, 6.0, 18.0, 6.0, 1.0, 0.0, 6.0, 18.0, 7.0, 1.0, 0.0, 6.0, 15.0, 4.0, 1.0, 0.0, 6.0, 18.0, 8.0, 1.0, 0.0, 6.0, 17.0, 8.0, 1.0, 0.0, 6.0, 18.0, 9.0, 1.0, 0.0, 6.0, 17.0, 9.0, 1.0, 0.0, 6.0, 16.0, 9.0, 1.0, 0.0, 6.0, 18.0, 10.0, 1.0, 0.0, 6.0, 17.0, 10.0, 1.0, 0.0, 6.0, 16.0, 10.0, 1.0, 0.0, 6.0, 15.0, 9.0, 1.0, 0.0, 6.0, 18.0, 11.0, 1.0, 0.0, 6.0, 15.0, 10.0, 1.0, 0.0, 6.0, 17.0, 2.0, 1.0, 0.0, 6.0, 18.0, 4.0, 1.0, 0.0, 6.0, 18.0, 5.0, 1.0, 0.0, 6.0, 15.0, 8.0, 1.0, 0.0, 6.0, 17.0, 12.0, 1.0, 0.0, 6.0, 16.0, 8.0, 1.0, 0.0, 6.0, 18.0, 13.0, 1.0, 0.0, 6.0, 16.0, 12.0, 1.0, 0.0, 6.0, 16.0, 13.0, 1.0, 0.0, 6.0, 17.0, 3.0, 1.0, 0.0, 6.0, 17.0, 5.0, 1.0, 0.0, 6.0, 16.0, 7.0, 1.0, 0.0, 6.0, 17.0, 7.0, 1.0, 0.0, 6.0, 17.0, 11.0, 1.0, 0.0, 6.0, 18.0, 12.0, 1.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 6.0, 17.0, 13.0, 1.0, 45.0, 7.0, 1.0, 4.0, 3.0, 1.0, 0.0, 116.0, 2.0, 9.0, 0.0, 8.0, 17.0, 21.0, 8.0, 17.0, 1.0, 0.0, 3.0, 9.0, 18.0, 1.0, 0.0, 3.0, 7.0, 18.0, 1.0, 0.0, 3.0, 10.0, 17.0, 1.0, 0.0, 3.0, 7.0, 17.0, 1.0, 0.0, 3.0, 8.0, 19.0, 1.0, 0.0, 3.0, 11.0, 18.0, 1.0, 0.0, 3.0, 7.0, 19.0, 1.0, 0.0, 3.0, 8.0, 18.0, 1.0, 0.0, 3.0, 10.0, 19.0, 1.0, 0.0, 3.0, 9.0, 17.0, 1.0, 0.0, 3.0, 12.0, 18.0, 1.0, 0.0, 3.0, 12.0, 17.0, 1.0, 0.0, 3.0, 13.0, 17.0, 1.0, 0.0, 3.0, 12.0, 19.0, 1.0, 0.0, 3.0, 11.0, 19.0, 1.0, 0.0, 3.0, 13.0, 19.0, 1.0, 0.0, 3.0, 13.0, 18.0, 1.0, 0.0, 3.0, 10.0, 18.0, 1.0, 0.0, 3.0, 9.0, 19.0, 1.0, 0.0, 3.0, 11.0, 17.0, 1.0, 63.0, 6.0, 1.0, 5.0, -1.0, -1.0, 1.0, 101.0, 3.0, 10.0, 0.0, 8.0, 12.0, 18.0, 8.0, 12.0, 1.0, 0.0, 4.0, 9.0, 13.0, 1.0, 0.0, 4.0, 8.0, 13.0, 1.0, 0.0, 4.0, 10.0, 12.0, 1.0, 0.0, 4.0, 9.0, 12.0, 1.0, 0.0, 4.0, 11.0, 13.0, 1.0, 0.0, 4.0, 11.0, 12.0, 1.0, 0.0, 4.0, 12.0, 14.0, 1.0, 0.0, 4.0, 11.0, 14.0, 1.0, 0.0, 4.0, 12.0, 12.0, 1.0, 0.0, 4.0, 13.0, 13.0, 1.0, 0.0, 4.0, 8.0, 14.0, 1.0, 0.0, 4.0, 10.0, 14.0, 1.0, 0.0, 4.0, 9.0, 14.0, 1.0, 0.0, 4.0, 13.0, 14.0, 1.0, 0.0, 4.0, 13.0, 12.0, 1.0, 0.0, 4.0, 10.0, 13.0, 1.0, 0.0, 4.0, 12.0, 13.0, 1.0, 18.0, 5.0, 1.0, 6.0, 2.0, 3.0, 0.0, 66.0, 4.0, 8.0, 0.0, 3.0, 2.0, 11.0, 3.0, 2.0, 1.0, 0.0, 1.0, 4.0, 2.0, 1.0, 0.0, 1.0, 5.0, 2.0, 1.0, 0.0, 1.0, 6.0, 2.0, 1.0, 0.0, 1.0, 7.0, 2.0, 1.0, 0.0, 1.0, 8.0, 2.0, 1.0, 0.0, 1.0, 9.0, 2.0, 1.0, 0.0, 1.0, 10.0, 2.0, 1.0, 0.0, 1.0, 11.0, 2.0, 1.0, 0.0, 1.0, 12.0, 2.0, 1.0, 0.0, 1.0, 13.0, 2.0, 1.0, 66.0, 7.0, 1.0, 1.0, -1.0, -1.0, 1.0, 71.0, 5.0, 9.0, 0.0, 2.0, 17.0, 12.0, 2.0, 17.0, 1.0, 0.0, 2.0, 3.0, 18.0, 1.0, 0.0, 2.0, 2.0, 18.0, 1.0, 0.0, 2.0, 4.0, 17.0, 1.0, 0.0, 2.0, 3.0, 17.0, 1.0, 0.0, 2.0, 5.0, 18.0, 1.0, 0.0, 2.0, 5.0, 17.0, 1.0, 0.0, 2.0, 5.0, 19.0, 1.0, 0.0, 2.0, 2.0, 19.0, 1.0, 0.0, 2.0, 4.0, 19.0, 1.0, 0.0, 2.0, 3.0, 19.0, 1.0, 0.0, 2.0, 4.0, 18.0, 1.0, 48.0, 6.0, 1.0, 2.0, -1.0, -1.0, 1.0, 141.0, 6.0, 10.0, 0.0, 2.0, 8.0, 26.0, 2.0, 8.0, 1.0, 0.0, 1.0, 3.0, 9.0, 1.0, 0.0, 1.0, 2.0, 9.0, 1.0, 0.0, 1.0, 4.0, 8.0, 1.0, 0.0, 1.0, 3.0, 8.0, 1.0, 0.0, 1.0, 4.0, 10.0, 1.0, 0.0, 1.0, 3.0, 10.0, 1.0, 0.0, 1.0, 4.0, 11.0, 1.0, 0.0, 1.0, 4.0, 9.0, 1.0, 0.0, 1.0, 3.0, 11.0, 1.0, 0.0, 1.0, 2.0, 11.0, 1.0, 0.0, 1.0, 4.0, 12.0, 1.0, 0.0, 1.0, 3.0, 12.0, 1.0, 0.0, 1.0, 2.0, 12.0, 1.0, 0.0, 1.0, 4.0, 13.0, 1.0, 0.0, 1.0, 3.0, 13.0, 1.0, 0.0, 1.0, 2.0, 13.0, 1.0, 0.0, 1.0, 5.0, 14.0, 1.0, 0.0, 1.0, 4.0, 14.0, 1.0, 0.0, 1.0, 6.0, 14.0, 1.0, 0.0, 1.0, 6.0, 13.0, 1.0, 0.0, 1.0, 3.0, 14.0, 1.0, 0.0, 1.0, 6.0, 12.0, 1.0, 0.0, 1.0, 2.0, 14.0, 1.0, 0.0, 1.0, 5.0, 12.0, 1.0, 0.0, 1.0, 5.0, 13.0, 1.0, 104.0, 5.0, 1.0, 3.0, -1.0, -1.0, 1.0, 56.0, 7.0, 11.0, 0.0, 2.0, 4.0, 9.0, 2.0, 4.0, 1.0, 0.0, 3.0, 3.0, 5.0, 1.0, 0.0, 3.0, 2.0, 5.0, 1.0, 0.0, 3.0, 4.0, 6.0, 1.0, 0.0, 3.0, 4.0, 5.0, 1.0, 0.0, 3.0, 3.0, 4.0, 1.0, 0.0, 3.0, 3.0, 6.0, 1.0, 0.0, 3.0, 4.0, 4.0, 1.0, 0.0, 3.0, 2.0, 6.0, 1.0, 27.0, 6.0, 1.0, 10.0, 1.0, 2.0, 0.0, 298.0, 8.0, -1.0, 2.0, 1.0, 4.0, 15.0, 2.0, 57.0, 15.0, 2.0, 1.0, 0.0, 7.0, 16.0, 3.0, 1.0, 0.0, 7.0, 15.0, 3.0, 1.0, 0.0, 7.0, 14.0, 2.0, 2.0, 0.0, 7.0, 16.0, 4.0, 1.0, 0.0, 7.0, 16.0, 2.0, 1.0, 0.0, 7.0, 17.0, 3.0, 1.0, 0.0, 7.0, 16.0, 5.0, 1.0, 0.0, 7.0, 15.0, 5.0, 1.0, 0.0, 7.0, 18.0, 3.0, 1.0, 0.0, 7.0, 18.0, 2.0, 1.0, 0.0, 7.0, 17.0, 6.0, 1.0, 0.0, 7.0, 15.0, 6.0, 1.0, 0.0, 7.0, 18.0, 4.0, 1.0, 0.0, 7.0, 18.0, 5.0, 1.0, 0.0, 7.0, 15.0, 4.0, 1.0, 0.0, 7.0, 17.0, 2.0, 1.0, 0.0, 7.0, 17.0, 5.0, 1.0, 0.0, 7.0, 15.0, 7.0, 1.0, 0.0, 7.0, 18.0, 6.0, 1.0, 0.0, 7.0, 13.0, 2.0, 1.0, 0.0, 7.0, 16.0, 7.0, 1.0, 0.0, 7.0, 12.0, 2.0, 1.0, 0.0, 7.0, 17.0, 8.0, 1.0, 0.0, 7.0, 11.0, 2.0, 1.0, 0.0, 7.0, 18.0, 9.0, 1.0, 0.0, 7.0, 17.0, 9.0, 1.0, 0.0, 7.0, 18.0, 8.0, 1.0, 0.0, 7.0, 10.0, 2.0, 1.0, 0.0, 7.0, 16.0, 9.0, 1.0, 0.0, 7.0, 15.0, 8.0, 1.0, 0.0, 7.0, 17.0, 7.0, 1.0, 0.0, 7.0, 16.0, 8.0, 1.0, 0.0, 7.0, 17.0, 4.0, 1.0, 0.0, 7.0, 18.0, 7.0, 1.0, 0.0, 7.0, 15.0, 9.0, 1.0, 0.0, 7.0, 16.0, 10.0, 1.0, 0.0, 7.0, 9.0, 2.0, 1.0, 0.0, 7.0, 15.0, 10.0, 1.0, 0.0, 7.0, 16.0, 6.0, 1.0, 0.0, 7.0, 17.0, 10.0, 1.0, 0.0, 7.0, 8.0, 2.0, 1.0, 0.0, 7.0, 17.0, 11.0, 1.0, 0.0, 7.0, 16.0, 11.0, 1.0, 0.0, 7.0, 18.0, 11.0, 1.0, 0.0, 7.0, 17.0, 12.0, 1.0, 0.0, 7.0, 16.0, 12.0, 1.0, 0.0, 7.0, 7.0, 2.0, 1.0, 0.0, 7.0, 18.0, 13.0, 1.0, 0.0, 7.0, 16.0, 13.0, 1.0, 0.0, 7.0, 17.0, 13.0, 1.0, 0.0, 7.0, 6.0, 2.0, 1.0, 0.0, 7.0, 18.0, 12.0, 1.0, 0.0, 7.0, 5.0, 2.0, 1.0, 0.0, 7.0, 18.0, 10.0, 1.0, 0.0, 7.0, 4.0, 2.0, 1.0, 0.0, 7.0, 3.0, 2.0, 1.0, 56.0, 8.0, 1.0, -1.0, 4.0, 4.0, 0.0, 183.0, 9.0, 12.0, 2.0, 2.0, 5.0, 8.0, 17.0, 34.0, 8.0, 17.0, 1.0, 0.0, 6.0, 9.0, 18.0, 1.0, 0.0, 6.0, 7.0, 18.0, 1.0, 0.0, 6.0, 10.0, 17.0, 1.0, 0.0, 6.0, 7.0, 17.0, 1.0, 0.0, 6.0, 8.0, 19.0, 1.0, 0.0, 6.0, 6.0, 18.0, 1.0, 0.0, 6.0, 11.0, 18.0, 1.0, 0.0, 6.0, 7.0, 19.0, 1.0, 0.0, 6.0, 5.0, 17.0, 1.0, 0.0, 6.0, 12.0, 18.0, 1.0, 0.0, 6.0, 12.0, 17.0, 1.0, 0.0, 6.0, 4.0, 18.0, 1.0, 0.0, 6.0, 13.0, 19.0, 1.0, 0.0, 6.0, 13.0, 17.0, 1.0, 0.0, 6.0, 13.0, 18.0, 1.0, 0.0, 6.0, 4.0, 19.0, 1.0, 0.0, 6.0, 4.0, 17.0, 1.0, 0.0, 6.0, 8.0, 18.0, 1.0, 0.0, 6.0, 10.0, 19.0, 1.0, 0.0, 6.0, 9.0, 17.0, 1.0, 0.0, 6.0, 11.0, 19.0, 1.0, 0.0, 6.0, 12.0, 19.0, 1.0, 0.0, 6.0, 5.0, 19.0, 1.0, 0.0, 6.0, 5.0, 18.0, 1.0, 0.0, 6.0, 10.0, 18.0, 1.0, 0.0, 6.0, 9.0, 19.0, 1.0, 0.0, 6.0, 11.0, 17.0, 1.0, 0.0, 6.0, 3.0, 17.0, 1.0, 0.0, 6.0, 3.0, 19.0, 1.0, 0.0, 6.0, 3.0, 18.0, 1.0, 0.0, 6.0, 2.0, 18.0, 1.0, 0.0, 6.0, 2.0, 17.0, 1.0, 0.0, 6.0, 2.0, 19.0, 1.0, 34.0, 7.0, 1.0, 11.0, 1.0, 3.0, 0.0, 238.0, 10.0, 11.0, 2.0, 3.0, 6.0, 8.0, 12.0, 45.0, 8.0, 12.0, 1.0, 0.0, 5.0, 9.0, 13.0, 1.0, 0.0, 5.0, 7.0, 13.0, 1.0, 0.0, 5.0, 10.0, 12.0, 1.0, 0.0, 5.0, 8.0, 13.0, 1.0, 0.0, 5.0, 8.0, 14.0, 1.0, 0.0, 5.0, 6.0, 13.0, 1.0, 0.0, 5.0, 11.0, 13.0, 1.0, 0.0, 5.0, 6.0, 12.0, 1.0, 0.0, 5.0, 6.0, 14.0, 1.0, 0.0, 5.0, 5.0, 12.0, 1.0, 0.0, 5.0, 12.0, 12.0, 1.0, 0.0, 5.0, 4.0, 13.0, 1.0, 0.0, 5.0, 4.0, 11.0, 1.0, 0.0, 5.0, 13.0, 13.0, 1.0, 0.0, 5.0, 13.0, 12.0, 1.0, 0.0, 5.0, 4.0, 14.0, 1.0, 0.0, 5.0, 3.0, 10.0, 1.0, 0.0, 5.0, 4.0, 12.0, 1.0, 0.0, 5.0, 10.0, 13.0, 1.0, 0.0, 5.0, 10.0, 14.0, 1.0, 0.0, 5.0, 9.0, 14.0, 1.0, 0.0, 5.0, 12.0, 13.0, 1.0, 0.0, 5.0, 2.0, 9.0, 1.0, 0.0, 5.0, 3.0, 9.0, 1.0, 0.0, 5.0, 11.0, 14.0, 1.0, 0.0, 5.0, 5.0, 13.0, 1.0, 0.0, 5.0, 12.0, 14.0, 1.0, 0.0, 5.0, 4.0, 8.0, 1.0, 0.0, 5.0, 3.0, 8.0, 1.0, 0.0, 5.0, 2.0, 8.0, 1.0, 0.0, 5.0, 4.0, 9.0, 1.0, 0.0, 5.0, 9.0, 12.0, 1.0, 0.0, 5.0, 5.0, 14.0, 1.0, 0.0, 5.0, 2.0, 11.0, 1.0, 0.0, 5.0, 4.0, 10.0, 1.0, 0.0, 5.0, 13.0, 14.0, 1.0, 0.0, 5.0, 2.0, 12.0, 1.0, 0.0, 5.0, 11.0, 12.0, 1.0, 0.0, 5.0, 3.0, 12.0, 1.0, 0.0, 5.0, 2.0, 13.0, 1.0, 0.0, 5.0, 3.0, 11.0, 1.0, 0.0, 5.0, 3.0, 14.0, 1.0, 0.0, 5.0, 2.0, 14.0, 1.0, 0.0, 5.0, 3.0, 13.0, 1.0, 45.0, 6.0, 1.0, 7.0, 1.0, 2.0, 0.0, 288.0, 11.0, 12.0, 2.0, 10.0, 7.0, 8.0, 12.0, 55.0, 8.0, 12.0, 1.0, 0.0, 6.0, 9.0, 13.0, 1.0, 0.0, 6.0, 7.0, 13.0, 1.0, 0.0, 6.0, 10.0, 12.0, 1.0, 0.0, 6.0, 8.0, 13.0, 1.0, 0.0, 6.0, 8.0, 14.0, 1.0, 0.0, 6.0, 6.0, 13.0, 1.0, 0.0, 6.0, 11.0, 13.0, 1.0, 0.0, 6.0, 6.0, 12.0, 1.0, 0.0, 6.0, 6.0, 14.0, 1.0, 0.0, 6.0, 5.0, 12.0, 1.0, 0.0, 6.0, 12.0, 12.0, 1.0, 0.0, 6.0, 4.0, 13.0, 1.0, 0.0, 6.0, 4.0, 11.0, 1.0, 0.0, 6.0, 13.0, 13.0, 1.0, 0.0, 6.0, 13.0, 12.0, 1.0, 0.0, 6.0, 4.0, 14.0, 1.0, 0.0, 6.0, 3.0, 10.0, 1.0, 0.0, 6.0, 4.0, 12.0, 1.0, 0.0, 6.0, 10.0, 13.0, 1.0, 0.0, 6.0, 10.0, 14.0, 1.0, 0.0, 6.0, 9.0, 14.0, 1.0, 0.0, 6.0, 12.0, 13.0, 1.0, 0.0, 6.0, 2.0, 9.0, 1.0, 0.0, 6.0, 3.0, 9.0, 1.0, 0.0, 6.0, 11.0, 14.0, 1.0, 0.0, 6.0, 5.0, 13.0, 1.0, 0.0, 6.0, 12.0, 14.0, 1.0, 0.0, 6.0, 4.0, 8.0, 1.0, 0.0, 6.0, 3.0, 8.0, 1.0, 0.0, 6.0, 2.0, 8.0, 1.0, 0.0, 6.0, 4.0, 9.0, 1.0, 0.0, 6.0, 3.0, 7.0, 1.0, 0.0, 6.0, 9.0, 12.0, 1.0, 0.0, 6.0, 2.0, 6.0, 1.0, 0.0, 6.0, 5.0, 14.0, 1.0, 0.0, 6.0, 3.0, 5.0, 1.0, 0.0, 6.0, 2.0, 5.0, 1.0, 0.0, 6.0, 4.0, 5.0, 1.0, 0.0, 6.0, 4.0, 4.0, 1.0, 0.0, 6.0, 2.0, 4.0, 1.0, 0.0, 6.0, 3.0, 4.0, 1.0, 0.0, 6.0, 4.0, 6.0, 1.0, 0.0, 6.0, 3.0, 6.0, 1.0, 0.0, 6.0, 2.0, 11.0, 1.0, 0.0, 6.0, 4.0, 10.0, 1.0, 0.0, 6.0, 2.0, 12.0, 1.0, 0.0, 6.0, 13.0, 14.0, 1.0, 0.0, 6.0, 2.0, 13.0, 1.0, 0.0, 6.0, 11.0, 12.0, 1.0, 0.0, 6.0, 2.0, 14.0, 1.0, 0.0, 6.0, 3.0, 12.0, 1.0, 0.0, 6.0, 3.0, 11.0, 1.0, 0.0, 6.0, 3.0, 14.0, 1.0, 0.0, 6.0, 3.0, 13.0, 1.0, 55.0, 7.0, 1.0, 9.0, 1.0, 4.0, 0.0, 468.0, 12.0, -1.0, 2.0, 9.0, 11.0, 8.0, 17.0, 91.0, 8.0, 17.0, 1.0, 0.0, 7.0, 9.0, 18.0, 1.0, 0.0, 7.0, 7.0, 18.0, 1.0, 0.0, 7.0, 10.0, 17.0, 1.0, 0.0, 7.0, 7.0, 17.0, 1.0, 0.0, 7.0, 8.0, 19.0, 1.0, 0.0, 7.0, 6.0, 18.0, 1.0, 0.0, 7.0, 11.0, 18.0, 1.0, 0.0, 7.0, 7.0, 19.0, 1.0, 0.0, 7.0, 5.0, 17.0, 1.0, 0.0, 7.0, 12.0, 18.0, 1.0, 0.0, 7.0, 12.0, 17.0, 1.0, 0.0, 7.0, 4.0, 18.0, 1.0, 0.0, 7.0, 13.0, 19.0, 1.0, 0.0, 7.0, 13.0, 17.0, 1.0, 0.0, 7.0, 13.0, 18.0, 1.0, 0.0, 7.0, 4.0, 19.0, 1.0, 0.0, 7.0, 4.0, 17.0, 1.0, 0.0, 7.0, 8.0, 18.0, 1.0, 0.0, 7.0, 10.0, 19.0, 1.0, 0.0, 7.0, 9.0, 17.0, 1.0, 0.0, 7.0, 11.0, 19.0, 1.0, 0.0, 7.0, 12.0, 19.0, 1.0, 0.0, 7.0, 5.0, 19.0, 1.0, 0.0, 7.0, 5.0, 18.0, 1.0, 0.0, 7.0, 3.0, 16.0, 1.0, 0.0, 7.0, 10.0, 18.0, 1.0, 0.0, 7.0, 9.0, 19.0, 1.0, 0.0, 7.0, 11.0, 17.0, 1.0, 0.0, 7.0, 3.0, 15.0, 1.0, 0.0, 7.0, 3.0, 17.0, 1.0, 0.0, 7.0, 2.0, 17.0, 1.0, 0.0, 7.0, 3.0, 19.0, 1.0, 0.0, 7.0, 4.0, 14.0, 1.0, 0.0, 7.0, 2.0, 14.0, 1.0, 0.0, 7.0, 2.0, 19.0, 1.0, 0.0, 7.0, 5.0, 14.0, 1.0, 0.0, 7.0, 4.0, 13.0, 1.0, 0.0, 7.0, 6.0, 14.0, 1.0, 0.0, 7.0, 6.0, 13.0, 1.0, 0.0, 7.0, 5.0, 12.0, 1.0, 0.0, 7.0, 4.0, 12.0, 1.0, 0.0, 7.0, 6.0, 12.0, 1.0, 0.0, 7.0, 4.0, 11.0, 1.0, 0.0, 7.0, 3.0, 11.0, 1.0, 0.0, 7.0, 3.0, 12.0, 1.0, 0.0, 7.0, 4.0, 10.0, 1.0, 0.0, 7.0, 3.0, 10.0, 1.0, 0.0, 7.0, 2.0, 12.0, 1.0, 0.0, 7.0, 2.0, 11.0, 1.0, 0.0, 7.0, 4.0, 9.0, 1.0, 0.0, 7.0, 3.0, 9.0, 1.0, 0.0, 7.0, 2.0, 9.0, 1.0, 0.0, 7.0, 7.0, 13.0, 1.0, 0.0, 7.0, 2.0, 8.0, 1.0, 0.0, 7.0, 3.0, 13.0, 1.0, 0.0, 7.0, 2.0, 13.0, 1.0, 0.0, 7.0, 5.0, 13.0, 1.0, 0.0, 7.0, 2.0, 18.0, 1.0, 0.0, 7.0, 3.0, 14.0, 1.0, 0.0, 7.0, 3.0, 18.0, 1.0, 0.0, 7.0, 8.0, 13.0, 1.0, 0.0, 7.0, 8.0, 12.0, 1.0, 0.0, 7.0, 3.0, 7.0, 1.0, 0.0, 7.0, 8.0, 14.0, 1.0, 0.0, 7.0, 4.0, 8.0, 1.0, 0.0, 7.0, 3.0, 8.0, 1.0, 0.0, 7.0, 9.0, 13.0, 1.0, 0.0, 7.0, 4.0, 6.0, 1.0, 0.0, 7.0, 3.0, 6.0, 1.0, 0.0, 7.0, 2.0, 6.0, 1.0, 0.0, 7.0, 10.0, 13.0, 1.0, 0.0, 7.0, 10.0, 12.0, 1.0, 0.0, 7.0, 3.0, 5.0, 1.0, 0.0, 7.0, 2.0, 5.0, 1.0, 0.0, 7.0, 4.0, 5.0, 1.0, 0.0, 7.0, 4.0, 4.0, 1.0, 0.0, 7.0, 3.0, 4.0, 1.0, 0.0, 7.0, 2.0, 4.0, 1.0, 0.0, 7.0, 11.0, 14.0, 1.0, 0.0, 7.0, 11.0, 13.0, 1.0, 0.0, 7.0, 11.0, 12.0, 1.0, 0.0, 7.0, 12.0, 14.0, 1.0, 0.0, 7.0, 12.0, 13.0, 1.0, 0.0, 7.0, 12.0, 12.0, 1.0, 0.0, 7.0, 13.0, 14.0, 1.0, 0.0, 7.0, 13.0, 13.0, 1.0, 0.0, 7.0, 13.0, 12.0, 1.0, 0.0, 7.0, 9.0, 12.0, 1.0, 0.0, 7.0, 10.0, 14.0, 1.0, 0.0, 7.0, 9.0, 14.0, 1.0, 91.0, 8.0, 1.0, -1.0, 4.0, 4.0, 0.0]
    expected_corresponding_surface_cell_lat_index::Field{Int64} = LatLonField{Int64}(lake_grid,
                                                    Int64[   1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
                                                             3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ])
  expected_corresponding_surface_cell_lon_index::Field{Int64} = LatLonField{Int64}(lake_grid,
                                                      Int64[ 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3
                                                             1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 ])
  expected_number_fine_grid_cells::Field{Int64} = LatLonField{Int64}(surface_model_grid,
        Int64[ 36 48 36
               48 64 48
               36 48 36  ])
  expected_surface_cell_to_fine_cell_maps::Vector{Vector{CartesianIndex}} =
    Vector{CartesianIndex}[
      CartesianIndex[CartesianIndex(3, 2),CartesianIndex(4,2),CartesianIndex(5,2),CartesianIndex(6,2),CartesianIndex(2,4),CartesianIndex(3,4),CartesianIndex(4,4),CartesianIndex(2,5),CartesianIndex(3,5),CartesianIndex(4,5),CartesianIndex(2,6),CartesianIndex(3,6),CartesianIndex(4,6)],
      CartesianIndex[CartesianIndex(7,2),CartesianIndex(8,2),CartesianIndex(9,2),CartesianIndex(10,2),CartesianIndex(11,2),CartesianIndex(12,2),CartesianIndex(13,2),CartesianIndex(14,2)],
      CartesianIndex[CartesianIndex(15,2),CartesianIndex(16,2),CartesianIndex(17,2),CartesianIndex(18,2),CartesianIndex(15,3),CartesianIndex(16,3),CartesianIndex(17,3),CartesianIndex(18,3),CartesianIndex(15,4),CartesianIndex(16,4),CartesianIndex(17,4),CartesianIndex(18,4),CartesianIndex(15,5),CartesianIndex(16,5),CartesianIndex(17,5),CartesianIndex(18,5),CartesianIndex(15,6),CartesianIndex(16,6),CartesianIndex(17,6),CartesianIndex(18,6)],
      CartesianIndex[CartesianIndex(3,7),CartesianIndex(2,8),CartesianIndex(3,8),CartesianIndex(4,8),CartesianIndex(2,9),CartesianIndex(3,9),CartesianIndex(4,9),CartesianIndex(3,10),CartesianIndex(4,10),CartesianIndex(2,11),CartesianIndex(3,11),CartesianIndex(4,11),CartesianIndex(2,12),CartesianIndex(3,12),CartesianIndex(4,12),CartesianIndex(5,12),CartesianIndex(6,12),CartesianIndex(2,13),CartesianIndex(3,13),CartesianIndex(4,13),CartesianIndex(5,13),CartesianIndex(6,13),CartesianIndex(2,14),CartesianIndex(3,14),CartesianIndex(4,14),CartesianIndex(5,14),CartesianIndex(6,14)],
      CartesianIndex[CartesianIndex(15,7),CartesianIndex(16,7),CartesianIndex(17,7),CartesianIndex(18,7),CartesianIndex(15,8),CartesianIndex(16,8),CartesianIndex(17,8),CartesianIndex(18,8),CartesianIndex(15,9),CartesianIndex(16,9),CartesianIndex(17,9),CartesianIndex(18,9),CartesianIndex(15,10),CartesianIndex(16,10),CartesianIndex(17,10),CartesianIndex(18,10),CartesianIndex(16,11),CartesianIndex(17,11),CartesianIndex(18,11),CartesianIndex(16,12),CartesianIndex(17,12),CartesianIndex(18,12),CartesianIndex(16,13),CartesianIndex(17,13),CartesianIndex(18,13)],
      CartesianIndex[CartesianIndex(8,12),CartesianIndex(9,12),CartesianIndex(10,12),CartesianIndex(11,12),CartesianIndex(12,12),CartesianIndex(13,12),CartesianIndex(7,13),CartesianIndex(8,13),CartesianIndex(9,13),CartesianIndex(10,13),CartesianIndex(11,13),CartesianIndex(12,13),CartesianIndex(13,13),CartesianIndex(8,14),CartesianIndex(9,14),CartesianIndex(10,14),CartesianIndex(11,14),CartesianIndex(12,14),CartesianIndex(13,14)],
      CartesianIndex[CartesianIndex(3,15),CartesianIndex(3,16),CartesianIndex(2,17),CartesianIndex(3,17),CartesianIndex(4,17),CartesianIndex(5,17),CartesianIndex(2,18),CartesianIndex(3,18),CartesianIndex(4,18),CartesianIndex(5,18),CartesianIndex(6,18),CartesianIndex(2,19),CartesianIndex(3,19),CartesianIndex(4,19),CartesianIndex(5,19)],
      CartesianIndex[CartesianIndex(7,17),CartesianIndex(8,17),CartesianIndex(9,17),CartesianIndex(10,17),CartesianIndex(11,17),CartesianIndex(12,17),CartesianIndex(13,17),CartesianIndex(7,18),CartesianIndex(8,18),CartesianIndex(9,18),CartesianIndex(10,18),CartesianIndex(11,18),CartesianIndex(12,18),CartesianIndex(13,18),CartesianIndex(7,19),CartesianIndex(8,19),CartesianIndex(9,19),CartesianIndex(10,19),CartesianIndex(11,19),CartesianIndex(12,19),CartesianIndex(13,19)]]
  expected_surface_cell_to_fine_cell_map_numbers::Field{Int64} = LatLonField{Int64}(surface_model_grid,
        Int64[ 1 4 7
               2 6 8
               3 5 0  ])
  expected_binary_lake_mask ::Field{Bool} = LatLonField{Bool}(surface_model_grid,
        Bool[ true false true
              false true false
              false false true ])
  lake_model_parameters::LakeModelParameters,
    lake_parameters_as_array::Vector{Float64} =
    load_lake_parameters(lake_para_filepath,
                         cell_areas_on_surface_model_grid,
                         true,
                         lake_grid,
                         hd_grid,
                         surface_model_grid)
  @test lake_parameters_as_array == expected_lake_parameters_as_array
  @test lake_model_parameters.grid_specific_lake_model_parameters.corresponding_surface_cell_lat_index ==
        expected_corresponding_surface_cell_lat_index
  @test lake_model_parameters.grid_specific_lake_model_parameters.corresponding_surface_cell_lon_index ==
        expected_corresponding_surface_cell_lon_index
  @test lake_model_parameters.number_of_lakes == 12
  @test lake_model_parameters.basins == Vector{Int64}[]
  @test lake_model_parameters.basin_numbers == LatLonField{Int64}(hd_grid,0)
  @test lake_model_parameters.cells_with_lakes ==CartesianIndex[]
  @test lake_model_parameters.cell_areas_on_surface_model_grid == cell_areas_on_surface_model_grid
  @test lake_model_parameters.lake_centers == LatLonField{Bool}(lake_grid,false)
  @test lake_model_parameters.number_fine_grid_cells == expected_number_fine_grid_cells
  @test lake_model_parameters.surface_cell_to_fine_cell_maps == expected_surface_cell_to_fine_cell_maps
  @test lake_model_parameters.surface_cell_to_fine_cell_map_numbers == expected_surface_cell_to_fine_cell_map_numbers
  @test lake_model_parameters.binary_lake_mask == expected_binary_lake_mask
end

end
