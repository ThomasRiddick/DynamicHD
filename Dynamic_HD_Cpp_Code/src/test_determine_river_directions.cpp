/*
 * test_determine_river_directions.cpp
 *
 * Unit test for the various lake related C++ code using Google's
 * Google Test Framework
 *
 *  Created on: Mar 16, 2019
 *      Author: thomasriddick using Google's recommended template code
 */

#include "determine_river_directions.hpp"
#include "river_direction_determination_algorithm.hpp"
#include "gtest/gtest.h"
using namespace std;

namespace determine_river_directions_unittests {

class DetermineRiverDirectionsTest : public ::testing::Test {
 protected:

  DetermineRiverDirectionsTest() {
  }

  virtual ~DetermineRiverDirectionsTest() {
    // Don't include exceptions here!
  }

// Common objects can go here

};


TEST_F(DetermineRiverDirectionsTest,DetermineRiverDirectionsTestOne) {
  int nlat = 8;
  int nlon = 8;
  double* orography = new double[8*8] {
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    10.0,10.0, 9.8,10.0,  0.0, 3.0,10.0,10.0,
    10.0, 9.0,10.0,10.0, 10.0,10.0, 4.0,10.0,
    10.0, 8.3,10.0,10.0, 10.0,10.0, 4.1,10.0,
    10.0, 7.3,10.0,10.0, 10.0,10.0, 4.8,10.0,
    10.0,10.0, 7.1, 6.0,  5.0, 4.9,10.0,10.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0
  };

  bool* lsmask = new bool[8*8] {
    false,false,false,false, false,false,false,false,
    false,false,false,false,  true,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  bool* truesinks = new bool[8*8] {
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  double* expected_rdirs_out = new double[8*8] {
       6,   3,   2,   3,    2,   1,   1,   6,
       3,   2,   1,   6,    0,   4,   4,   1,
       3,   2,   1,   9,    8,   7,   7,   4,
       3,   2,   1,   6,    9,   9,   8,   7,
       6,   3,   3,   3,    3,   9,   8,   7,
       9,   6,   6,   6,    6,   9,   8,   7,
       6,   9,   9,   9,    9,   8,   7,   6,
       9,   8,   7,   4,    4,   6,   9,   9
  };

  double* rdirs = new double[8*8];
  bool always_flow_to_sea_in = true;
  bool use_diagonal_nbrs_in = true;
  bool mark_pits_as_true_sinks_in = false;
  latlon_determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    nlat,nlon,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in);
  for (auto i =0; i < nlat*nlon; i++){
    EXPECT_EQ(rdirs[i],expected_rdirs_out[i]);
  }
  delete[] rdirs;
  delete[] expected_rdirs_out;
  delete[] truesinks;
  delete[] lsmask;
  delete[] orography;
};

TEST_F(DetermineRiverDirectionsTest,DetermineRiverDirectionsTestTwo) {
  int nlat = 8;
  int nlon = 8;
  double* orography = new double[8*8] {
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    10.0,10.0, 9.8,10.0, -1.0, 3.0,10.0,10.0,
    10.0, 9.0,10.0,10.0, 10.0,10.0, 4.0,10.0,
    10.0, 8.3,10.0,10.0, 10.0,10.0, 4.1,10.0,
    10.0, 7.3,10.0,10.0, 10.0,10.0, 4.8,10.0,
    10.0,10.0, 7.1, 6.0,  5.0, 4.9,10.0,10.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0
  };

  bool* lsmask = new bool[8*8] {
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  bool* truesinks = new bool[8*8] {
    false,false,false,false, false,false,false,false,
    false,false,false,false,  true,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  double* expected_rdirs_out = new double[8*8] {
       6,   3,   2,   3,    2,   1,   1,   6,
       3,   2,   1,   6,    5,   4,   4,   1,
       3,   2,   1,   9,    8,   7,   7,   4,
       3,   2,   1,   6,    9,   9,   8,   7,
       6,   3,   3,   3,    3,   9,   8,   7,
       9,   6,   6,   6,    6,   9,   8,   7,
       6,   9,   9,   9,    9,   8,   7,   6,
       9,   8,   7,   4,    4,   6,   9,   9
  };
  double* rdirs = new double[8*8];
  bool always_flow_to_sea_in = true;
  bool use_diagonal_nbrs_in = true;
  bool mark_pits_as_true_sinks_in = false;
  latlon_determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    nlat,nlon,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in);
  for (auto i =0; i < nlat*nlon; i++){
    EXPECT_EQ(rdirs[i],expected_rdirs_out[i]);
  }
  delete[] rdirs;
  delete[] expected_rdirs_out;
  delete[] truesinks;
  delete[] lsmask;
  delete[] orography;
};

TEST_F(DetermineRiverDirectionsTest,DetermineRiverDirectionsTestThree) {
  int nlat = 8;
  int nlon = 8;
  double* orography = new double[8*8] {
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    0.0,  3.0, 10.0,10.0, 10.0,10.0, 9.8,10.0,
    10.0,10.0, 4.0,10.0, 10.0, 9.0,10.0,10.0,
    10.0,10.0, 4.1,10.0, 10.0, 8.3,10.0,10.0,
    10.0,10.0, 4.8,10.0, 10.0, 7.3,10.0,10.0,
     5.0, 4.9,10.0,10.0, 10.0,10.0, 7.1, 6.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0
  };

  bool* lsmask = new bool[8*8] {
    false,false,false,false, false,false,false,false,
     true,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  bool* truesinks = new bool[8*8] {
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  double* expected_rdirs_out = new double[8*8] {
       2,   1,   1,   6,    6,   3,   2,   3,
       0,   4,   4,   1,    3,   2,   1,   6,
       8,   7,   7,   4,    3,   2,   1,   9,
       4,   9,   8,   7,    3,   2,   1,   7,
       3,   9,   8,   7,    6,   3,   3,   3,
       6,   9,   8,   7,    9,   6,   6,   6,
       9,   8,   7,   1,    3,   9,   9,   9,
       8,   7,   4,   4,    6,   6,   6,   9
  };

  double* rdirs = new double[8*8];
  bool always_flow_to_sea_in = true;
  bool use_diagonal_nbrs_in = true;
  bool mark_pits_as_true_sinks_in = false;
  latlon_determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    nlat,nlon,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in);
  for (auto i =0; i < nlat*nlon; i++){
    EXPECT_EQ(rdirs[i],expected_rdirs_out[i]);
  }
  delete[] rdirs;
  delete[] expected_rdirs_out;
  delete[] truesinks;
  delete[] lsmask;
  delete[] orography;
};

TEST_F(DetermineRiverDirectionsTest,DetermineRiverDirectionsTestFour) {
  int nlat = 8;
  int nlon = 8;
  double* orography = new double[8*8] {
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    2.0,  3.0, 10.0,10.0, 10.0,10.0, 9.8,10.0,
    10.0,10.0, 4.0,10.0, 10.0, 9.0,10.0,10.0,
    10.0,10.0, 4.1,10.0, 10.0, 8.3,10.0,10.0,
    10.0,10.0, 4.8,10.0, 10.0, 7.3,10.0,10.0,
     5.0, 4.9,10.0,10.0, 10.0,10.0, 7.1, 6.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0
  };

  bool* lsmask = new bool[8*8] {
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  bool* truesinks = new bool[8*8] {
    false,false,false,false, false,false,false,false,
     true,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  double* expected_rdirs_out = new double[8*8] {
       2,   1,   1,   6,    6,   3,   2,   3,
       5,   4,   4,   1,    3,   2,   1,   6,
       8,   7,   7,   4,    3,   2,   1,   9,
       4,   9,   8,   7,    3,   2,   1,   7,
       3,   9,   8,   7,    6,   3,   3,   3,
       6,   9,   8,   7,    9,   6,   6,   6,
       9,   8,   7,   1,    3,   9,   9,   9,
       8,   7,   4,   4,    6,   6,   6,   9
  };

  double* rdirs = new double[8*8];
  bool always_flow_to_sea_in = true;
  bool use_diagonal_nbrs_in = true;
  bool mark_pits_as_true_sinks_in = false;
  latlon_determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    nlat,nlon,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in);
  for (auto i =0; i < nlat*nlon; i++){
    EXPECT_EQ(rdirs[i],expected_rdirs_out[i]);
  }
  delete[] rdirs;
  delete[] expected_rdirs_out;
  delete[] truesinks;
  delete[] lsmask;
  delete[] orography;
};

TEST_F(DetermineRiverDirectionsTest,DetermineRiverDirectionsTestFive) {
  int nlat = 8;
  int nlon = 8;
  double* orography = new double[8*8] {
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    2.0,  3.0, 10.0,10.0, 10.0,10.0, 9.8,10.0,
    10.0,10.0, 4.0,10.0, 10.0, 9.0,10.0,10.0,
    10.0,10.0, 4.1,10.0, 10.0, 8.3,10.0, 1.0,
    10.0,10.0, 4.8,10.0, 10.0, 7.3,10.0,10.0,
     5.0, 4.9,10.0,10.0, 10.0,10.0, 7.1, 6.0,
    10.0,10.0,10.0,10.0, 10.0,10.0,10.0,10.0,
    10.0,-1.0,10.0, 1.2,  1.3,10.0,10.0,10.0
  };

  bool* lsmask = new bool[8*8] {
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  bool* truesinks = new bool[8*8] {
    false,false,false,false, false,false,false,false,
     true,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false,
    false,false,false,false, false,false,false,false
  };

  double* expected_rdirs_out = new double[8*8] {
       2,   1,   1,   6,    6,   3,   2,   3,
       5,   4,   4,   1,    3,   2,   1,   6,
       1,   7,   7,   4,    3,   2,   3,   2,
       4,   9,   8,   7,    3,   2,   6,   5,
       7,   9,   8,   7,    6,   3,   9,   8,
       6,   9,   8,   7,    9,   6,   6,   6,
       3,   2,   1,   2,    1,   1,   9,   9,
       6,   5,   4,   5,    4,   4,   6,   9
  };

  double* rdirs = new double[8*8];
  bool always_flow_to_sea_in = true;
  bool use_diagonal_nbrs_in = true;
  bool mark_pits_as_true_sinks_in = true;
  latlon_determine_river_directions(rdirs,
                                    orography,
                                    lsmask,
                                    truesinks,
                                    nlat,nlon,
                                    always_flow_to_sea_in,
                                    use_diagonal_nbrs_in,
                                    mark_pits_as_true_sinks_in);
  for (auto i =0; i < nlat*nlon; i++){
    EXPECT_EQ(rdirs[i],expected_rdirs_out[i]);
  }
  delete[] rdirs;
  delete[] expected_rdirs_out;
  delete[] truesinks;
  delete[] lsmask;
  delete[] orography;
};

TEST_F(DetermineRiverDirectionsTest, DetermineRiverDirectionsICONTestOne) {
  int* cell_neighbors = new int[80*3] {
    //1
    5,7,2,
    //2
    1,10,3,
    //3
    2,13,4,
    //4
    3,16,5,
    //5
    4,19,1,
    //6
    20,21,7,
    //7
    1,6,8,
    //8
    7,23,9,
    //9
    8,25,10,
    //10
    2,9,11,
    //11
    10,27,12,
    //12
    11,29,13,
    //13
    3,12,14,
    //14
    13,31,15,
    //15
    14,33,16,
    //16
    4,15,17,
    //17
    16,35,18,
    //18
    17,37,19,
    //19
    5,18,20,
    //20
    19,39,6,
    //21
    6,40,22,
    //22
    21,41,23,
    //23
    8,22,24,
    //24
    23,43,25,
    //25
    24,26,9,
    //26
    25,45,27,
    //27
    11,26,28,
    //28
    27,47,29,
    //29
    12,28,30,
    //30
    29,49,31,
    //31
    14,30,32,
    //32
    31,51,33,
    //33
    15,32,34,
    //34
    33,53,35,
    //35
    17,34,36,
    //36
    35,55,37,
    //37
    18,36,38,
    //38
    37,57,39,
    //39
    20,38,40,
    //40
    39,59,21,
    //41
    22,60,42,
    //42
    41,61,43,
    //43
    24,42,44,
    //44
    43,63,45,
    //45
    26,44,46,
    //46
    45,64,47,
    //47
    28,46,48,
    //48
    47,66,49,
    //49
    30,48,50,
    //50
    49,67,51,
    //51
    32,50,52,
    //52
    51,69,53,
    //53
    34,52,54,
    //54
    53,70,55,
    //55
    36,54,56,
    //56
    55,72,57,
    //57
    38,56,58,
    //58
    57,73,59,
    //59
    40,58,60,
    //60
    59,75,41,
    //61
    42,75,62,
    //62
    61,76,63,
    //63
    44,62,64,
    //64
    46,63,65,
    //65
    64,77,66,
    //66
    48,65,67,
    //67
    50,66,68,
    //68
    67,78,69,
    //69
    52,68,70,
    //70
    54,69,71,
    //71
    70,79,72,
    //72
    56,71,73,
    //73
    58,72,74,
    //74
    73,80,75,
    //75
    60,74,61,
    //76
    62,80,77,
    //77
    65,76,78,
    //78
    68,77,79,
    //79
    71,78,80,
    //80
    74,79,76
  };
  int* secondary_neighboring_cell_indices_in = new int[80*9];
  int* next_cell_index_out = new int[80];
  double* orography_in = new double[80] {
    //1
    10.0,
    //2
    10.0,
    //3
     1.0,
    //4
    10.0,
    //5
    10.0,
    //6
     9.0,
    //7
     8.0,
    //8
     7.0,
    //9
     1.0,
    //10
    10.0,
    //11
    10.0,
    //12
    10.0,
    //13
     7.0,
    //14
    10.0,
    //15
    10.0,
    //16
    10.0,
    //17
    10.0,
    //18
    10.0,
    //19
    10.0,
    //20
    10.0,
    //21
    10.0,
    //22
    10.0,
    //23
    10.0,
    //24
    10.0,
    //25
    10.0,
    //26
    10.0,
    //27
    10.0,
    //28
    10.0,
    //29
    10.0,
    //30
     8.0,
    //31
    10.0,
    //32
    10.0,
    //33
    10.0,
    //34
    10.0,
    //35
    10.0,
    //36
     9.0,
    //37
    10.0,
    //38
    10.0,
    //39
    10.0,
    //40
    10.0,
    //41
    10.0,
    //42
    10.0,
    //43
     1.0,
    //44
     7.0,
    //45
     8.0,
    //46
     9.0,
    //47
    10.0,
    //48
    10.0,
    //49
     9.0,
    //50
    10.0,
    //51
    10.0,
    //52
    10.0,
    //53
    10.0,
    //54
    10.0,
    //55
     8.0,
    //56
    10.0,
    //57
    10.0,
    //58
    10.0,
    //59
    10.0,
    //60
    10.0,
    //61
    10.0,
    //62
    10.0,
    //63
    10.0,
    //64
    10.0,
    //65
    10.0,
    //66
    10.0,
    //67
    10.0,
    //68
    10.0,
    //69
    10.0,
    //70
    10.0,
    //71
     7.0,
    //72
    10.0,
    //73
    10.0,
    //74
    10.0,
    //75
    10.0,
    //76
    10.0,
    //77
    10.0,
    //78
    10.0,
    //79
     1.0,
    //80
    10.0
  };
  bool* landsea_in = new bool[80] {
    //1
    false,
    //2
    false,
    //3
     true,
    //4
    false,
    //5
    false,
    //6
    false,
    //7
    false,
    //8
    false,
    //9
     true,
    //10
    false,
    //11
    false,
    //12
    false,
    //13
    false,
    //14
    false,
    //15
    false,
    //16
    false,
    //17
    false,
    //18
    false,
    //19
    false,
    //20
    false,
    //21
    false,
    //22
    false,
    //23
    false,
    //24
    false,
    //25
    false,
    //26
    false,
    //27
    false,
    //28
    false,
    //29
    false,
    //30
    false,
    //31
    false,
    //32
    false,
    //33
    false,
    //34
    false,
    //35
    false,
    //36
    false,
    //37
    false,
    //38
    false,
    //39
    false,
    //40
    false,
    //41
    false,
    //42
    false,
    //43
     true,
    //44
    false,
    //45
    false,
    //46
    false,
    //47
    false,
    //48
    false,
    //49
    false,
    //50
    false,
    //51
    false,
    //52
    false,
    //53
    false,
    //54
    false,
    //55
    false,
    //56
    false,
    //57
    false,
    //58
    false,
    //59
    false,
    //60
    false,
    //61
    false,
    //62
    false,
    //63
    false,
    //64
    false,
    //65
    false,
    //66
    false,
    //67
    false,
    //68
    false,
    //69
    false,
    //70
    false,
    //71
    false,
    //72
    false,
    //73
    false,
    //74
    false,
    //75
    false,
    //76
    false,
    //77
    false,
    //78
    false,
    //79
     true,
    //80
    false
  };
  int* next_cell_index_expected_out = new int[80] {
    //1
     3,
    //2
     9,
    //3
    -1,
    //4
     3,
    //5
     3,
    //6
     8,
    //7
     9,
    //8
     9,
    //9
    -1,
    //10
     3,
    //11
     9,
    //12
     3,
    //13
     3,
    //14
     3,
    //15
     3,
    //16
     3,
    //17
     36,
    //18
     36,
    //19
     7,
    //20
     7,
    //21
     8,
    //22
    43,
    //23
     9,
    //24
     9,
    //25
    43,
    //26
     9,
    //27
     9,
    //28
    45,
    //29
    13,
    //30
    13,
    //31
    13,
    //32
    30,
    //33
    14,
    //34
    55,
    //35
    55,
    //36
    55,
    //37
    55,
    //38
    55,
    //39
     6,
    //40
     6,
    //41
    43,
    //42
    43,
    //43
    -1,
    //44
    43,
    //45
    43,
    //46
    44,
    //47
    45,
    //48
    30,
    //49
    30,
    //50
    30,
    //51
    30,
    //52
    33,
    //53
    55,
    //54
    71,
    //55
    71,
    //56
    71,
    //57
    55,
    //58
    60,
    //59
    22,
    //60
    22,
    //61
    43,
    //62
    43,
    //63
    43,
    //64
    44,
    //65
    46,
    //66
    49,
    //67
    49,
    //68
    79,
    //69
    79,
    //70
    79,
    //71
    79,
    //72
    79,
    //73
    79,
    //74
    79,
    //75
    60,
    //76
    79,
    //77
    79,
    //78
    79,
    //79
    -1,
    //80
    79
  };
  bool* true_sinks_in = new bool[80];
  fill_n(true_sinks_in,80,false);
  bool use_secondary_neighbors_in=true;
  bool always_flow_to_sea_in=true;
  bool mark_pits_as_true_sinks_in=true;
  auto alg = river_direction_determination_algorithm_icon_single_index();
  icon_single_index_grid_params* grid_params_in =
      new icon_single_index_grid_params(80,cell_neighbors,
                                        true,secondary_neighboring_cell_indices_in);
  grid_params_in->icon_single_index_grid_calculate_secondary_neighbors();
  alg.setup_flags(always_flow_to_sea_in,use_secondary_neighbors_in,
                  mark_pits_as_true_sinks_in);
  alg.setup_fields(next_cell_index_out,orography_in,landsea_in,true_sinks_in,
                   grid_params_in);
  alg.determine_river_directions();
  for (auto i =0; i < 80; i++){
    EXPECT_EQ(next_cell_index_out[i],next_cell_index_expected_out[i]);
  }
  delete[] true_sinks_in;
  delete[] next_cell_index_out;
  delete[] next_cell_index_expected_out;
  delete[] orography_in;
  delete[] landsea_in;
  delete[] cell_neighbors;
  delete[] secondary_neighboring_cell_indices_in;
  delete grid_params_in;
}

TEST_F(DetermineRiverDirectionsTest, DetermineRiverDirectionsICONTestTwo) {
  int* cell_neighbors = new int[80*3] {
    //1
    5,7,2,
    //2
    1,10,3,
    //3
    2,13,4,
    //4
    3,16,5,
    //5
    4,19,1,
    //6
    20,21,7,
    //7
    1,6,8,
    //8
    7,23,9,
    //9
    8,25,10,
    //10
    2,9,11,
    //11
    10,27,12,
    //12
    11,29,13,
    //13
    3,12,14,
    //14
    13,31,15,
    //15
    14,33,16,
    //16
    4,15,17,
    //17
    16,35,18,
    //18
    17,37,19,
    //19
    5,18,20,
    //20
    19,39,6,
    //21
    6,40,22,
    //22
    21,41,23,
    //23
    8,22,24,
    //24
    23,43,25,
    //25
    24,26,9,
    //26
    25,45,27,
    //27
    11,26,28,
    //28
    27,47,29,
    //29
    12,28,30,
    //30
    29,49,31,
    //31
    14,30,32,
    //32
    31,51,33,
    //33
    15,32,34,
    //34
    33,53,35,
    //35
    17,34,36,
    //36
    35,55,37,
    //37
    18,36,38,
    //38
    37,57,39,
    //39
    20,38,40,
    //40
    39,59,21,
    //41
    22,60,42,
    //42
    41,61,43,
    //43
    24,42,44,
    //44
    43,63,45,
    //45
    26,44,46,
    //46
    45,64,47,
    //47
    28,46,48,
    //48
    47,66,49,
    //49
    30,48,50,
    //50
    49,67,51,
    //51
    32,50,52,
    //52
    51,69,53,
    //53
    34,52,54,
    //54
    53,70,55,
    //55
    36,54,56,
    //56
    55,72,57,
    //57
    38,56,58,
    //58
    57,73,59,
    //59
    40,58,60,
    //60
    59,75,41,
    //61
    42,75,62,
    //62
    61,76,63,
    //63
    44,62,64,
    //64
    46,63,65,
    //65
    64,77,66,
    //66
    48,65,67,
    //67
    50,66,68,
    //68
    67,78,69,
    //69
    52,68,70,
    //70
    54,69,71,
    //71
    70,79,72,
    //72
    56,71,73,
    //73
    58,72,74,
    //74
    73,80,75,
    //75
    60,74,61,
    //76
    62,80,77,
    //77
    65,76,78,
    //78
    68,77,79,
    //79
    71,78,80,
    //80
    74,79,76
  };
  int* secondary_neighboring_cell_indices_in = new int[80*9];
  int* next_cell_index_out = new int[80];
  double* orography_in = new double[80] {
    //1
    10.0,
    //2
    10.0,
    //3
    10.0,
    //4
    10.0,
    //5
    10.0,
    //6
    10.0,
    //7
    10.0,
    //8
    10.0,
    //9
    10.0,
    //10
    10.0,
    //11
    10.0,
    //12
    10.0,
    //13
    10.0,
    //14
    10.0,
    //15
     3.0,
    //16
     0.1,
    //17
     4.0,
    //18
    10.0,
    //19
    10.0,
    //20
     0.7,
    //21
    10.0,
    //22
    10.0,
    //23
    10.0,
    //24
    10.0,
    //25
    10.0,
    //26
     7.0,
    //27
    10.0,
    //28
     8.0,
    //29
    10.0,
    //30
    10.0,
    //31
    10.0,
    //32
    10.0,
    //33
    10.0,
    //34
     1.0,
    //35
    10.0,
    //36
    10.0,
    //37
    10.0,
    //38
    10.0,
    //39
     0.8,
    //40
    10.0,
    //41
    10.0,
    //42
    10.0,
    //43
     4.0,
    //44
    10.0,
    //45
     3.0,
    //46
     2.0,
    //47
    10.0,
    //48
    10.0,
    //49
    10.0,
    //50
    10.0,
    //51
    10.0,
    //52
     7.0,
    //53
    10.0,
    //54
     8.0,
    //55
    10.0,
    //56
    10.0,
    //57
     3.0,
    //58
    10.0,
    //59
     4.0,
    //60
    10.0,
    //61
    10.0,
    //62
    10.0,
    //63
    10.0,
    //64
    10.0,
    //65
     0.0,
    //66
    10.0,
    //67
    10.0,
    //68
    10.0,
    //69
    10.0,
    //70
    10.0,
    //71
    10.0,
    //72
    10.0,
    //73
    10.0,
    //74
    10.0,
    //75
    10.0,
    //76
    10.0,
    //77
    10.0,
    //78
    10.0,
    //79
    10.0,
    //80
    10.0
  };
  bool* landsea_in = new bool[80] {
    //1
    false,
    //2
    false,
    //3
    false,
    //4
    false,
    //5
    false,
    //6
    false,
    //7
    false,
    //8
    false,
    //9
    false,
    //10
    false,
    //11
    false,
    //12
    false,
    //13
    false,
    //14
    false,
    //15
    false,
    //16
    true,
    //17
    false,
    //18
    false,
    //19
    false,
    //20
    true,
    //21
    false,
    //22
    false,
    //23
    false,
    //24
    false,
    //25
    false,
    //26
    false,
    //27
    false,
    //28
    false,
    //29
    false,
    //30
    false,
    //31
    false,
    //32
    false,
    //33
    false,
    //34
    false,
    //35
    false,
    //36
    false,
    //37
    false,
    //38
    false,
    //39
    false,
    //40
    false,
    //41
    false,
    //42
    false,
    //43
    false,
    //44
    false,
    //45
    false,
    //46
    false,
    //47
    false,
    //48
    false,
    //49
    false,
    //50
    false,
    //51
    false,
    //52
    false,
    //53
    false,
    //54
    false,
    //55
    false,
    //56
    false,
    //57
    false,
    //58
    false,
    //59
    false,
    //60
    false,
    //61
    false,
    //62
    false,
    //63
    false,
    //64
    false,
    //65
     true,
    //66
    false,
    //67
    false,
    //68
    false,
    //69
    false,
    //70
    false,
    //71
    false,
    //72
    false,
    //73
    false,
    //74
    false,
    //75
    false,
    //76
    false,
    //77
    false,
    //78
    false,
    //79
    false,
    //80
    false
  };
  int* next_cell_index_expected_out = new int[80] {
    //1
     20,
    //2
      1,
    //3
     16,
    //4
     16,
    //5
     16,
    //6
     20,
    //7
     20,
    //8
      1,
    //9
     26,
    //10
     26,
    //11
     26,
    //12
     28,
    //13
      16,
    //14
      16,
    //15
      16,
    //16
      -1,
    //17
      16,
    //18
      16,
    //19
      16,
    //20
      -1,
    //21
      20,
    //22
      59,
    //23
      43,
    //24
      45,
    //25
      45,
    //26
      46,
    //27
      46,
    //28
      46,
    //29
      28,
    //30
      28,
    //31
      15,
    //32
      34,
    //33
      16,
    //34
      16,
    //35
      16,
    //36
      34,
    //37
      20,
    //38
      20,
    //39
      20,
    //40
      20,
    //41
      59,
    //42
      43,
    //43
      45,
    //44
      46,
    //45
      46,
    //46
      65,
    //47
      65,
    //48
      65,
    //49
      28,
    //50
      52,
    //51
      34,
    //52
      34,
    //53
      34,
    //54
      34,
    //55
      34,
    //56
      57,
    //57
      39,
    //58
      39,
    //59
      39,
    //60
      59,
    //61
      43,
    //62
      65,
    //63
      65,
    //64
      65,
    //65
      -1,
    //66
      65,
    //67
      65,
    //68
      65,
    //69
      52,
    //70
      52,
    //71
      54,
    //72
      57,
    //73
      57,
    //74
      59,
    //75
      59,
    //76
      65,
    //77
      65,
    //78
      65,
    //79
      78,
    //80
      78
  };
  bool* true_sinks_in = new bool[80];
  fill_n(true_sinks_in,80,false);
  bool use_secondary_neighbors_in=true;
  bool always_flow_to_sea_in=true;
  bool mark_pits_as_true_sinks_in=true;
  auto alg = river_direction_determination_algorithm_icon_single_index();
  icon_single_index_grid_params* grid_params_in =
      new icon_single_index_grid_params(80,cell_neighbors,
                                        true,secondary_neighboring_cell_indices_in);
  grid_params_in->icon_single_index_grid_calculate_secondary_neighbors();
  alg.setup_flags(always_flow_to_sea_in,use_secondary_neighbors_in,
                  mark_pits_as_true_sinks_in);
  alg.setup_fields(next_cell_index_out,orography_in,landsea_in,true_sinks_in,
                   grid_params_in);
  alg.determine_river_directions();
  for (auto i =0; i < 80; i++){
    EXPECT_EQ(next_cell_index_out[i],next_cell_index_expected_out[i]);
  }
  delete[] true_sinks_in;
  delete[] next_cell_index_out;
  delete[] next_cell_index_expected_out;
  delete[] orography_in;
  delete[] landsea_in;
  delete[] cell_neighbors;
  delete[] secondary_neighboring_cell_indices_in;
  delete grid_params_in;
}

TEST_F(DetermineRiverDirectionsTest, DetermineRiverDirectionsICONTestThree) {
  int* cell_neighbors = new int[80*3] {
    //1
    5,7,2,
    //2
    1,10,3,
    //3
    2,13,4,
    //4
    3,16,5,
    //5
    4,19,1,
    //6
    20,21,7,
    //7
    1,6,8,
    //8
    7,23,9,
    //9
    8,25,10,
    //10
    2,9,11,
    //11
    10,27,12,
    //12
    11,29,13,
    //13
    3,12,14,
    //14
    13,31,15,
    //15
    14,33,16,
    //16
    4,15,17,
    //17
    16,35,18,
    //18
    17,37,19,
    //19
    5,18,20,
    //20
    19,39,6,
    //21
    6,40,22,
    //22
    21,41,23,
    //23
    8,22,24,
    //24
    23,43,25,
    //25
    24,26,9,
    //26
    25,45,27,
    //27
    11,26,28,
    //28
    27,47,29,
    //29
    12,28,30,
    //30
    29,49,31,
    //31
    14,30,32,
    //32
    31,51,33,
    //33
    15,32,34,
    //34
    33,53,35,
    //35
    17,34,36,
    //36
    35,55,37,
    //37
    18,36,38,
    //38
    37,57,39,
    //39
    20,38,40,
    //40
    39,59,21,
    //41
    22,60,42,
    //42
    41,61,43,
    //43
    24,42,44,
    //44
    43,63,45,
    //45
    26,44,46,
    //46
    45,64,47,
    //47
    28,46,48,
    //48
    47,66,49,
    //49
    30,48,50,
    //50
    49,67,51,
    //51
    32,50,52,
    //52
    51,69,53,
    //53
    34,52,54,
    //54
    53,70,55,
    //55
    36,54,56,
    //56
    55,72,57,
    //57
    38,56,58,
    //58
    57,73,59,
    //59
    40,58,60,
    //60
    59,75,41,
    //61
    42,75,62,
    //62
    61,76,63,
    //63
    44,62,64,
    //64
    46,63,65,
    //65
    64,77,66,
    //66
    48,65,67,
    //67
    50,66,68,
    //68
    67,78,69,
    //69
    52,68,70,
    //70
    54,69,71,
    //71
    70,79,72,
    //72
    56,71,73,
    //73
    58,72,74,
    //74
    73,80,75,
    //75
    60,74,61,
    //76
    62,80,77,
    //77
    65,76,78,
    //78
    68,77,79,
    //79
    71,78,80,
    //80
    74,79,76
  };
  int* secondary_neighboring_cell_indices_in = new int[80*9];
  int* next_cell_index_out = new int[80];
  double* orography_in = new double[80] {
    //1
    10.0,
    //2
    10.0,
    //3
    10.0,
    //4
    10.0,
    //5
    10.0,
    //6
    10.0,
    //7
    10.0,
    //8
    10.0,
    //9
     6.0,
    //10
    10.0,
    //11
    10.0,
    //12
    10.0,
    //13
    10.0,
    //14
    10.0,
    //15
    10.0,
    //16
    10.0,
    //17
     7.4,
    //18
    10.0,
    //19
    10.0,
    //20
    10.0,
    //21
    10.0,
    //22
    10.0,
    //23
    10.0,
    //24
    10.0,
    //25
    10.0,
    //26
     5.0,
    //27
     0.5,
    //28
    10.0,
    //29
    10.0,
    //30
    10.0,
    //31
    10.0,
    //32
    10.0,
    //33
     0.4,
    //34
     5.2,
    //35
    10.0,
    //36
    10.0,
    //37
    10.0,
    //38
    10.0,
    //39
    10.0,
    //40
    10.0,
    //41
    10.0,
    //42
     9.5,
    //43
     7.5,
    //44
    10.0,
    //45
    10.0,
    //46
    10.0,
    //47
     8.7,
    //48
    10.0,
    //49
    10.0,
    //50
     3.2,
    //51
     3.0,
    //52
    10.0,
    //53
    10.0,
    //54
    10.0,
    //55
     7.1,
    //56
     9.2,
    //57
    10.0,
    //58
    10.0,
    //59
    10.0,
    //60
    10.0,
    //61
    10.0,
    //62
    10.0,
    //63
    10.0,
    //64
    10.0,
    //65
    10.0,
    //66
    10.0,
    //67
    10.0,
    //68
    10.0,
    //69
    10.0,
    //70
    10.0,
    //71
    10.0,
    //72
    10.0,
    //73
    10.0,
    //74
    10.0,
    //75
    10.0,
    //76
    10.0,
    //77
    10.0,
    //78
    10.0,
    //79
    10.0,
    //80
    10.0,
  };
  bool* landsea_in = new bool[80] {
    //1
    false,
    //2
    false,
    //3
    false,
    //4
    false,
    //5
    false,
    //6
    false,
    //7
    false,
    //8
    false,
    //9
    false,
    //10
    false,
    //11
    false,
    //12
    false,
    //13
    false,
    //14
    false,
    //15
    false,
    //16
    false,
    //17
    false,
    //18
    false,
    //19
    false,
    //20
    false,
    //21
    false,
    //22
    false,
    //23
    false,
    //24
    false,
    //25
    false,
    //26
    false,
    //27
     true,
    //28
    false,
    //29
    false,
    //30
    false,
    //31
    false,
    //32
    false,
    //33
     true,
    //34
    false,
    //35
    false,
    //36
    false,
    //37
    false,
    //38
    false,
    //39
    false,
    //40
    false,
    //41
    false,
    //42
    false,
    //43
    false,
    //44
    false,
    //45
    false,
    //46
    false,
    //47
    false,
    //48
    false,
    //49
    false,
    //50
    false,
    //51
    false,
    //52
    false,
    //53
    false,
    //54
    false,
    //55
    false,
    //56
    false,
    //57
    false,
    //58
    false,
    //59
    false,
    //60
    false,
    //61
    false,
    //62
    false,
    //63
    false,
    //64
    false,
    //65
    false,
    //66
    false,
    //67
    false,
    //68
    false,
    //69
    false,
    //70
    false,
    //71
    false,
    //72
    false,
    //73
    false,
    //74
    false,
    //75
    false,
    //76
    false,
    //77
    false,
    //78
    false,
    //79
    false,
    //80
    false
  };
  int* next_cell_index_expected_out = new int[80] {
    //1
      9,
    //2
      9,
    //3
      1,
    //4
     17,
    //5
     17,
    //6
      1,
    //7
      9,
    //8
      9,
    //9
     27,
    //10
     27,
    //11
     27,
    //12
     27,
    //13
      3,
    //14
     33,
    //15
     33,
    //16
     33,
    //17
     33,
    //18
     17,
    //19
     17,
    //20
      1,
    //21
      6,
    //22
     43,
    //23
      9,
    //24
     26,
    //25
     27,
    //26
     27,
    //27
     -1,
    //28
     27,
    //29
     27,
    //30
     51,
    //31
     33,
    //32
     33,
    //33
     -1,
    //34
     33,
    //35
     33,
    //36
     34,
    //37
     55,
    //38
     55,
    //39
      6,
    //40
      6,
    //41
     43,
    //42
     43,
    //43
     26,
    //44
     26,
    //45
     27,
    //46
     27,
    //47
     27,
    //48
     50,
    //49
     51,
    //50
     51,
    //51
     33,
    //52
     33,
    //53
     33,
    //54
     34,
    //55
     34,
    //56
     55,
    //57
     55,
    //58
     56,
    //59
     39,
    //60
     42,
    //61
     43,
    //62
     43,
    //63
     43,
    //64
     47,
    //65
     47,
    //66
     50,
    //67
     51,
    //68
     51,
    //69
     51,
    //70
     55,
    //71
     55,
    //72
     55,
    //73
     56,
    //74
     59,
    //75
     42,
    //76
     74,
    //77
     79,
    //78
     79,
    //79
     74,
    //80
     74
  };
  bool* true_sinks_in = new bool[80];
  fill_n(true_sinks_in,80,false);
  bool use_secondary_neighbors_in=true;
  bool always_flow_to_sea_in=true;
  bool mark_pits_as_true_sinks_in=true;
  auto alg = river_direction_determination_algorithm_icon_single_index();
  icon_single_index_grid_params* grid_params_in =
      new icon_single_index_grid_params(80,cell_neighbors,
                                        true,secondary_neighboring_cell_indices_in);
  grid_params_in->icon_single_index_grid_calculate_secondary_neighbors();
  alg.setup_flags(always_flow_to_sea_in,use_secondary_neighbors_in,
                  mark_pits_as_true_sinks_in);
  alg.setup_fields(next_cell_index_out,orography_in,landsea_in,true_sinks_in,
                   grid_params_in);
  alg.determine_river_directions();
  for (auto i =0; i < 80; i++){
    EXPECT_EQ(next_cell_index_out[i],next_cell_index_expected_out[i]);
  }
  delete[] true_sinks_in;
  delete[] next_cell_index_out;
  delete[] next_cell_index_expected_out;
  delete[] orography_in;
  delete[] landsea_in;
  delete[] cell_neighbors;
  delete[] secondary_neighboring_cell_indices_in;
  delete grid_params_in;
}

TEST_F(DetermineRiverDirectionsTest, DetermineRiverDirectionsICONTestFour) {
  int* cell_neighbors = new int[80*3] {
    //1
    5,7,2,
    //2
    1,10,3,
    //3
    2,13,4,
    //4
    3,16,5,
    //5
    4,19,1,
    //6
    20,21,7,
    //7
    1,6,8,
    //8
    7,23,9,
    //9
    8,25,10,
    //10
    2,9,11,
    //11
    10,27,12,
    //12
    11,29,13,
    //13
    3,12,14,
    //14
    13,31,15,
    //15
    14,33,16,
    //16
    4,15,17,
    //17
    16,35,18,
    //18
    17,37,19,
    //19
    5,18,20,
    //20
    19,39,6,
    //21
    6,40,22,
    //22
    21,41,23,
    //23
    8,22,24,
    //24
    23,43,25,
    //25
    24,26,9,
    //26
    25,45,27,
    //27
    11,26,28,
    //28
    27,47,29,
    //29
    12,28,30,
    //30
    29,49,31,
    //31
    14,30,32,
    //32
    31,51,33,
    //33
    15,32,34,
    //34
    33,53,35,
    //35
    17,34,36,
    //36
    35,55,37,
    //37
    18,36,38,
    //38
    37,57,39,
    //39
    20,38,40,
    //40
    39,59,21,
    //41
    22,60,42,
    //42
    41,61,43,
    //43
    24,42,44,
    //44
    43,63,45,
    //45
    26,44,46,
    //46
    45,64,47,
    //47
    28,46,48,
    //48
    47,66,49,
    //49
    30,48,50,
    //50
    49,67,51,
    //51
    32,50,52,
    //52
    51,69,53,
    //53
    34,52,54,
    //54
    53,70,55,
    //55
    36,54,56,
    //56
    55,72,57,
    //57
    38,56,58,
    //58
    57,73,59,
    //59
    40,58,60,
    //60
    59,75,41,
    //61
    42,75,62,
    //62
    61,76,63,
    //63
    44,62,64,
    //64
    46,63,65,
    //65
    64,77,66,
    //66
    48,65,67,
    //67
    50,66,68,
    //68
    67,78,69,
    //69
    52,68,70,
    //70
    54,69,71,
    //71
    70,79,72,
    //72
    56,71,73,
    //73
    58,72,74,
    //74
    73,80,75,
    //75
    60,74,61,
    //76
    62,80,77,
    //77
    65,76,78,
    //78
    68,77,79,
    //79
    71,78,80,
    //80
    74,79,76
  };
  int* secondary_neighboring_cell_indices_in = new int[80*9];
  int* next_cell_index_out = new int[80];
  double* orography_in = new double[80] {
    //1
    11.0,
    //2
    12.0,
    //3
    13.0,
    //4
    14.0,
    //5
    15.0,
    //6
    16.0,
    //7
    17.0,
    //8
    6.0,
    //9
    7.0,
    //10
    20.0,
    //11
    7.5,
    //12
    4.0,
    //13
    23.0,
    //14
    2.0,
    //15
    4.5,
    //16
    26.0,
    //17
    3.0,
    //18
    7.0,
    //19
    29.0,
    //20
    30.0,
    //21
    31.0,
    //22
    32.0,
    //23
     4.0,
    //24
     1.0,
    //25
     5.0,
    //26
    36.0,
    //27
     7.0,
    //28
     5.0,
    //29
     2.0,
    //30
     0.0,
    //31
     3.0,
    //32
     4.0,
    //33
     5.0,
    //34
     0.0,
    //35
     1.0,
    //36
     4.0,
    //37
     6.0,
    //38
    38.0,
    //39
    39.0,
    //40
    40.0,
    //41
    41.0,
    //42
    42.0,
    //43
     0.0,
    //44
     1.0,
    //45
     3.0,
    //46
     4.0,
    //47
    47.0,
    //48
     6.0,
    //49
     2.0,
    //50
     5.0,
    //51
    51.0,
    //52
     3.0,
    //53
     1.0,
    //54
     2.0,
    //55
    55.0,
    //56
     3.5,
    //57
     2.5,
    //58
     0.5,
    //59
     0.0,
    //60
    60.0,
    //61
    61.0,
    //62
    62.0,
    //63
     3.0,
    //64
     5.0,
    //65
    65.0,
    //66
     8.0,
    //67
     9.0,
    //68
    68.0,
    //69
     6.0,
    //70
     7.0,
    //71
    71.0,
    //72
     4.5,
    //73
     1.5,
    //74
    74.0,
    //75
    75.0,
    //76
    76.0,
    //77
    77.0,
    //78
    78.0,
    //79
    79.0,
    //80
    80.0
  };
  bool* landsea_in = new bool[80] {
    //1
    false,
    //2
    false,
    //3
    false,
    //4
    false,
    //5
    false,
    //6
    false,
    //7
    false,
    //8
    false,
    //9
    false,
    //10
    false,
    //11
    false,
    //12
    false,
    //13
    false,
    //14
    false,
    //15
    false,
    //16
    false,
    //17
    false,
    //18
    false,
    //19
    false,
    //20
    false,
    //21
    false,
    //22
    false,
    //23
    false,
    //24
    false,
    //25
    false,
    //26
    false,
    //27
    false,
    //28
    false,
    //29
    false,
    //30
     true,
    //31
    false,
    //32
    false,
    //33
    false,
    //34
     true,
    //35
    false,
    //36
    false,
    //37
    false,
    //38
    false,
    //39
    false,
    //40
    false,
    //41
    false,
    //42
    false,
    //43
     true,
    //44
    false,
    //45
    false,
    //46
    false,
    //47
    false,
    //48
    false,
    //49
    false,
    //50
    false,
    //51
    false,
    //52
    false,
    //53
    false,
    //54
    false,
    //55
    false,
    //56
    false,
    //57
    false,
    //58
    false,
    //59
     true,
    //60
    false,
    //61
    false,
    //62
    false,
    //63
    false,
    //64
    false,
    //65
    false,
    //66
    false,
    //67
    false,
    //68
    false,
    //69
    false,
    //70
    false,
    //71
    false,
    //72
    false,
    //73
    false,
    //74
    false,
    //75
    false,
    //76
    false,
    //77
    false,
    //78
    false,
    //79
    false,
    //80
    false
  };
  int* next_cell_index_expected_out = new int[80] {
    //1
      8,
    //2
     12,
    //3
     14,
    //4
     14,
    //5
     17,
    //6
     23,
    //7
     23,
    //8
     24,
    //9
     24,
    //10
     12,
    //11
     29,
    //12
     30,
    //13
     30,
    //14
     30,
    //15
     34,
    //16
     34,
    //17
     34,
    //18
     35,
    //19
     17,
    //20
     37,
    //21
     59,
    //22
     59,
    //23
     43,
    //24
     43,
    //25
     43,
    //26
     43,
    //27
     29,
    //28
     30,
    //29
     30,
    //30
     -1,
    //31
     30,
    //32
     30,
    //33
     34,
    //34
     -1,
    //35
     34,
    //36
     34,
    //37
     35,
    //38
     59,
    //39
     59,
    //40
     59,
    //41
     59,
    //42
     43,
    //43
     -1,
    //44
     43,
    //45
     43,
    //46
     44,
    //47
     30,
    //48
     30,
    //49
     30,
    //50
     30,
    //51
     30,
    //52
     34,
    //53
     34,
    //54
     34,
    //55
     34,
    //56
     58,
    //57
     59,
    //58
     59,
    //59
     -1,
    //60
     59,
    //61
     43,
    //62
     43,
    //63
     43,
    //64
     44,
    //65
     63,
    //66
     49,
    //67
     49,
    //68
     52,
    //69
     53,
    //70
     53,
    //71
     73,
    //72
     58,
    //73
     59,
    //74
     59,
    //75
     59,
    //76
     63,
    //77
     63,
    //78
     69,
    //79
     73,
    //80
     73
  };
  bool* true_sinks_in = new bool[80];
  fill_n(true_sinks_in,80,false);
  bool use_secondary_neighbors_in=true;
  bool always_flow_to_sea_in=true;
  bool mark_pits_as_true_sinks_in=true;
  auto alg = river_direction_determination_algorithm_icon_single_index();
  icon_single_index_grid_params* grid_params_in =
      new icon_single_index_grid_params(80,cell_neighbors,
                                        true,secondary_neighboring_cell_indices_in);
  grid_params_in->icon_single_index_grid_calculate_secondary_neighbors();
  alg.setup_flags(always_flow_to_sea_in,use_secondary_neighbors_in,
                  mark_pits_as_true_sinks_in);
  alg.setup_fields(next_cell_index_out,orography_in,landsea_in,true_sinks_in,
                   grid_params_in);
  alg.determine_river_directions();
  for (auto i =0; i < 80; i++){
    EXPECT_EQ(next_cell_index_out[i],next_cell_index_expected_out[i]);
  }
  delete[] true_sinks_in;
  delete[] next_cell_index_out;
  delete[] next_cell_index_expected_out;
  delete[] orography_in;
  delete[] landsea_in;
  delete[] cell_neighbors;
  delete[] secondary_neighboring_cell_indices_in;
  delete grid_params_in;
}

TEST_F(DetermineRiverDirectionsTest, DetermineRiverDirectionsICONTestFive) {
  int* cell_neighbors = new int[80*3] {
    //1
    5,7,2,
    //2
    1,10,3,
    //3
    2,13,4,
    //4
    3,16,5,
    //5
    4,19,1,
    //6
    20,21,7,
    //7
    1,6,8,
    //8
    7,23,9,
    //9
    8,25,10,
    //10
    2,9,11,
    //11
    10,27,12,
    //12
    11,29,13,
    //13
    3,12,14,
    //14
    13,31,15,
    //15
    14,33,16,
    //16
    4,15,17,
    //17
    16,35,18,
    //18
    17,37,19,
    //19
    5,18,20,
    //20
    19,39,6,
    //21
    6,40,22,
    //22
    21,41,23,
    //23
    8,22,24,
    //24
    23,43,25,
    //25
    24,26,9,
    //26
    25,45,27,
    //27
    11,26,28,
    //28
    27,47,29,
    //29
    12,28,30,
    //30
    29,49,31,
    //31
    14,30,32,
    //32
    31,51,33,
    //33
    15,32,34,
    //34
    33,53,35,
    //35
    17,34,36,
    //36
    35,55,37,
    //37
    18,36,38,
    //38
    37,57,39,
    //39
    20,38,40,
    //40
    39,59,21,
    //41
    22,60,42,
    //42
    41,61,43,
    //43
    24,42,44,
    //44
    43,63,45,
    //45
    26,44,46,
    //46
    45,64,47,
    //47
    28,46,48,
    //48
    47,66,49,
    //49
    30,48,50,
    //50
    49,67,51,
    //51
    32,50,52,
    //52
    51,69,53,
    //53
    34,52,54,
    //54
    53,70,55,
    //55
    36,54,56,
    //56
    55,72,57,
    //57
    38,56,58,
    //58
    57,73,59,
    //59
    40,58,60,
    //60
    59,75,41,
    //61
    42,75,62,
    //62
    61,76,63,
    //63
    44,62,64,
    //64
    46,63,65,
    //65
    64,77,66,
    //66
    48,65,67,
    //67
    50,66,68,
    //68
    67,78,69,
    //69
    52,68,70,
    //70
    54,69,71,
    //71
    70,79,72,
    //72
    56,71,73,
    //73
    58,72,74,
    //74
    73,80,75,
    //75
    60,74,61,
    //76
    62,80,77,
    //77
    65,76,78,
    //78
    68,77,79,
    //79
    71,78,80,
    //80
    74,79,76
  };
  int* secondary_neighboring_cell_indices_in = new int[80*9];
  int* next_cell_index_out = new int[80];
  double* orography_in = new double[80] {
    //1
     0.0,
    //2
    12.0,
    //3
    13.0,
    //4
    14.0,
    //5
    15.0,
    //6
    16.0,
    //7
    17.0,
    //8
     1.0,
    //9
     4.0,
    //10
    20.0,
    //11
    7.5,
    //12
    4.0,
    //13
    23.0,
    //14
    2.0,
    //15
    4.5,
    //16
    26.0,
    //17
    3.0,
    //18
    7.0,
    //19
    29.0,
    //20
    30.0,
    //21
    31.0,
    //22
    32.0,
    //23
     3.0,
    //24
     5.0,
    //25
     6.0,
    //26
    36.0,
    //27
     7.0,
    //28
     5.0,
    //29
     2.0,
    //30
     0.0,
    //31
     3.0,
    //32
     4.0,
    //33
     5.0,
    //34
     0.0,
    //35
     1.0,
    //36
     4.0,
    //37
     6.0,
    //38
    38.0,
    //39
    39.0,
    //40
    40.0,
    //41
    41.0,
    //42
    42.0,
    //43
    43.0,
    //44
    44.0,
    //45
    45.0,
    //46
    46.0,
    //47
    47.0,
    //48
     6.0,
    //49
     2.0,
    //50
     5.0,
    //51
    51.0,
    //52
     3.0,
    //53
     1.0,
    //54
     2.0,
    //55
    55.0,
    //56
     3.5,
    //57
     2.5,
    //58
     0.5,
    //59
     0.0,
    //60
    60.0,
    //61
    61.0,
    //62
    62.0,
    //63
    63.0,
    //64
    64.0,
    //65
    65.0,
    //66
    66.0,
    //67
     9.0,
    //68
    68.0,
    //69
     6.0,
    //70
     7.0,
    //71
    71.0,
    //72
     4.5,
    //73
     1.5,
    //74
    74.0,
    //75
    75.0,
    //76
    76.0,
    //77
    77.0,
    //78
    78.0,
    //79
    79.0,
    //80
    80.0
  };
  bool* landsea_in = new bool[80] {
    //1
     true,
    //2
    false,
    //3
    false,
    //4
    false,
    //5
    false,
    //6
    false,
    //7
    false,
    //8
    false,
    //9
    false,
    //10
    false,
    //11
    false,
    //12
    false,
    //13
    false,
    //14
    false,
    //15
    false,
    //16
    false,
    //17
    false,
    //18
    false,
    //19
    false,
    //20
    false,
    //21
    false,
    //22
    false,
    //23
    false,
    //24
    false,
    //25
    false,
    //26
    false,
    //27
    false,
    //28
    false,
    //29
    false,
    //30
     true,
    //31
    false,
    //32
    false,
    //33
    false,
    //34
     true,
    //35
    false,
    //36
    false,
    //37
    false,
    //38
    false,
    //39
    false,
    //40
    false,
    //41
    false,
    //42
    false,
    //43
    false,
    //44
    false,
    //45
    false,
    //46
    false,
    //47
    false,
    //48
    false,
    //49
    false,
    //50
    false,
    //51
    false,
    //52
    false,
    //53
    false,
    //54
    false,
    //55
    false,
    //56
    false,
    //57
    false,
    //58
    false,
    //59
     true,
    //60
    false,
    //61
    false,
    //62
    false,
    //63
    false,
    //64
    false,
    //65
    false,
    //66
    false,
    //67
    false,
    //68
    false,
    //69
    false,
    //70
    false,
    //71
    false,
    //72
    false,
    //73
    false,
    //74
    false,
    //75
    false,
    //76
    false,
    //77
    false,
    //78
    false,
    //79
    false,
    //80
    false
  };
  int* next_cell_index_expected_out = new int[80] {
    //1
     -1,
    //2
      1,
    //3
      1,
    //4
      1,
    //5
      1,
    //6
      1,
    //7
      1,
    //8
      1,
    //9
      1,
    //10
      1,
    //11
     29,
    //12
     30,
    //13
     30,
    //14
     30,
    //15
     34,
    //16
     34,
    //17
     34,
    //18
     35,
    //19
      1,
    //20
      1,
    //21
     59,
    //22
     59,
    //23
      8,
    //24
      8,
    //25
      8,
    //26
      9,
    //27
     29,
    //28
     30,
    //29
     30,
    //30
     -1,
    //31
     30,
    //32
     30,
    //33
     34,
    //34
     -1,
    //35
     34,
    //36
     34,
    //37
     35,
    //38
     59,
    //39
     59,
    //40
     59,
    //41
     59,
    //42
     23,
    //43
     23,
    //44
     24,
    //45
     24,
    //46
     28,
    //47
     30,
    //48
     30,
    //49
     30,
    //50
     30,
    //51
     30,
    //52
     34,
    //53
     34,
    //54
     34,
    //55
     34,
    //56
     58,
    //57
     59,
    //58
     59,
    //59
     -1,
    //60
     59,
    //61
     41,
    //62
     42,
    //63
     42,
    //64
     48,
    //65
     48,
    //66
     49,
    //67
     49,
    //68
     52,
    //69
     53,
    //70
     53,
    //71
     73,
    //72
     58,
    //73
     59,
    //74
     59,
    //75
     59,
    //76
     61,
    //77
     67,
    //78
     69,
    //79
     73,
    //80
     73
  };
  bool* true_sinks_in = new bool[80];
  fill_n(true_sinks_in,80,false);
  bool use_secondary_neighbors_in=true;
  bool always_flow_to_sea_in=true;
  bool mark_pits_as_true_sinks_in=true;
  auto alg = river_direction_determination_algorithm_icon_single_index();
  icon_single_index_grid_params* grid_params_in =
      new icon_single_index_grid_params(80,cell_neighbors,
                                        true,secondary_neighboring_cell_indices_in);
  grid_params_in->icon_single_index_grid_calculate_secondary_neighbors();
  alg.setup_flags(always_flow_to_sea_in,use_secondary_neighbors_in,
                  mark_pits_as_true_sinks_in);
  alg.setup_fields(next_cell_index_out,orography_in,landsea_in,true_sinks_in,
                   grid_params_in);
  alg.determine_river_directions();
  for (auto i =0; i < 80; i++){
    EXPECT_EQ(next_cell_index_out[i],next_cell_index_expected_out[i]);
  }
  delete[] true_sinks_in;
  delete[] next_cell_index_out;
  delete[] next_cell_index_expected_out;
  delete[] orography_in;
  delete[] landsea_in;
  delete[] cell_neighbors;
  delete[] secondary_neighboring_cell_indices_in;
  delete grid_params_in;
}

TEST_F(DetermineRiverDirectionsTest, DetermineRiverDirectionsICONTestSix) {
  int* cell_neighbors = new int[80*3] {
    //1
    5,7,2,
    //2
    1,10,3,
    //3
    2,13,4,
    //4
    3,16,5,
    //5
    4,19,1,
    //6
    20,21,7,
    //7
    1,6,8,
    //8
    7,23,9,
    //9
    8,25,10,
    //10
    2,9,11,
    //11
    10,27,12,
    //12
    11,29,13,
    //13
    3,12,14,
    //14
    13,31,15,
    //15
    14,33,16,
    //16
    4,15,17,
    //17
    16,35,18,
    //18
    17,37,19,
    //19
    5,18,20,
    //20
    19,39,6,
    //21
    6,40,22,
    //22
    21,41,23,
    //23
    8,22,24,
    //24
    23,43,25,
    //25
    24,26,9,
    //26
    25,45,27,
    //27
    11,26,28,
    //28
    27,47,29,
    //29
    12,28,30,
    //30
    29,49,31,
    //31
    14,30,32,
    //32
    31,51,33,
    //33
    15,32,34,
    //34
    33,53,35,
    //35
    17,34,36,
    //36
    35,55,37,
    //37
    18,36,38,
    //38
    37,57,39,
    //39
    20,38,40,
    //40
    39,59,21,
    //41
    22,60,42,
    //42
    41,61,43,
    //43
    24,42,44,
    //44
    43,63,45,
    //45
    26,44,46,
    //46
    45,64,47,
    //47
    28,46,48,
    //48
    47,66,49,
    //49
    30,48,50,
    //50
    49,67,51,
    //51
    32,50,52,
    //52
    51,69,53,
    //53
    34,52,54,
    //54
    53,70,55,
    //55
    36,54,56,
    //56
    55,72,57,
    //57
    38,56,58,
    //58
    57,73,59,
    //59
    40,58,60,
    //60
    59,75,41,
    //61
    42,75,62,
    //62
    61,76,63,
    //63
    44,62,64,
    //64
    46,63,65,
    //65
    64,77,66,
    //66
    48,65,67,
    //67
    50,66,68,
    //68
    67,78,69,
    //69
    52,68,70,
    //70
    54,69,71,
    //71
    70,79,72,
    //72
    56,71,73,
    //73
    58,72,74,
    //74
    73,80,75,
    //75
    60,74,61,
    //76
    62,80,77,
    //77
    65,76,78,
    //78
    68,77,79,
    //79
    71,78,80,
    //80
    74,79,76
  };
  int* secondary_neighboring_cell_indices_in = new int[80*9];
  int* next_cell_index_out = new int[80];
  double* orography_in = new double[80] {
    //1
    11.0,
    //2
    12.0,
    //3
    13.0,
    //4
    14.0,
    //5
    15.0,
    //6
    16.0,
    //7
    17.0,
    //8
    6.0,
    //9
    7.0,
    //10
    20.0,
    //11
    7.5,
    //12
    4.0,
    //13
    23.0,
    //14
    2.0,
    //15
    4.5,
    //16
    26.0,
    //17
    3.0,
    //18
    7.0,
    //19
    29.0,
    //20
    30.0,
    //21
    31.0,
    //22
    32.0,
    //23
     4.0,
    //24
     1.0,
    //25
     5.0,
    //26
    36.0,
    //27
     7.0,
    //28
     5.0,
    //29
     2.0,
    //30
     0.0,
    //31
     3.0,
    //32
     4.0,
    //33
     5.0,
    //34
     0.0,
    //35
     1.0,
    //36
     4.0,
    //37
     6.0,
    //38
    38.0,
    //39
    39.0,
    //40
    40.0,
    //41
    41.0,
    //42
    42.0,
    //43
     0.0,
    //44
     1.0,
    //45
     3.0,
    //46
     4.0,
    //47
    47.0,
    //48
     6.0,
    //49
     2.0,
    //50
     5.0,
    //51
    51.0,
    //52
     3.0,
    //53
     1.0,
    //54
     2.0,
    //55
    55.0,
    //56
     3.5,
    //57
     2.5,
    //58
     0.5,
    //59
     0.0,
    //60
    60.0,
    //61
    61.0,
    //62
    62.0,
    //63
     3.0,
    //64
     5.0,
    //65
    65.0,
    //66
     8.0,
    //67
     9.0,
    //68
    68.0,
    //69
     6.0,
    //70
     7.0,
    //71
    71.0,
    //72
     4.5,
    //73
     1.5,
    //74
    74.0,
    //75
    75.0,
    //76
    76.0,
    //77
    77.0,
    //78
    78.0,
    //79
    79.0,
    //80
    80.0
  };
  bool* landsea_in = new bool[80] {
    //1
    false,
    //2
    false,
    //3
    false,
    //4
    false,
    //5
    false,
    //6
    false,
    //7
    false,
    //8
    false,
    //9
    false,
    //10
    false,
    //11
    false,
    //12
    false,
    //13
    false,
    //14
    false,
    //15
    false,
    //16
    false,
    //17
    false,
    //18
    false,
    //19
    false,
    //20
    false,
    //21
    false,
    //22
    false,
    //23
    false,
    //24
    false,
    //25
    false,
    //26
    false,
    //27
    false,
    //28
    false,
    //29
    false,
    //30
     true,
    //31
    false,
    //32
    false,
    //33
    false,
    //34
     true,
    //35
    false,
    //36
    false,
    //37
    false,
    //38
    false,
    //39
    false,
    //40
    false,
    //41
    false,
    //42
    false,
    //43
     true,
    //44
    false,
    //45
    false,
    //46
    false,
    //47
    false,
    //48
    false,
    //49
    false,
    //50
    false,
    //51
    false,
    //52
    false,
    //53
    false,
    //54
    false,
    //55
    false,
    //56
    false,
    //57
    false,
    //58
    false,
    //59
    false,
    //60
    false,
    //61
    false,
    //62
    false,
    //63
    false,
    //64
    false,
    //65
    false,
    //66
    false,
    //67
    false,
    //68
    false,
    //69
    false,
    //70
    false,
    //71
    false,
    //72
    false,
    //73
    false,
    //74
    false,
    //75
    false,
    //76
    false,
    //77
    false,
    //78
    false,
    //79
    false,
    //80
    false
  };
  int* next_cell_index_expected_out = new int[80] {
    //1
      8,
    //2
     12,
    //3
     14,
    //4
     14,
    //5
     17,
    //6
     23,
    //7
     23,
    //8
     24,
    //9
     24,
    //10
     12,
    //11
     29,
    //12
     30,
    //13
     30,
    //14
     30,
    //15
     34,
    //16
     34,
    //17
     34,
    //18
     35,
    //19
     17,
    //20
     37,
    //21
     59,
    //22
     43,
    //23
     43,
    //24
     43,
    //25
     43,
    //26
     43,
    //27
     29,
    //28
     30,
    //29
     30,
    //30
     -1,
    //31
     30,
    //32
     30,
    //33
     34,
    //34
     -1,
    //35
     34,
    //36
     34,
    //37
     35,
    //38
     59,
    //39
     59,
    //40
     59,
    //41
     43,
    //42
     43,
    //43
     -1,
    //44
     43,
    //45
     43,
    //46
     44,
    //47
     30,
    //48
     30,
    //49
     30,
    //50
     30,
    //51
     30,
    //52
     34,
    //53
     34,
    //54
     34,
    //55
     34,
    //56
     58,
    //57
     59,
    //58
     59,
    //59
     -5,
    //60
     59,
    //61
     43,
    //62
     43,
    //63
     43,
    //64
     44,
    //65
     63,
    //66
     49,
    //67
     49,
    //68
     52,
    //69
     53,
    //70
     53,
    //71
     73,
    //72
     58,
    //73
     59,
    //74
     59,
    //75
     59,
    //76
     63,
    //77
     63,
    //78
     69,
    //79
     73,
    //80
     73
  };
  bool* true_sinks_in = new bool[80];
  fill_n(true_sinks_in,80,false);
  bool use_secondary_neighbors_in=true;
  bool always_flow_to_sea_in=true;
  bool mark_pits_as_true_sinks_in=true;
  auto alg = river_direction_determination_algorithm_icon_single_index();
  icon_single_index_grid_params* grid_params_in =
      new icon_single_index_grid_params(80,cell_neighbors,
                                        true,secondary_neighboring_cell_indices_in);
  grid_params_in->icon_single_index_grid_calculate_secondary_neighbors();
  alg.setup_flags(always_flow_to_sea_in,use_secondary_neighbors_in,
                  mark_pits_as_true_sinks_in);
  alg.setup_fields(next_cell_index_out,orography_in,landsea_in,true_sinks_in,
                   grid_params_in);
  alg.determine_river_directions();
  for (auto i =0; i < 80; i++){
    EXPECT_EQ(next_cell_index_out[i],next_cell_index_expected_out[i]);
  }
  delete[] true_sinks_in;
  delete[] next_cell_index_out;
  delete[] next_cell_index_expected_out;
  delete[] orography_in;
  delete[] landsea_in;
  delete[] cell_neighbors;
  delete[] secondary_neighboring_cell_indices_in;
  delete grid_params_in;
}

} //namespace
