#include "gtest/gtest.h"
#include "drivers/l2_evaluate_basins.hpp"
#include "base/grid.hpp"
#include "base/field.hpp"
#include <vector>
using namespace std;

namespace basin_evaluation_unittests {

class BasinEvaluationTest : public ::testing::Test {
protected:
  BasinEvaluationTest() {}
  virtual ~BasinEvaluationTest() {}
};

TEST_F(BasinEvaluationTest,BasinEvaluationSingleLake) {
  int nlat_fine = 6;
  int nlon_fine = 6;
  int nlat_coarse = 3;
  int nlon_coarse = 3;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,false);
  int* coarse_catchment_nums_in = new int[3*3] {1, 1, 1,
                                         1, 1, 1,
                                         1, 1, 1 };
  double* corrected_orography_in = new double[6*6] {
      10., 10., 10., 10., 10., 10.,
      10., 10.,  8.,  8.,  5., 10.,
      10.,  7.,  5.,  5.,  6., 10.,
      10.,  7.,  5.,  5.,  6., 10.,
      10., 10., 10., 10., 10., 10.,
      10., 10., 10., 10., 10.,  0. };

  double* raw_orography_in = new double[6*6] {
      10., 10., 10., 10., 10., 10.,
      10., 10.,  8.,  8.,  5., 10.,
      10.,  7.,  5.,  5.,  6., 10.,
      10.,  7.,  5.,  5.,  6., 10.,
      10., 10., 10., 10., 10., 10.,
      10., 10., 10., 10.,  0.,  0. };

  bool* minima_in = new bool[6*6] {
      false, false, false, false, false, false,
      false, false, false, false, false, false,
      false, false, false, false, false, false,
      false, false, true,  false, false, false,
      false, false, false, false, false, false,
      false, false, false, false, false, false };
  int* prior_fine_rdirs_in = new int[6*6] {
      2, 2, 2, 2, 2, 2,
      2, 2, 2, 2, 2, 2,
      2, 6, 2, 1, 4, 2,
      2, 6, 5, 4, 4, 2,
      2, 2, 2, 2, 2, 2,
      6, 6, 6, 6, 6, 0 };
  int* prior_fine_catchments_in = new int[6*6] {
      1, 2, 2, 2, 2, 1,
      1, 2, 2, 2, 2, 1,
      1, 2, 2, 2, 2, 1,
      1, 2, 2, 2, 2, 1,
      1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1 };
  double* cell_areas_in = new double[6*6];
  std::fill_n(cell_areas_in,6*6,1.0);
  bool* landsea_in = new bool[6*6];
  std:fill_n(landsea_in,6*6,false);
  landsea_in[6*6-1] = true;
  int number_of_lakes = -1;
  bool* lake_mask = new bool[6*6];
  int* lake_numbers = new int[6*6];
  short* sinkless_rdirs = new short[6*6];
  vector<double>* lakes_as_array =
    latlon_evaluate_basins(landsea_in,
                           minima_in,
                           raw_orography_in,
                           corrected_orography_in,
                           cell_areas_in,
                           prior_fine_rdirs_in,
                           prior_fine_catchments_in,
                           coarse_catchment_nums_in,
                           nlat_fine,nlon_fine,
                           nlat_coarse,nlon_coarse,
                           lake_numbers,
                           sinkless_rdirs,
                           number_of_lakes,
                           lake_mask);
  bool* expected_lake_mask = new bool[6*6] {
      false, false, false, false, false, false,
      false, false,  true,  true,  true, false,
      false,  true,  true,  true,  true, false,
      false,  true,  true,  true,  true, false,
      false, false, false, false, false, false,
      false, false, false, false, false, false };
  vector<double>* expected_lakes_as_array = new vector<double> {
    1.0, 66.0, 1.0, -1.0, 0.0, 4.0, 3.0, 11.0, 4.0, 3.0, 1.0, 0.0, 5.0, 4.0, 4.0,
    1.0, 0.0, 5.0, 3.0, 4.0, 1.0, 0.0, 5.0, 3.0, 3.0, 1.0, 0.0, 5.0, 2.0, 5.0,
    1.0, 5.0, 6.0, 4.0, 5.0, 1.0, 5.0, 6.0, 3.0, 5.0, 1.0, 12.0, 7.0, 4.0, 2.0,
    1.0, 12.0, 7.0, 3.0, 2.0, 1.0, 21.0, 8.0, 2.0, 4.0, 1.0, 21.0, 8.0, 2.0, 3.0,
    1.0, 43.0, 10.0, 1.0, -1.0, 3.0, 3.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 1);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,BasinEvaluationTwoLakes) {
  int nlat_fine = 6;
  int nlon_fine = 6;
  int nlat_coarse = 3;
  int nlon_coarse = 3;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[3*3] {2, 2, 1,
                                         2, 2, 1,
                                         2, 2, 1 };
  double* corrected_orography_in = new double[6*6] {
      10., 10., 10., 10., 10., 10.,
      10., 10., 10., 10., 10., 10.,
      10.,  5., 10., 10.,  5., 10.,
      10.,  5.,  6.,  8.,  5., 10.,
      10., 10., 10., 10., 10., 10.,
      10., 10., 10., 10., 10.,  0. };

  double* raw_orography_in = new double[6*6] {
      10., 10., 10., 10., 10., 10.,
      10., 10., 10., 10., 10., 10.,
      10.,  5., 10., 10.,  5., 10.,
      10.,  5.,  6.,  8.,  5., 10.,
      10., 10., 10., 10., 10., 10.,
      10., 10., 10., 10., 10.,  0. };

  bool* minima_in = new bool[6*6] {
      false, false, false, false, false, false,
      false, false, false, false, false, false,
      false, false, false, false, false, false,
      false,  true, false, false,  true, false,
      false, false, false, false, false, false,
      false, false, false, false, false, false };
  int* prior_fine_rdirs_in = new int[6*6] {
      2, 2, 2, 2, 2, 2,
      2, 2, 2, 2, 2, 2,
      2, 6, 2, 3, 2, 2,
      2, 5, 4, 6, 5, 2,
      2, 2, 2, 2, 2, 2,
      6, 6, 6, 6, 6, 0 };
  int* prior_fine_catchments_in = new int[6*6] {
      1, 3, 3, 2, 2, 1,
      1, 3, 3, 2, 2, 1,
      1, 3, 3, 2, 2, 1,
      1, 3, 3, 2, 2, 1,
      1, 3, 3, 2, 2, 1,
      1, 1, 1, 1, 1, 1 };
  double* cell_areas_in = new double[6*6];
  std::fill_n(cell_areas_in,6*6,1.0);
  bool* landsea_in = new bool[6*6];
  std:fill_n(landsea_in,6*6,false);
  landsea_in[6*6-1] = true;
  int number_of_lakes = -1;
  bool* lake_mask = new bool[6*6];
  int* lake_numbers = new int[6*6];
  short* sinkless_rdirs = new short[6*6];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[6*6] {
       false, false, false, false, false, false,
       false, false, false, false, false, false,
       false,  true, false, false,  true, false,
       false,  true,  true,  true,  true, false,
       false, false, false, false, false, false,
       false, false, false, false, false, false };
  //Minor ordering changes compared to python version
  vector<double>* expected_lakes_as_array = new vector<double> {
    3.0, 21.0, 1.0, 3.0, 0.0, 4.0, 5.0, 2.0, 4.0, 5.0, 1.0, 0.0, 5.0, 3.0, 5.0,
    1.0, 6.0, 8.0, 1.0, 2.0, 2.0, 2.0, 0.0, 26.0, 2.0, 3.0, 0.0, 4.0, 2.0, 3.0,
    4.0, 2.0, 1.0, 0.0, 5.0, 3.0, 2.0, 1.0, 2.0, 6.0, 4.0, 3.0, 1.0, 8.0, 8.0,
    1.0, 1.0, -1.0, -1.0, 1.0, 43.0, 3.0, -1.0, 2.0, 1.0, 2.0, 4.0, 5.0, 6.0, 4.0,
    5.0, 1.0, 0.0, 8.0, 3.0, 5.0, 1.0, 0.0, 8.0, 4.0, 4.0, 1.0, 0.0, 8.0, 4.0,
    3.0, 1.0, 0.0, 8.0, 4.0, 2.0, 1.0, 0.0, 8.0, 3.0, 2.0, 1.0, 12.0, 10.0, 1.0,
    -1.0, 3.0, 3.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 3);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,BasinEvaluationSingleLakeTwo) {
  int nlat_fine = 9;
  int nlon_fine = 9;
  int nlat_coarse = 3;
  int nlon_coarse = 3;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[3*3] {2, 1, 1,
                                         2, 2, 1,
                                         2, 2, 1 };
  double* corrected_orography_in = new double[9*9] {
      10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0, 2.0, 3.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 0.0 };

  double* raw_orography_in = new double[9*9] {
      10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0, 1.0, 3.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 0.0 };

  bool* minima_in = new bool[9*9] {
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false, true,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false };
  int* prior_fine_rdirs_in = new int[9*9] {
      3, 2, 6, 6, 6, 6, 6, 6, 2,
      3, 3, 8, 6, 6, 6, 6, 6, 2,
      4, 4, 5, 4, 4, 4, 2, 2, 2,
      8, 7, 8, 4, 4, 4, 2, 2, 2,
      8, 7, 8, 4, 4, 4, 2, 2, 2,
      8, 7, 8, 4, 4, 4, 2, 2, 2,
      8, 8, 8, 4, 4, 4, 2, 2, 2,
      8, 8, 8, 4, 4, 4, 2, 2, 2,
      8, 8, 8, 4, 4, 4, 2, 6, 0 };
  int* prior_fine_catchments_in = new int[9*9] {
      1, 1, 2, 2, 2, 2, 2, 2, 2,
      1, 1, 2, 2, 2, 2, 2, 2, 2,
      1, 1, 1, 1, 1, 1, 2, 2, 2,
      1, 1, 1, 1, 1, 1, 2, 2, 2,
      1, 1, 1, 1, 1, 1, 2, 2, 2,
      1, 1, 1, 1, 1, 1, 2, 2, 2,
      1, 1, 1, 1, 1, 1, 2, 2, 2,
      1, 1, 1, 1, 1, 1, 2, 2, 2,
      1, 1, 1, 1, 1, 1, 2, 6, 0 };
  double* cell_areas_in = new double[9*9];
  std::fill_n(cell_areas_in,9*9,1.0);
  bool* landsea_in = new bool[9*9];
  std:fill_n(landsea_in,9*9,false);
  landsea_in[9*9-1] = true;
  int number_of_lakes = -1;
  bool* lake_mask = new bool[9*9];
  int* lake_numbers = new int[9*9];
  short* sinkless_rdirs = new short[9*9];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[9*9] {
       false, false, false,  true, false, false, false, false, false,
       false, false, false,  true, false, false, false, false, false,
       false, false,  true,  true, false, false, false, false, false,
       false, false,  true,  true, false, false, false, false, false,
       false, false,  true,  true, false, false, false, false, false,
       false, false, false, false, false, false, false, false, false,
       false, false, false, false, false, false, false, false, false,
       false, false, false, false, false, false, false, false, false,
       false, false, false, false, false, false, false, false, false };
  //Minor ordering changes compared to python version
  vector<double>* expected_lakes_as_array = new vector<double> {
    1.0, 51.0, 1.0, -1.0, 0.0, 3.0, 3.0, 8.0, 3.0, 3.0, 1.0, 1.0, 2.0, 4.0, 4.0,
    1.0, 1.0, 2.0, 4.0, 3.0, 1.0, 1.0, 2.0, 5.0, 4.0, 1.0, 1.0, 2.0, 5.0, 3.0,
    1.0, 6.0, 3.0, 3.0, 4.0, 1.0, 6.0, 3.0, 2.0, 4.0, 1.0, 6.0, 3.0, 1.0, 4.0,
    1.0, 62.0, 10.0, 1.0, -1.0, 3.0, 3.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 1);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,BasinEvaluationSingleLakeThree) {
  int nlat_fine = 9;
  int nlon_fine = 9;
  int nlat_coarse = 3;
  int nlon_coarse = 3;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[3*3] {2, 1, 1,
                                         2, 1, 1,
                                         2, 1, 1 };
  double* corrected_orography_in = new double[9*9] {
      10.0,10.0,10.0, 5.0,8.375,8.0, 8.0, 8.0,8.0,
      10.0,10.0,10.0, 5.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,0.0 };

  double* raw_orography_in = new double[9*9] {
      10.0,10.0,10.0, 5.0,8.375,8.0, 8.0, 8.0,8.0,
      10.0,10.0,10.0, 5.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0, 2.0, 2.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,8.0,
      10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,0.0 };

  bool* minima_in = new bool[9*9] {
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false, true,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false };
  int* prior_fine_rdirs_in = new int[9*9] {
      2, 2, 2, 6, 6, 6, 6, 6, 2,
      6, 3, 2, 6, 6, 6, 6, 6, 2,
      6, 6, 5, 8, 8, 8, 2, 2, 2,
      8, 8, 8, 8, 8, 8, 2, 2, 2,
      8, 8, 8, 8, 8, 8, 2, 2, 2,
      8, 8, 8, 8, 8, 8, 2, 2, 2,
      8, 8, 8, 8, 8, 8, 2, 2, 2,
      8, 8, 8, 8, 8, 8, 2, 2, 2,
      8, 8, 8, 8, 8, 8, 6, 6, 0 };
  int* prior_fine_catchments_in = new int[9*9] {
      1, 1, 2, 2, 2, 2, 2, 2, 2,
      1, 1, 2, 2, 2, 2, 2, 2, 2,
      1, 1, 1, 1, 2, 2, 2, 2, 2,
      1, 1, 1, 1, 2, 2, 2, 2, 2,
      1, 1, 1, 1, 2, 2, 2, 2, 2,
      1, 1, 1, 1, 2, 2, 2, 2, 2,
      1, 1, 1, 1, 2, 2, 2, 2, 2,
      1, 1, 1, 1, 2, 2, 2, 2, 2,
      1, 1, 1, 1, 2, 2, 2, 2, 0 };
  double* cell_areas_in = new double[9*9];
  std::fill_n(cell_areas_in,9*9,86400.0/9.0);
  bool* landsea_in = new bool[9*9];
  std:fill_n(landsea_in,9*9,false);
  landsea_in[9*9-1] = true;
  int number_of_lakes = -1;
  bool* lake_mask = new bool[9*9];
  int* lake_numbers = new int[9*9];
  short* sinkless_rdirs = new short[9*9];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[9*9] {
       false, false, false,  true, false, false, false, false, false,
       false, false, false,  true, false, false, false, false, false,
       false, false,  true,  true, false, false, false, false, false,
       false, false,  true,  true, false, false, false, false, false,
       false, false,  true,  true, false, false, false, false, false,
       false, false, false, false, false, false, false, false, false,
       false, false, false, false, false, false, false, false, false,
       false, false, false, false, false, false, false, false, false,
       false, false, false, false, false, false, false, false, false };
  //Minor ordering changes compared to python version
  vector<double>* expected_lakes_as_array = new vector<double> {
    1.0, 51.0, 1.0, -1.0, 0.0, 3.0, 3.0, 8.0, 3.0, 3.0, 1.0, 0.0, 2.0, 4.0, 4.0,
    1.0, 0.0, 2.0, 3.0, 4.0, 1.0, 0.0, 2.0, 4.0, 3.0, 1.0, 0.0, 2.0, 5.0, 4.0,
    1.0, 0.0, 2.0, 5.0, 3.0, 1.0, 172800.0, 5.0, 2.0, 4.0, 1.0, 172800.0, 5.0, 1.0, 4.0,
    1.0, 432000.0, 8.375, 1.0, -1.0, 1.0, 2.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 1);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,BasinEvaluationSingleLakeFour) {
  int nlat_fine = 20;
  int nlon_fine = 20;
  int nlat_coarse = 4;
  int nlon_coarse = 4;
  grid_params* fine_grid_params =
    new latlon_grid_params(4,4,true);
  int* coarse_catchment_nums_in = new int[4*4] {2,2,2,2,
                                         2,2,2,2,
                                         2,2,2,1,
                                         2,2,2,0 };
  double* corrected_orography_in = new double[20*20] {
      3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,
      3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,2.0,3.0,3.0,3.0,3.0,
      3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,1.0,1.0,1.0,0.0 };
  double* raw_orography_in = new double[20*20] {
      3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,
      3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,2.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,3.0,3.0,3.0,
      3.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,2.0,3.0,3.0,3.0,3.0,
      3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,1.0,1.0,1.0,0.0 };
  bool* minima_in = new bool[20*20] {
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               true ,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false,
        false,false,false,false,false,false,false,false,false,false,
               false,false,false,false,false,false,false,false,false,false };
  int* prior_fine_rdirs_in = new int[20*20] {
      7,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,
      3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,
      6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,
      6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,
      6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,
      6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,
      6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,
      6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,
      6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,
      6,6,6,6,6,6,6,6,6,6,5,4,4,4,4,4,4,4,4,4,
      6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,
      6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,
      6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,
      6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,
      6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,
      6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,
      6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,
      6,9,8,8,8,8,8,8,8,8,8,8,8,7,3,7,2,2,2,2,
      8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,3,2,2,2,2,
      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,6,6,6,0 };
  int* prior_fine_catchments_in = new int[20*20] {
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,1,1,1,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0 };
  double* cell_areas_in = new double[20*20];
  std::fill_n(cell_areas_in,20*20,1.0);
  bool* landsea_in = new bool[20*20];
  std:fill_n(landsea_in,20*20,false);
  landsea_in[20*20-1] = true;
  int number_of_lakes = -1;
  bool* lake_mask = new bool[20*20];
  int* lake_numbers = new int[20*20];
  short* sinkless_rdirs = new short[20*20];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[20*20] {
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true, false, false, false, false,
         true, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true, false, false, false, false,
        false, false,
       false, false,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false };
  //Significant number of changes in filling order from python version
  //but thresholds and outflows are the same
  //Checked and cells in each lake are also the same
  vector<double>* expected_lakes_as_array = new vector<double> {
    1.0, 1481.0, 1.0, -1.0, 0.0, 10.0, 11.0, 294.0, 10.0, 11.0, 1.0, 0.0, 1.0, 11.0, 12.0,
    1.0, 0.0, 1.0, 10.0, 12.0, 1.0, 0.0, 1.0, 9.0, 12.0, 1.0, 0.0, 1.0, 11.0, 11.0,
    1.0, 0.0, 1.0, 9.0, 11.0, 1.0, 0.0, 1.0, 11.0, 10.0, 1.0, 0.0, 1.0, 10.0, 10.0,
    1.0, 0.0, 1.0, 9.0, 10.0, 1.0, 0.0, 1.0, 12.0, 13.0, 1.0, 0.0, 1.0, 11.0, 13.0,
    1.0, 0.0, 1.0, 10.0, 13.0, 1.0, 0.0, 1.0, 12.0, 12.0, 1.0, 0.0, 1.0, 12.0, 11.0,
    1.0, 0.0, 1.0, 9.0, 13.0, 1.0, 0.0, 1.0, 8.0, 13.0, 1.0, 0.0, 1.0, 8.0, 12.0,
    1.0, 0.0, 1.0, 8.0, 11.0, 1.0, 0.0, 1.0, 12.0, 10.0, 1.0, 0.0, 1.0, 8.0, 10.0,
    1.0, 0.0, 1.0, 12.0, 9.0, 1.0, 0.0, 1.0, 11.0, 9.0, 1.0, 0.0, 1.0, 10.0, 9.0,
    1.0, 0.0, 1.0, 9.0, 9.0, 1.0, 0.0, 1.0, 8.0, 9.0, 1.0, 0.0, 1.0, 13.0, 14.0,
    1.0, 0.0, 1.0, 12.0, 14.0, 1.0, 0.0, 1.0, 11.0, 14.0, 1.0, 0.0, 1.0, 13.0, 13.0,
    1.0, 0.0, 1.0, 13.0, 12.0, 1.0, 0.0, 1.0, 10.0, 14.0, 1.0, 0.0, 1.0, 9.0, 14.0,
    1.0, 0.0, 1.0, 13.0, 11.0, 1.0, 0.0, 1.0, 13.0, 10.0, 1.0, 0.0, 1.0, 8.0, 14.0,
    1.0, 0.0, 1.0, 7.0, 14.0, 1.0, 0.0, 1.0, 7.0, 13.0, 1.0, 0.0, 1.0, 7.0, 12.0,
    1.0, 0.0, 1.0, 7.0, 11.0, 1.0, 0.0, 1.0, 7.0, 10.0, 1.0, 0.0, 1.0, 13.0, 9.0,
    1.0, 0.0, 1.0, 7.0, 9.0, 1.0, 0.0, 1.0, 13.0, 8.0, 1.0, 0.0, 1.0, 12.0, 8.0,
    1.0, 0.0, 1.0, 11.0, 8.0, 1.0, 0.0, 1.0, 10.0, 8.0, 1.0, 0.0, 1.0, 9.0, 8.0,
    1.0, 0.0, 1.0, 8.0, 8.0, 1.0, 0.0, 1.0, 7.0, 8.0, 1.0, 0.0, 1.0, 13.0, 15.0,
    1.0, 0.0, 1.0, 12.0, 15.0, 1.0, 0.0, 1.0, 14.0, 14.0, 1.0, 0.0, 1.0, 14.0, 13.0,
    1.0, 0.0, 1.0, 11.0, 15.0, 1.0, 0.0, 1.0, 10.0, 15.0, 1.0, 0.0, 1.0, 14.0, 12.0,
    1.0, 0.0, 1.0, 14.0, 11.0, 1.0, 0.0, 1.0, 9.0, 15.0, 1.0, 0.0, 1.0, 8.0, 15.0,
    1.0, 0.0, 1.0, 14.0, 10.0, 1.0, 0.0, 1.0, 14.0, 9.0, 1.0, 0.0, 1.0, 7.0, 15.0,
    1.0, 0.0, 1.0, 6.0, 15.0, 1.0, 0.0, 1.0, 6.0, 14.0, 1.0, 0.0, 1.0, 6.0, 13.0,
    1.0, 0.0, 1.0, 6.0, 12.0, 1.0, 0.0, 1.0, 6.0, 11.0, 1.0, 0.0, 1.0, 6.0, 10.0,
    1.0, 0.0, 1.0, 6.0, 9.0, 1.0, 0.0, 1.0, 14.0, 8.0, 1.0, 0.0, 1.0, 6.0, 8.0,
    1.0, 0.0, 1.0, 14.0, 7.0, 1.0, 0.0, 1.0, 13.0, 7.0, 1.0, 0.0, 1.0, 12.0, 7.0,
    1.0, 0.0, 1.0, 11.0, 7.0, 1.0, 0.0, 1.0, 10.0, 7.0, 1.0, 0.0, 1.0, 9.0, 7.0,
    1.0, 0.0, 1.0, 8.0, 7.0, 1.0, 0.0, 1.0, 7.0, 7.0, 1.0, 0.0, 1.0, 6.0, 7.0,
    1.0, 0.0, 1.0, 13.0, 16.0, 1.0, 0.0, 1.0, 12.0, 16.0, 1.0, 0.0, 1.0, 11.0, 16.0,
    1.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 1.0, 15.0, 13.0, 1.0, 0.0, 1.0, 15.0, 12.0,
    1.0, 0.0, 1.0, 10.0, 16.0, 1.0, 0.0, 1.0, 9.0, 16.0, 1.0, 0.0, 1.0, 15.0, 11.0,
    1.0, 0.0, 1.0, 15.0, 10.0, 1.0, 0.0, 1.0, 8.0, 16.0, 1.0, 0.0, 1.0, 7.0, 16.0,
    1.0, 0.0, 1.0, 15.0, 9.0, 1.0, 0.0, 1.0, 15.0, 8.0, 1.0, 0.0, 1.0, 6.0, 16.0,
    1.0, 0.0, 1.0, 5.0, 16.0, 1.0, 0.0, 1.0, 5.0, 15.0, 1.0, 0.0, 1.0, 5.0, 14.0,
    1.0, 0.0, 1.0, 5.0, 13.0, 1.0, 0.0, 1.0, 5.0, 12.0, 1.0, 0.0, 1.0, 5.0, 11.0,
    1.0, 0.0, 1.0, 5.0, 10.0, 1.0, 0.0, 1.0, 5.0, 9.0, 1.0, 0.0, 1.0, 5.0, 8.0,
    1.0, 0.0, 1.0, 15.0, 7.0, 1.0, 0.0, 1.0, 5.0, 7.0, 1.0, 0.0, 1.0, 15.0, 6.0,
    1.0, 0.0, 1.0, 14.0, 6.0, 1.0, 0.0, 1.0, 13.0, 6.0, 1.0, 0.0, 1.0, 12.0, 6.0,
    1.0, 0.0, 1.0, 11.0, 6.0, 1.0, 0.0, 1.0, 10.0, 6.0, 1.0, 0.0, 1.0, 9.0, 6.0,
    1.0, 0.0, 1.0, 8.0, 6.0, 1.0, 0.0, 1.0, 7.0, 6.0, 1.0, 0.0, 1.0, 6.0, 6.0,
    1.0, 0.0, 1.0, 5.0, 6.0, 1.0, 0.0, 1.0, 13.0, 17.0, 1.0, 0.0, 1.0, 12.0, 17.0,
    1.0, 0.0, 1.0, 11.0, 17.0, 1.0, 0.0, 1.0, 10.0, 17.0, 1.0, 0.0, 1.0, 16.0, 14.0,
    1.0, 0.0, 1.0, 16.0, 13.0, 1.0, 0.0, 1.0, 16.0, 12.0, 1.0, 0.0, 1.0, 16.0, 11.0,
    1.0, 0.0, 1.0, 9.0, 17.0, 1.0, 0.0, 1.0, 8.0, 17.0, 1.0, 0.0, 1.0, 16.0, 10.0,
    1.0, 0.0, 1.0, 16.0, 9.0, 1.0, 0.0, 1.0, 7.0, 17.0, 1.0, 0.0, 1.0, 6.0, 17.0,
    1.0, 0.0, 1.0, 16.0, 8.0, 1.0, 0.0, 1.0, 16.0, 7.0, 1.0, 0.0, 1.0, 5.0, 17.0,
    1.0, 0.0, 1.0, 4.0, 17.0, 1.0, 0.0, 1.0, 4.0, 16.0, 1.0, 0.0, 1.0, 4.0, 15.0,
    1.0, 0.0, 1.0, 4.0, 14.0, 1.0, 0.0, 1.0, 4.0, 13.0, 1.0, 0.0, 1.0, 4.0, 12.0,
    1.0, 0.0, 1.0, 4.0, 11.0, 1.0, 0.0, 1.0, 4.0, 10.0, 1.0, 0.0, 1.0, 4.0, 9.0,
    1.0, 0.0, 1.0, 4.0, 8.0, 1.0, 0.0, 1.0, 4.0, 7.0, 1.0, 0.0, 1.0, 16.0, 6.0,
    1.0, 0.0, 1.0, 4.0, 6.0, 1.0, 0.0, 1.0, 16.0, 5.0, 1.0, 0.0, 1.0, 15.0, 5.0,
    1.0, 0.0, 1.0, 14.0, 5.0, 1.0, 0.0, 1.0, 13.0, 5.0, 1.0, 0.0, 1.0, 12.0, 5.0,
    1.0, 0.0, 1.0, 11.0, 5.0, 1.0, 0.0, 1.0, 10.0, 5.0, 1.0, 0.0, 1.0, 9.0, 5.0,
    1.0, 0.0, 1.0, 8.0, 5.0, 1.0, 0.0, 1.0, 7.0, 5.0, 1.0, 0.0, 1.0, 6.0, 5.0,
    1.0, 0.0, 1.0, 5.0, 5.0, 1.0, 0.0, 1.0, 4.0, 5.0, 1.0, 0.0, 1.0, 13.0, 18.0,
    1.0, 0.0, 1.0, 12.0, 18.0, 1.0, 0.0, 1.0, 11.0, 18.0, 1.0, 0.0, 1.0, 10.0, 18.0,
    1.0, 0.0, 1.0, 9.0, 18.0, 1.0, 0.0, 1.0, 17.0, 14.0, 1.0, 0.0, 1.0, 17.0, 13.0,
    1.0, 0.0, 1.0, 17.0, 12.0, 1.0, 0.0, 1.0, 17.0, 11.0, 1.0, 0.0, 1.0, 17.0, 10.0,
    1.0, 0.0, 1.0, 8.0, 18.0, 1.0, 0.0, 1.0, 7.0, 18.0, 1.0, 0.0, 1.0, 17.0, 9.0,
    1.0, 0.0, 1.0, 17.0, 8.0, 1.0, 0.0, 1.0, 6.0, 18.0, 1.0, 0.0, 1.0, 5.0, 18.0,
    1.0, 0.0, 1.0, 17.0, 7.0, 1.0, 0.0, 1.0, 17.0, 6.0, 1.0, 0.0, 1.0, 4.0, 18.0,
    1.0, 0.0, 1.0, 17.0, 5.0, 1.0, 0.0, 1.0, 17.0, 4.0, 1.0, 0.0, 1.0, 16.0, 4.0,
    1.0, 0.0, 1.0, 15.0, 4.0, 1.0, 0.0, 1.0, 14.0, 4.0, 1.0, 0.0, 1.0, 13.0, 4.0,
    1.0, 0.0, 1.0, 12.0, 4.0, 1.0, 0.0, 1.0, 11.0, 4.0, 1.0, 0.0, 1.0, 10.0, 4.0,
    1.0, 0.0, 1.0, 9.0, 4.0, 1.0, 0.0, 1.0, 8.0, 4.0, 1.0, 0.0, 1.0, 7.0, 4.0,
    1.0, 0.0, 1.0, 6.0, 4.0, 1.0, 0.0, 1.0, 5.0, 4.0, 1.0, 0.0, 1.0, 4.0, 4.0,
    1.0, 0.0, 1.0, 17.0, 3.0, 1.0, 0.0, 1.0, 16.0, 3.0, 1.0, 0.0, 1.0, 15.0, 3.0,
    1.0, 0.0, 1.0, 14.0, 3.0, 1.0, 0.0, 1.0, 13.0, 3.0, 1.0, 0.0, 1.0, 12.0, 3.0,
    1.0, 0.0, 1.0, 11.0, 3.0, 1.0, 0.0, 1.0, 10.0, 3.0, 1.0, 0.0, 1.0, 9.0, 3.0,
    1.0, 0.0, 1.0, 8.0, 3.0, 1.0, 0.0, 1.0, 7.0, 3.0, 1.0, 0.0, 1.0, 6.0, 3.0,
    1.0, 0.0, 1.0, 5.0, 3.0, 1.0, 0.0, 1.0, 4.0, 3.0, 1.0, 208.0, 2.0, 3.0, 18.0,
    1.0, 208.0, 2.0, 3.0, 17.0, 1.0, 208.0, 2.0, 3.0, 16.0, 1.0, 208.0, 2.0, 3.0, 15.0,
    1.0, 208.0, 2.0, 3.0, 14.0, 1.0, 208.0, 2.0, 3.0, 13.0, 1.0, 208.0, 2.0, 3.0, 12.0,
    1.0, 208.0, 2.0, 3.0, 11.0, 1.0, 208.0, 2.0, 3.0, 10.0, 1.0, 208.0, 2.0, 3.0, 9.0,
    1.0, 208.0, 2.0, 3.0, 8.0, 1.0, 208.0, 2.0, 3.0, 7.0, 1.0, 208.0, 2.0, 3.0, 6.0,
    1.0, 208.0, 2.0, 3.0, 5.0, 1.0, 208.0, 2.0, 3.0, 4.0, 1.0, 208.0, 2.0, 14.0, 19.0,
    1.0, 208.0, 2.0, 13.0, 19.0, 1.0, 208.0, 2.0, 12.0, 19.0, 1.0, 208.0, 2.0, 11.0, 19.0,
    1.0, 208.0, 2.0, 10.0, 19.0, 1.0, 208.0, 2.0, 9.0, 19.0, 1.0, 208.0, 2.0, 8.0, 19.0,
    1.0, 208.0, 2.0, 18.0, 14.0, 1.0, 208.0, 2.0, 18.0, 13.0, 1.0, 208.0, 2.0, 18.0, 12.0,
    1.0, 208.0, 2.0, 18.0, 11.0, 1.0, 208.0, 2.0, 18.0, 10.0, 1.0, 208.0, 2.0, 18.0, 9.0,
    1.0, 208.0, 2.0, 7.0, 19.0, 1.0, 208.0, 2.0, 6.0, 19.0, 1.0, 208.0, 2.0, 18.0, 8.0,
    1.0, 208.0, 2.0, 18.0, 7.0, 1.0, 208.0, 2.0, 5.0, 19.0, 1.0, 208.0, 2.0, 4.0, 19.0,
    1.0, 208.0, 2.0, 18.0, 6.0, 1.0, 208.0, 2.0, 18.0, 5.0, 1.0, 208.0, 2.0, 3.0, 19.0,
    1.0, 208.0, 2.0, 18.0, 4.0, 1.0, 208.0, 2.0, 18.0, 3.0, 1.0, 208.0, 2.0, 3.0, 3.0,
    1.0, 208.0, 2.0, 18.0, 2.0, 1.0, 208.0, 2.0, 17.0, 2.0, 1.0, 208.0, 2.0, 16.0, 2.0,
    1.0, 208.0, 2.0, 15.0, 2.0, 1.0, 208.0, 2.0, 14.0, 2.0, 1.0, 208.0, 2.0, 13.0, 2.0,
    1.0, 208.0, 2.0, 12.0, 2.0, 1.0, 208.0, 2.0, 11.0, 2.0, 1.0, 208.0, 2.0, 10.0, 2.0,
    1.0, 208.0, 2.0, 9.0, 2.0, 1.0, 208.0, 2.0, 8.0, 2.0, 1.0, 208.0, 2.0, 7.0, 2.0,
    1.0, 208.0, 2.0, 6.0, 2.0, 1.0, 208.0, 2.0, 5.0, 2.0, 1.0, 208.0, 2.0, 4.0, 2.0,
    1.0, 208.0, 2.0, 3.0, 2.0, 1.0, 208.0, 2.0, 2.0, 19.0, 1.0, 208.0, 2.0, 2.0, 18.0,
    1.0, 208.0, 2.0, 2.0, 17.0, 1.0, 208.0, 2.0, 2.0, 16.0, 1.0, 208.0, 2.0, 2.0, 15.0,
    1.0, 208.0, 2.0, 2.0, 14.0, 1.0, 208.0, 2.0, 2.0, 13.0, 1.0, 208.0, 2.0, 2.0, 12.0,
    1.0, 208.0, 2.0, 2.0, 11.0, 1.0, 208.0, 2.0, 2.0, 10.0, 1.0, 208.0, 2.0, 2.0, 9.0,
    1.0, 208.0, 2.0, 2.0, 8.0, 1.0, 208.0, 2.0, 2.0, 7.0, 1.0, 208.0, 2.0, 2.0, 6.0,
    1.0, 208.0, 2.0, 2.0, 5.0, 1.0, 208.0, 2.0, 2.0, 4.0, 1.0, 208.0, 2.0, 2.0, 3.0,
    1.0, 208.0, 2.0, 19.0, 14.0, 1.0, 208.0, 2.0, 19.0, 13.0, 1.0, 208.0, 2.0, 19.0, 12.0,
    1.0, 208.0, 2.0, 19.0, 11.0, 1.0, 208.0, 2.0, 19.0, 10.0, 1.0, 208.0, 2.0, 19.0, 9.0,
    1.0, 208.0, 2.0, 19.0, 8.0, 1.0, 208.0, 2.0, 19.0, 7.0, 1.0, 208.0, 2.0, 19.0, 6.0,
    1.0, 208.0, 2.0, 19.0, 5.0, 1.0, 208.0, 2.0, 19.0, 4.0, 1.0, 208.0, 2.0, 19.0, 3.0,
    1.0, 208.0, 2.0, 2.0, 2.0, 1.0, 502.0, 3.0, 1.0, -1.0, 4.0, 4.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 1);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,EvaluateBasinsOne) {
  int nlat_fine = 20;
  int nlon_fine = 20;
  int nlat_coarse = 4;
  int nlon_coarse = 4;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[4*4] {3,3,7,2,
                                         3,6,7,2,
                                         5,4,1,2,
                                         5,4,1,1 };
  double* corrected_orography_in = new double[20*20] {
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0,
     1.0, 8.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 6.0, 6.0, 5.0, 6.0,10.0,10.0,10.0, 1.0,
     10.0, 3.0, 3.0,10.0,10.0, 7.0, 3.0,10.0,10.0,10.0,10.0, 6.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,10.0,10.0,
     10.0, 3.0, 3.0,10.0,10.0, 3.0, 3.0, 4.0, 3.0,10.0,10.0,10.0, 2.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,10.0,
     10.0, 3.0, 3.0, 6.0, 2.0, 1.0,10.0, 2.0, 3.0, 5.0, 3.0, 2.0, 3.0, 2.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,
     4.0, 4.0, 3.0,10.0, 2.0, 1.0, 2.0, 2.0, 3.0,10.0, 3.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,
     10.0, 4.0, 4.0,10.0,10.0, 2.0,10.0, 4.0,10.0,10.0,10.0, 3.0, 2.0, 3.0, 2.0, 3.0, 5.0, 9.0,10.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0, 3.0, 3.0, 3.0, 4.0, 5.0,10.0, 8.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0, 5.0,10.0,10.0,10.0,10.0, 7.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 6.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 4.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0, 2.0, 3.0, 3.0,10.0,
     10.0,10.0,10.0, 3.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0, 3.0, 3.0,10.0,10.0,
     10.0,10.0,10.0, 2.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 4.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0, 3.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 1.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0, 1.0, 0.2, 0.1, 0.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 0.0,10.0,10.0,10.0,10.0 };

  double* raw_orography_in = new double[20*20] {
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0,
     1.0, 8.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 6.0, 6.0, 5.0, 6.0,10.0,10.0,10.0, 1.0,
     10.0, 3.0, 3.0,10.0,10.0, 8.0, 7.0,10.0,10.0,10.0,10.0, 6.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,10.0,10.0,
     10.0, 3.0, 3.0,10.0,10.0, 3.0, 3.0, 4.0, 3.0,10.0,10.0,10.0, 2.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,10.0,
     10.0, 3.0, 3.0, 6.0, 2.0, 1.0,10.0, 2.0, 3.0,10.0, 3.0, 2.0, 3.0, 2.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,
     4.0, 4.0, 3.0,10.0, 2.0, 1.0, 2.0, 2.0, 3.0,10.0, 3.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 5.0,10.0,10.0,
     10.0, 4.0, 4.0,10.0,10.0, 2.0,10.0, 4.0,10.0,10.0,10.0, 3.0, 2.0, 3.0, 2.0, 3.0, 5.0, 9.0,10.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0, 3.0, 3.0, 3.0, 4.0, 5.0,10.0, 8.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0, 5.0,10.0,10.0,10.0,10.0, 7.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 6.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 5.0,10.0,
     10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 4.0,10.0,
     10.0,10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0, 2.0, 3.0, 3.0,10.0,
     10.0,10.0,10.0, 3.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0, 3.0, 3.0,10.0,10.0,
     10.0,10.0,10.0, 2.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 4.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0, 3.0, 3.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 3.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0, 2.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 1.0,10.0,10.0,10.0,10.0,
     10.0,10.0,10.0, 1.0, 0.2, 0.1, 0.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0, 0.0,10.0,10.0,10.0,10.0 };

  bool* minima_in = new bool[20*20] {
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    true, false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,true, false,false,
      false,false,false,false,
    false,false,false,false,false,true, false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,true, false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,true, false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,
    false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false };
  int* prior_fine_rdirs_in = new int[20*20] {
      1,1,1,1,1,1,1,1,3,3,3,3,3,3,2,1,1,3,3,2,
      2,1,2,1,1,2,1,1,1,3,3,3,2,3,2,1,1,3,3,3,
      5,4,1,1,3,2,1,1,1,1,3,3,2,1,1,1,1,6,6,6,
      8,7,4,4,3,2,1,1,2,1,6,3,2,1,1,1,1,1,9,9,
      9,8,7,3,3,2,1,2,1,1,3,6,3,2,1,1,1,1,1,9,
      9,8,7,3,3,2,1,1,1,1,3,3,6,5,4,4,1,1,1,3,
      9,8,7,6,6,5,4,4,4,4,6,6,9,8,7,1,1,4,4,6,
      9,9,8,9,9,8,7,7,7,7,9,9,8,7,5,4,4,7,7,9,
      9,9,8,7,9,8,7,8,7,7,9,9,8,7,8,7,7,7,2,1,
      9,9,8,9,9,8,7,7,7,9,9,9,8,7,7,7,7,7,2,1,
      1,1,9,9,9,8,7,7,7,9,9,9,8,7,7,7,7,3,2,1,
      1,3,3,2,1,1,1,1,9,9,9,9,8,3,3,2,1,3,2,1,
      1,3,3,2,1,1,1,1,1,9,9,9,3,3,3,2,1,1,1,1,
      4,3,3,2,1,1,1,1,1,9,9,3,6,6,6,5,4,4,4,4,
      7,3,3,2,1,1,1,1,1,1,3,3,3,9,9,8,7,7,7,7,
      7,3,6,5,4,1,1,1,1,1,3,3,3,3,9,8,7,7,7,7,
      3,3,3,2,2,4,4,4,4,4,3,3,3,3,3,2,1,1,7,7,
      3,3,3,2,2,7,7,7,7,7,3,3,3,3,3,2,1,1,1,7,
      3,3,3,2,2,2,2,7,7,7,3,3,3,3,3,2,1,1,1,3,
      6,6,6,6,6,6,0,7,7,7,6,6,6,6,6,0,4,4,4,6 };
  int* prior_fine_catchments_in = new int[20*20] {
      11,11,11,11,11,11,13,13,12,12,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,11,13,13,13,13,12,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,12,12,11,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,12,12,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,12,14,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,14,14,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,14,14,14,14,14,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,14,14,14,14,15,15,
      11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,14,14,14,15,15,
      15,15,13,13,13,13,13,13,13,12,12,12,12,12,12,12,14,15,15,15,
      15,16,16,16,16,16,16,16,12,12,12,12,12,15,15,15,15,15,15,15,
      15,16,16,16,16,16,16,16, 4,12,12,12,15,15,15,15,15,15,15,15,
      15,16,16,16,16,16,16, 4, 4,12,12, 9,15,15,15,15,15,15,15,15,
      15,16,16,16,16,16, 4, 4, 4, 4,10, 9, 9,15,15,15,15,15,15,15,
      15, 4,16,16,16, 4, 4, 4, 4, 4, 7,10, 9, 9,15,15,15,15,15,15,
       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7,10, 9, 9, 9, 9, 9,15,15,
       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7,10, 9, 9, 9, 8, 6,15,
       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7,10, 9, 8, 6, 6, 2,
       4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 7, 7, 7, 7, 7, 0, 6, 6, 6, 2 };
  double* cell_areas_in = new double[20*20];
  std::fill_n(cell_areas_in,20*20,1.0);
  int number_of_lakes = -1;
  bool* landsea_in = new bool[20*20];
  std:fill_n(landsea_in,20*20,false);
  landsea_in[20*19+15-1] = true;
  landsea_in[20*19+6-1] = true;
  bool* lake_mask = new bool[20*20];
  int* lake_numbers = new int[20*20];
  short* sinkless_rdirs = new short[20*20];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[20*20] {
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false,  true,
        true,  true,  true, false, false, false, false, false, false,
        false, false, false,  true,  true,  true,  true, false, false,
        false,  true,
       false,  true,  true, false, false,  true,  true, false, false,
        false, false,  true,  true,  true,  true,  true, false, false,
        false, false,
       false,  true,  true, false, false,  true,  true,  true,  true,
        false, false, false,  true,  true,  true,  true,  true, false,
        false, false,
       false,  true,  true,  true,  true,  true, false,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
        false, false,
        true,  true,  true, false,  true,  true,  true,  true,  true,
        false,  true,  true,  true,  true,  true,  true,  true,  true,
        false, false,
       false,  true,  true, false, false,  true, false,  true, false,
        false, false,  true,  true,  true,  true,  true,  true, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false,  true,  true,  true,  true,  true,  true, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false,  true,  true, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false,  true,  true,  true,
         true, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false,  true,  true,  true,
        false, false,
       false, false, false,  true, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false };
  //Order difference but lake total volumes, cell in lakes and connections/outflows the same
  //All outflows checked
  vector<double>* expected_lakes_as_array = new vector<double> {
    9.0, 16.0, 1.0, -1.0, 0.0, 16.0, 4.0, 1.0, 16.0, 4.0, 1.0, 1.0, 3.0, 1.0, -1.0,
    4.0, 2.0, 0.0, 46.0, 2.0, -1.0, 0.0, 14.0, 16.0, 7.0, 14.0, 16.0, 1.0, 0.0, 2.0,
    14.0, 17.0, 1.0, 0.0, 2.0, 15.0, 16.0, 1.0, 3.0, 3.0, 15.0, 17.0, 1.0, 3.0, 3.0,
    15.0, 18.0, 1.0, 3.0, 3.0, 14.0, 18.0, 1.0, 3.0, 3.0, 14.0, 19.0, 1.0, 10.0, 4.0,
    1.0, -1.0, 4.0, 4.0, 0.0, 16.0, 3.0, 7.0, 0.0, 8.0, 15.0, 1.0, 8.0, 15.0, 1.0,
    1.0, 3.0, 1.0, 5.0, -1.0, -1.0, 1.0, 91.0, 4.0, 8.0, 0.0, 7.0, 6.0, 16.0, 7.0,
    6.0, 1.0, 0.0, 1.0, 6.0, 6.0, 1.0, 2.0, 2.0, 7.0, 7.0, 1.0, 2.0, 2.0, 8.0,
    6.0, 1.0, 2.0, 2.0, 7.0, 5.0, 1.0, 2.0, 2.0, 6.0, 5.0, 1.0, 2.0, 2.0, 7.0,
    8.0, 1.0, 2.0, 2.0, 6.0, 8.0, 1.0, 10.0, 3.0, 5.0, 7.0, 1.0, 10.0, 3.0, 5.0,
    6.0, 1.0, 10.0, 3.0, 7.0, 9.0, 1.0, 10.0, 3.0, 6.0, 9.0, 1.0, 10.0, 3.0, 5.0,
    9.0, 1.0, 10.0, 3.0, 4.0, 7.0, 2.0, 23.0, 4.0, 8.0, 8.0, 1.0, 23.0, 4.0, 5.0,
    8.0, 1.0, 38.0, 5.0, 1.0, 7.0, -1.0, -1.0, 1.0, 41.0, 5.0, 7.0, 0.0, 6.0, 14.0,
    6.0, 6.0, 14.0, 1.0, 0.0, 2.0, 7.0, 13.0, 1.0, 0.0, 2.0, 5.0, 13.0, 1.0, 0.0,
    2.0, 8.0, 13.0, 1.0, 0.0, 2.0, 7.0, 12.0, 1.0, 0.0, 2.0, 6.0, 12.0, 1.0, 6.0,
    3.0, 1.0, 3.0, -1.0, -1.0, 1.0, 86.0, 6.0, 9.0, 0.0, 3.0, 1.0, 15.0, 3.0, 1.0,
    1.0, 0.0, 1.0, 3.0, 20.0, 1.0, 2.0, 2.0, 2.0, 20.0, 1.0, 5.0, 3.0, 4.0, 2.0,
    1.0, 5.0, 3.0, 5.0, 3.0, 1.0, 5.0, 3.0, 4.0, 3.0, 1.0, 5.0, 3.0, 3.0, 3.0,
    1.0, 5.0, 3.0, 5.0, 2.0, 1.0, 5.0, 3.0, 6.0, 3.0, 1.0, 5.0, 3.0, 6.0, 2.0,
    1.0, 5.0, 3.0, 7.0, 3.0, 1.0, 16.0, 4.0, 7.0, 2.0, 1.0, 16.0, 4.0, 7.0, 1.0,
    1.0, 16.0, 4.0, 8.0, 3.0, 1.0, 16.0, 4.0, 8.0, 2.0, 1.0, 46.0, 6.0, 1.0, 8.0,
    2.0, 2.0, 0.0, 163.0, 7.0, 8.0, 2.0, 3.0, 5.0, 8.0, 15.0, 30.0, 8.0, 15.0, 1.0,
    0.0, 3.0, 8.0, 16.0, 1.0, 0.0, 3.0, 7.0, 16.0, 1.0, 0.0, 3.0, 9.0, 15.0, 1.0,
    0.0, 3.0, 7.0, 15.0, 1.0, 0.0, 3.0, 9.0, 14.0, 1.0, 0.0, 3.0, 8.0, 14.0, 1.0,
    0.0, 3.0, 7.0, 14.0, 1.0, 0.0, 3.0, 6.0, 16.0, 1.0, 0.0, 3.0, 6.0, 15.0, 1.0,
    0.0, 3.0, 6.0, 14.0, 1.0, 0.0, 3.0, 9.0, 13.0, 1.0, 0.0, 3.0, 8.0, 13.0, 1.0,
    0.0, 3.0, 7.0, 13.0, 1.0, 0.0, 3.0, 6.0, 13.0, 1.0, 0.0, 3.0, 5.0, 15.0, 1.0,
    0.0, 3.0, 5.0, 14.0, 1.0, 0.0, 3.0, 5.0, 13.0, 1.0, 0.0, 3.0, 8.0, 12.0, 1.0,
    0.0, 3.0, 7.0, 12.0, 1.0, 0.0, 3.0, 6.0, 12.0, 1.0, 0.0, 3.0, 4.0, 14.0, 1.0,
    0.0, 3.0, 4.0, 13.0, 1.0, 0.0, 3.0, 7.0, 11.0, 1.0, 0.0, 3.0, 6.0, 11.0, 1.0,
    25.0, 4.0, 9.0, 16.0, 1.0, 25.0, 4.0, 7.0, 17.0, 1.0, 25.0, 4.0, 6.0, 17.0, 1.0,
    25.0, 4.0, 5.0, 16.0, 1.0, 25.0, 4.0, 4.0, 15.0, 1.0, 55.0, 5.0, 1.0, 4.0, -1.0,
    -1.0, 1.0, 298.0, 8.0, 9.0, 2.0, 4.0, 7.0, 7.0, 6.0, 57.0, 7.0, 6.0, 1.0, 0.0,
    5.0, 7.0, 7.0, 1.0, 0.0, 5.0, 8.0, 6.0, 1.0, 0.0, 5.0, 6.0, 6.0, 1.0, 0.0,
    5.0, 7.0, 5.0, 1.0, 0.0, 5.0, 6.0, 5.0, 1.0, 0.0, 5.0, 8.0, 8.0, 1.0, 0.0,
    5.0, 7.0, 8.0, 1.0, 0.0, 5.0, 6.0, 8.0, 1.0, 0.0, 5.0, 5.0, 7.0, 1.0, 0.0,
    5.0, 5.0, 6.0, 1.0, 0.0, 5.0, 7.0, 9.0, 1.0, 0.0, 5.0, 6.0, 9.0, 1.0, 0.0,
    5.0, 5.0, 9.0, 1.0, 0.0, 5.0, 5.0, 8.0, 1.0, 0.0, 5.0, 4.0, 7.0, 2.0, 0.0,
    5.0, 6.0, 10.0, 2.0, 0.0, 5.0, 7.0, 11.0, 1.0, 0.0, 5.0, 6.0, 11.0, 1.0, 0.0,
    5.0, 8.0, 12.0, 1.0, 0.0, 5.0, 7.0, 12.0, 1.0, 0.0, 5.0, 6.0, 12.0, 1.0, 0.0,
    5.0, 9.0, 13.0, 1.0, 0.0, 5.0, 8.0, 13.0, 1.0, 0.0, 5.0, 7.0, 13.0, 1.0, 0.0,
    5.0, 9.0, 12.0, 1.0, 0.0, 5.0, 6.0, 13.0, 1.0, 0.0, 5.0, 5.0, 13.0, 1.0, 0.0,
    5.0, 10.0, 14.0, 1.0, 0.0, 5.0, 9.0, 14.0, 1.0, 0.0, 5.0, 8.0, 14.0, 1.0, 0.0,
    5.0, 10.0, 13.0, 1.0, 0.0, 5.0, 7.0, 14.0, 1.0, 0.0, 5.0, 6.0, 14.0, 1.0, 0.0,
    5.0, 5.0, 14.0, 1.0, 0.0, 5.0, 4.0, 14.0, 1.0, 0.0, 5.0, 4.0, 13.0, 1.0, 0.0,
    5.0, 9.0, 15.0, 1.0, 0.0, 5.0, 8.0, 15.0, 1.0, 0.0, 5.0, 7.0, 15.0, 1.0, 0.0,
    5.0, 6.0, 15.0, 1.0, 0.0, 5.0, 5.0, 15.0, 1.0, 0.0, 5.0, 4.0, 15.0, 1.0, 0.0,
    5.0, 3.0, 15.0, 1.0, 0.0, 5.0, 9.0, 16.0, 1.0, 0.0, 5.0, 8.0, 16.0, 1.0, 0.0,
    5.0, 7.0, 16.0, 1.0, 0.0, 5.0, 6.0, 16.0, 1.0, 0.0, 5.0, 5.0, 16.0, 1.0, 0.0,
    5.0, 4.0, 16.0, 1.0, 0.0, 5.0, 9.0, 17.0, 1.0, 0.0, 5.0, 8.0, 17.0, 1.0, 0.0,
    5.0, 7.0, 17.0, 1.0, 0.0, 5.0, 6.0, 17.0, 1.0, 0.0, 5.0, 5.0, 17.0, 1.0, 0.0,
    5.0, 7.0, 18.0, 1.0, 0.0, 5.0, 6.0, 18.0, 1.0, 55.0, 6.0, 1.0, 6.0, 2.0, 1.0,
    0.0, 418.0, 9.0, -1.0, 2.0, 6.0, 8.0, 3.0, 1.0, 81.0, 3.0, 1.0, 1.0, 0.0, 6.0,
    4.0, 2.0, 1.0, 0.0, 6.0, 3.0, 20.0, 1.0, 0.0, 6.0, 2.0, 20.0, 1.0, 0.0, 6.0,
    5.0, 3.0, 1.0, 0.0, 6.0, 4.0, 3.0, 1.0, 0.0, 6.0, 3.0, 3.0, 1.0, 0.0, 6.0,
    5.0, 2.0, 1.0, 0.0, 6.0, 6.0, 4.0, 1.0, 0.0, 6.0, 6.0, 3.0, 1.0, 0.0, 6.0,
    6.0, 2.0, 1.0, 0.0, 6.0, 7.0, 5.0, 1.0, 0.0, 6.0, 6.0, 5.0, 1.0, 0.0, 6.0,
    7.0, 3.0, 1.0, 0.0, 6.0, 7.0, 2.0, 1.0, 0.0, 6.0, 7.0, 1.0, 1.0, 0.0, 6.0,
    8.0, 6.0, 1.0, 0.0, 6.0, 7.0, 6.0, 1.0, 0.0, 6.0, 6.0, 6.0, 1.0, 0.0, 6.0,
    5.0, 6.0, 1.0, 0.0, 6.0, 8.0, 3.0, 1.0, 0.0, 6.0, 8.0, 2.0, 1.0, 0.0, 6.0,
    7.0, 7.0, 1.0, 0.0, 6.0, 5.0, 7.0, 1.0, 0.0, 6.0, 4.0, 7.0, 2.0, 0.0, 6.0,
    8.0, 8.0, 1.0, 0.0, 6.0, 7.0, 8.0, 1.0, 0.0, 6.0, 6.0, 8.0, 1.0, 0.0, 6.0,
    5.0, 8.0, 1.0, 0.0, 6.0, 7.0, 9.0, 1.0, 0.0, 6.0, 6.0, 9.0, 1.0, 0.0, 6.0,
    5.0, 9.0, 1.0, 0.0, 6.0, 6.0, 10.0, 2.0, 0.0, 6.0, 7.0, 11.0, 1.0, 0.0, 6.0,
    6.0, 11.0, 1.0, 0.0, 6.0, 8.0, 12.0, 1.0, 0.0, 6.0, 7.0, 12.0, 1.0, 0.0, 6.0,
    6.0, 12.0, 1.0, 0.0, 6.0, 9.0, 13.0, 1.0, 0.0, 6.0, 8.0, 13.0, 1.0, 0.0, 6.0,
    7.0, 13.0, 1.0, 0.0, 6.0, 9.0, 12.0, 1.0, 0.0, 6.0, 6.0, 13.0, 1.0, 0.0, 6.0,
    5.0, 13.0, 1.0, 0.0, 6.0, 10.0, 14.0, 1.0, 0.0, 6.0, 9.0, 14.0, 1.0, 0.0, 6.0,
    8.0, 14.0, 1.0, 0.0, 6.0, 10.0, 13.0, 1.0, 0.0, 6.0, 7.0, 14.0, 1.0, 0.0, 6.0,
    6.0, 14.0, 1.0, 0.0, 6.0, 5.0, 14.0, 1.0, 0.0, 6.0, 4.0, 14.0, 1.0, 0.0, 6.0,
    4.0, 13.0, 1.0, 0.0, 6.0, 4.0, 12.0, 1.0, 0.0, 6.0, 9.0, 15.0, 1.0, 0.0, 6.0,
    8.0, 15.0, 1.0, 0.0, 6.0, 7.0, 15.0, 1.0, 0.0, 6.0, 6.0, 15.0, 1.0, 0.0, 6.0,
    5.0, 15.0, 1.0, 0.0, 6.0, 4.0, 15.0, 1.0, 0.0, 6.0, 3.0, 15.0, 1.0, 0.0, 6.0,
    3.0, 14.0, 1.0, 0.0, 6.0, 3.0, 13.0, 1.0, 0.0, 6.0, 9.0, 16.0, 1.0, 0.0, 6.0,
    8.0, 16.0, 1.0, 0.0, 6.0, 7.0, 16.0, 1.0, 0.0, 6.0, 6.0, 16.0, 1.0, 0.0, 6.0,
    5.0, 16.0, 1.0, 0.0, 6.0, 4.0, 16.0, 1.0, 0.0, 6.0, 3.0, 16.0, 1.0, 0.0, 6.0,
    9.0, 17.0, 1.0, 0.0, 6.0, 8.0, 17.0, 1.0, 0.0, 6.0, 7.0, 17.0, 1.0, 0.0, 6.0,
    6.0, 17.0, 1.0, 0.0, 6.0, 5.0, 17.0, 1.0, 0.0, 6.0, 7.0, 18.0, 1.0, 0.0, 6.0,
    6.0, 18.0, 1.0, 75.0, 7.0, 4.0, 6.0, 2.0, 75.0, 7.0, 4.0, 7.0, 1.0, 151.0, 8.0,
    3.0, 2.0, 1.0, 151.0, 8.0, 4.0, 6.0, 1.0, 229.0, 9.0, 1.0, -1.0, 2.0, 4.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 9);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,EvaluateBasinsTwo) {
  int nlat_fine = 20;
  int nlon_fine = 20;
  int nlat_coarse = 4;
  int nlon_coarse = 4;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[4*4] {3,3,2,2,
                                         3,3,2,2,
                                         1,1,1,2,
                                         1,1,1,1 };
  double* corrected_orography_in = new double[20*20] {
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 1.0,10.0,20.0, 9.0, 20.0,20.0,20.0, 1.0,16.0, 20.0,20.0, 1.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 2.0,11.0,20.0, 8.0, 20.0,20.0,20.0, 2.0,15.0, 20.0,20.0, 2.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      18.0, 3.0,12.0,20.0, 7.0, 20.0,20.0,20.0, 3.0,14.0, 20.0,20.0, 3.0,18.0, 0.9,  0.8, 0.0, 0.7, 0.8, 0.9,
      20.0, 4.0,13.0, 6.0, 5.0, 20.0,20.0,20.0, 4.0,13.0,  5.0, 5.0, 4.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 5.0,14.0,20.0, 4.0, 20.0,20.0,20.0, 5.0,12.0, 20.0,20.0, 6.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 6.0,15.0,20.0, 3.0, 20.0,20.0,20.0, 6.0,11.0, 20.0,20.0, 7.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 8.0,16.0,20.0, 2.0, 20.0,20.0,20.0, 7.0,10.0, 20.0,20.0, 8.0,20.0,20.0, 20.0,20.0, 5.0,20.0,20.0,
      20.0, 9.0,17.0,20.0, 1.0, 20.0,20.0,20.0, 8.0, 9.0, 20.0,20.0, 9.0,20.0,20.0, 20.0, 4.0, 6.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,  3.0, 7.0,20.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0, 2.0,  8.0,20.0,20.0,20.0,20.0,
      20.0, 1.0,16.0,20.0, 2.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0, 1.0, 9.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 2.0,15.0,20.0, 3.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,10.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 3.0,14.0,20.0, 4.0, 20.0,20.0, 1.0,20.0, 5.0, 20.0,20.0,20.0, 0.9,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 4.0,13.0, 6.0, 5.0, 20.0,20.0, 2.0, 4.0, 3.0, 20.0,20.0, 0.8,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 5.0,12.0,20.0, 7.0, 20.0,20.0, 3.0,20.0, 2.0, 20.0,20.0, 0.7,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 6.0,11.0,20.0, 8.0, 20.0,20.0, 4.0,20.0, 1.0, 20.0,20.0, 0.6,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 7.0,10.0,20.0, 9.0, 20.0,20.0, 6.0,20.0,20.0, 20.0,20.0, 0.5,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 8.0, 9.0,20.0,10.0, 18.0, 0.9, 0.8,20.0,20.0, 20.0, 0.4,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0, 0.0, 0.2,  0.3,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0 };
  double* raw_orography_in = new double[20*20] {
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 1.0,10.0,20.0, 9.0, 20.0,20.0,20.0, 1.0,16.0, 20.0,20.0, 1.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 2.0,11.0,20.0, 8.0, 20.0,20.0,20.0, 2.0,15.0, 20.0,20.0, 2.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      18.0, 3.0,12.0,20.0, 7.0, 20.0,20.0,20.0, 3.0,14.0, 20.0,20.0, 3.0,18.0, 0.9,  0.8, 0.0, 0.7, 0.8, 0.9,
      20.0, 4.0,13.0,20.0, 5.0, 20.0,20.0,20.0, 4.0,13.0,  5.0, 5.0, 4.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 5.0,14.0,20.0, 4.0, 20.0,20.0,20.0, 5.0,12.0, 20.0,20.0, 6.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 6.0,15.0,20.0, 3.0, 20.0,20.0,20.0, 6.0,11.0, 20.0,20.0, 7.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 8.0,16.0,20.0, 2.0, 20.0,20.0,20.0, 7.0,10.0, 20.0,20.0, 8.0,20.0,20.0, 20.0,20.0, 5.0,20.0,20.0,
      20.0, 9.0,17.0,20.0, 1.0, 20.0,20.0,20.0, 8.0, 9.0, 20.0,20.0, 9.0,20.0,20.0, 20.0, 4.0, 6.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,  3.0, 7.0,20.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0, 2.0,  8.0,20.0,20.0,20.0,20.0,
      20.0, 1.0,16.0,20.0, 2.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0, 1.0, 9.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 2.0,15.0,20.0, 3.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,10.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 3.0,14.0,20.0, 4.0, 20.0,20.0, 1.0,20.0, 5.0, 20.0,20.0,20.0, 0.9,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 4.0,13.0,20.0, 5.0, 20.0,20.0, 2.0, 4.0, 3.0, 20.0,20.0, 0.8,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 5.0,12.0,20.0, 7.0, 20.0,20.0, 3.0,20.0, 2.0, 20.0,20.0, 0.7,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 6.0,11.0,20.0, 8.0, 20.0,20.0, 4.0,20.0, 1.0, 20.0,20.0, 0.6,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 7.0,10.0,20.0, 9.0, 20.0,20.0, 6.0,20.0,20.0, 20.0,20.0, 0.5,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 8.0, 9.0,20.0,10.0, 18.0, 0.9, 0.8,20.0,20.0, 20.0, 0.4,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0, 0.0, 0.2,  0.3,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0 };
  bool* minima_in = new bool[20*20] {
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false, true,false,false,false,false,false,false, true,false,false,false, true,false,false,false,false,false,false,false,
      false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false, false,false,false,false,false,false,
      false,false,false,false,false,false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false, true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false, true,false,false, true,false,false,false,false,false,false,false,false, true,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false, true,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false, true,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false };
  int* prior_fine_rdirs_in = new int[20*20] {
      1,1,1,1,1,1,1,1,3,3,3,3,3,3,2,1,1,3,3,2,
      2,1,2,1,1,2,1,1,1,3,3,3,2,3,2,1,1,3,3,3,
      5,4,1,1,3,2,1,1,1,1,3,3,2,1,1,1,1,6,6,6,
      8,7,4,4,3,2,1,1,2,1,6,3,2,1,1,1,1,1,9,9,
      9,8,7,3,3,2,1,2,1,1,3,6,3,2,1,1,1,1,1,9,
      9,8,7,3,3,2,1,1,1,1,3,3,6,5,4,4,1,1,1,3,
      9,8,7,6,6,5,4,4,4,4,6,6,9,8,7,1,1,4,4,6,
      9,9,8,9,9,8,7,7,7,7,9,9,8,7,5,4,4,7,7,9,
      9,9,8,7,9,8,7,8,7,7,9,9,8,7,8,7,7,7,2,1,
      9,9,8,9,9,8,7,7,7,9,9,9,8,7,7,7,7,7,2,1,
      1,1,9,9,9,8,7,7,7,9,9,9,8,7,7,7,7,3,2,1,
      1,3,3,2,1,1,1,1,9,9,9,9,8,3,3,2,1,3,2,1,
      1,3,3,2,1,1,1,1,1,9,9,9,3,3,3,2,1,1,1,1,
      4,3,3,2,1,1,1,1,1,9,9,3,6,6,6,5,4,4,4,4,
      7,3,3,2,1,1,1,1,1,1,3,3,3,9,9,8,7,7,7,7,
      7,3,6,5,4,1,1,1,1,1,3,3,3,3,9,8,7,7,7,7,
      3,3,3,2,1,4,4,4,4,4,3,3,3,3,3,2,1,1,7,7,
      3,3,3,2,1,7,7,7,7,7,3,3,3,3,3,2,1,1,1,7,
      3,3,3,2,1,1,7,7,7,7,3,3,3,3,3,2,1,1,1,3,
      6,6,6,0,4,4,4,7,7,7,6,6,6,6,6,0,4,4,4,6 };
  int* prior_fine_catchments_in = new int[20*20] {
      11,11,11,11,11,11,13,13,12,12,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,11,13,13,13,13,12,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,12,12,11,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,12,12,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,12,14,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,14,14,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,14,14,14,14,14,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,14,14,14,14,15,15,
      11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,14,14,14,15,15,
      15,15,13,13,13,13,13,13,13,12,12,12,12,12,12,12,14,15,15,15,
      15,16,16,16,16,16,16,16,12,12,12,12,12,15,15,15,15,15,15,15,
      15,16,16,16,16,16,16,16, 4,12,12,12,15,15,15,15,15,15,15,15,
      15,16,16,16,16,16,16, 4, 4,12,12, 9,15,15,15,15,15,15,15,15,
      15,16,16,16,16,16, 4, 4, 4, 4,10, 9, 9,15,15,15,15,15,15,15,
      15, 4,16,16,16, 4, 4, 4, 4, 4, 7,10, 9, 9,15,15,15,15,15,15,
      5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7,10, 9, 9, 9, 9, 9,15,15,
      2, 5, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7,10, 9, 9, 9, 8, 6,15,
      2, 2, 5, 4, 3, 1, 4, 4, 4, 4, 7, 7, 7, 7,10, 9, 8, 6, 6, 2,
      2, 2, 2, 0, 1, 1, 1, 4, 4, 4, 7, 7, 7, 7, 7, 0, 6, 6, 6, 2 };
  bool* landsea_in = new bool[20*20] {
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false, false,false,false,false,false,false,
      false,false,false,false,false,false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false, true,false,false,false,false,false,false,false,false,false,false,false};
  double* cell_areas_in = new double[20*20];
  std::fill_n(cell_areas_in,20*20,1.0);
  int number_of_lakes = -1;
  bool* lake_mask = new bool[20*20];
  int* lake_numbers = new int[20*20];
  short* sinkless_rdirs = new short[20*20];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[20*20] {
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true, false, false, false,  true,
         true,  true,  true,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false,  true,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false,  true,  true,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false,  true,  true, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false,  true,  true, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false, false,
        false, false, false, false,  true,  true, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false,  true, false,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true, false, false,  true,  true,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false,  true, false,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false,  true, false,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false };
  //Minor difference in filling order and two lake number swapped compared to python version
  //but threshold and lake connection and outflows and cell in each lake all the same
  //All outflows checked
  vector<double>* expected_lakes_as_array = new vector<double> {
    13.0, 26.0, 1.0, 13.0, 0.0, 17.0, 10.0, 3.0, 17.0, 10.0, 1.0, 1.0, 2.0, 16.0, 10.0,
    1.0, 3.0, 3.0, 15.0, 10.0, 1.0, 6.0, 4.0, 1.0, 2.0, 4.0, 2.0, 0.0, 26.0, 2.0,
    13.0, 0.0, 14.0, 8.0, 3.0, 14.0, 8.0, 1.0, 1.0, 2.0, 15.0, 8.0, 1.0, 3.0, 3.0,
    16.0, 8.0, 1.0, 6.0, 4.0, 1.0, 1.0, -1.0, -1.0, 1.0, 56.0, 3.0, -1.0, 0.0, 12.0,
    14.0, 9.0, 12.0, 14.0, 1.0, 1.0, 2.0, 11.0, 15.0, 1.0, 3.0, 3.0, 10.0, 16.0, 1.0,
    6.0, 4.0, 9.0, 17.0, 1.0, 10.0, 5.0, 8.0, 18.0, 1.0, 15.0, 6.0, 9.0, 18.0, 1.0,
    21.0, 7.0, 10.0, 17.0, 1.0, 28.0, 8.0, 11.0, 16.0, 1.0, 36.0, 9.0, 12.0, 15.0, 1.0,
    45.0, 10.0, 1.0, -1.0, 3.0, 4.0, 0.0, 56.0, 4.0, 12.0, 0.0, 12.0, 5.0, 9.0, 12.0,
    5.0, 1.0, 1.0, 3.0, 13.0, 5.0, 1.0, 3.0, 4.0, 14.0, 5.0, 1.0, 6.0, 5.0, 15.0,
    5.0, 1.0, 10.0, 6.0, 15.0, 4.0, 2.0, 14.0, 7.0, 16.0, 5.0, 1.0, 19.0, 8.0, 17.0,
    5.0, 1.0, 25.0, 9.0, 18.0, 5.0, 1.0, 32.0, 10.0, 19.0, 5.0, 1.0, 48.0, 12.0, 1.0,
    5.0, 4.0, 1.0, 0.0, 66.0, 5.0, 12.0, 0.0, 12.0, 2.0, 11.0, 12.0, 2.0, 1.0, 1.0,
    2.0, 13.0, 2.0, 1.0, 3.0, 3.0, 14.0, 2.0, 1.0, 6.0, 4.0, 15.0, 2.0, 1.0, 10.0,
    5.0, 16.0, 2.0, 1.0, 15.0, 6.0, 17.0, 2.0, 1.0, 21.0, 7.0, 18.0, 2.0, 1.0, 28.0,
    8.0, 19.0, 2.0, 1.0, 36.0, 9.0, 19.0, 3.0, 1.0, 45.0, 10.0, 18.0, 3.0, 1.0, 55.0,
    11.0, 17.0, 3.0, 1.0, 66.0, 12.0, 1.0, 4.0, -1.0, -1.0, 1.0, 56.0, 6.0, 10.0, 0.0,
    9.0, 5.0, 9.0, 9.0, 5.0, 1.0, 1.0, 2.0, 8.0, 5.0, 1.0, 3.0, 3.0, 7.0, 5.0,
    1.0, 6.0, 4.0, 6.0, 5.0, 1.0, 10.0, 5.0, 5.0, 5.0, 1.0, 15.0, 6.0, 5.0, 4.0,
    2.0, 20.0, 7.0, 4.0, 5.0, 1.0, 26.0, 8.0, 3.0, 5.0, 1.0, 33.0, 9.0, 2.0, 5.0,
    1.0, 57.0, 12.0, 1.0, 9.0, -1.0, -1.0, 1.0, 61.0, 7.0, 11.0, 0.0, 2.0, 13.0, 10.0,
    2.0, 13.0, 1.0, 1.0, 2.0, 3.0, 13.0, 1.0, 3.0, 3.0, 4.0, 13.0, 1.0, 6.0, 4.0,
    5.0, 13.0, 1.0, 10.0, 5.0, 5.0, 12.0, 1.0, 10.0, 5.0, 5.0, 11.0, 1.0, 16.0, 6.0,
    6.0, 13.0, 1.0, 23.0, 7.0, 7.0, 13.0, 1.0, 31.0, 8.0, 8.0, 13.0, 1.0, 40.0, 9.0,
    9.0, 13.0, 1.0, 70.0, 12.0, 1.0, 8.0, 2.0, 2.0, 0.0, 66.0, 8.0, 11.0, 0.0, 2.0,
    9.0, 11.0, 2.0, 9.0, 1.0, 1.0, 2.0, 3.0, 9.0, 1.0, 3.0, 3.0, 4.0, 9.0, 1.0,
    6.0, 4.0, 5.0, 9.0, 1.0, 10.0, 5.0, 6.0, 9.0, 1.0, 15.0, 6.0, 7.0, 9.0, 1.0,
    21.0, 7.0, 8.0, 9.0, 1.0, 28.0, 8.0, 9.0, 9.0, 1.0, 36.0, 9.0, 9.0, 10.0, 1.0,
    45.0, 10.0, 8.0, 10.0, 1.0, 55.0, 11.0, 7.0, 10.0, 1.0, 66.0, 12.0, 1.0, 7.0, -1.0,
    -1.0, 1.0, 61.0, 9.0, 10.0, 0.0, 2.0, 2.0, 10.0, 2.0, 2.0, 1.0, 1.0, 2.0, 3.0,
    2.0, 1.0, 3.0, 3.0, 4.0, 2.0, 1.0, 6.0, 4.0, 5.0, 2.0, 1.0, 10.0, 5.0, 6.0,
    2.0, 1.0, 15.0, 6.0, 7.0, 2.0, 1.0, 27.0, 8.0, 8.0, 2.0, 1.0, 34.0, 9.0, 9.0,
    2.0, 1.0, 42.0, 10.0, 2.0, 3.0, 1.0, 51.0, 11.0, 3.0, 3.0, 1.0, 61.0, 12.0, 1.0,
    6.0, 1.0, 1.0, 0.0, 138.0, 10.0, -1.0, 2.0, 6.0, 9.0, 9.0, 5.0, 25.0, 9.0, 5.0,
    1.0, 0.0, 12.0, 8.0, 5.0, 1.0, 0.0, 12.0, 7.0, 5.0, 1.0, 0.0, 12.0, 6.0, 5.0,
    1.0, 0.0, 12.0, 5.0, 5.0, 1.0, 0.0, 12.0, 5.0, 4.0, 2.0, 0.0, 12.0, 4.0, 5.0,
    1.0, 0.0, 12.0, 4.0, 3.0, 1.0, 0.0, 12.0, 3.0, 5.0, 1.0, 0.0, 12.0, 3.0, 3.0,
    1.0, 0.0, 12.0, 5.0, 2.0, 1.0, 0.0, 12.0, 4.0, 2.0, 1.0, 0.0, 12.0, 3.0, 2.0,
    1.0, 0.0, 12.0, 2.0, 5.0, 1.0, 0.0, 12.0, 2.0, 3.0, 1.0, 0.0, 12.0, 2.0, 2.0,
    1.0, 0.0, 12.0, 6.0, 2.0, 1.0, 0.0, 12.0, 7.0, 2.0, 1.0, 0.0, 12.0, 8.0, 2.0,
    1.0, 0.0, 12.0, 9.0, 2.0, 1.0, 19.0, 13.0, 5.0, 3.0, 1.0, 39.0, 14.0, 6.0, 3.0,
    1.0, 60.0, 15.0, 7.0, 3.0, 1.0, 82.0, 16.0, 8.0, 3.0, 1.0, 105.0, 17.0, 9.0, 3.0,
    1.0, 129.0, 18.0, 1.0, -1.0, 2.0, 1.0, 0.0, 143.0, 11.0, -1.0, 2.0, 7.0, 8.0, 2.0,
    13.0, 26.0, 2.0, 13.0, 1.0, 0.0, 12.0, 3.0, 13.0, 1.0, 0.0, 12.0, 4.0, 13.0, 1.0,
    0.0, 12.0, 5.0, 13.0, 1.0, 0.0, 12.0, 5.0, 12.0, 1.0, 0.0, 12.0, 6.0, 13.0, 1.0,
    0.0, 12.0, 5.0, 11.0, 1.0, 0.0, 12.0, 7.0, 13.0, 1.0, 0.0, 12.0, 6.0, 10.0, 1.0,
    0.0, 12.0, 8.0, 13.0, 1.0, 0.0, 12.0, 7.0, 10.0, 1.0, 0.0, 12.0, 7.0, 9.0, 1.0,
    0.0, 12.0, 6.0, 9.0, 1.0, 0.0, 12.0, 5.0, 9.0, 1.0, 0.0, 12.0, 9.0, 13.0, 1.0,
    0.0, 12.0, 8.0, 10.0, 1.0, 0.0, 12.0, 8.0, 9.0, 1.0, 0.0, 12.0, 4.0, 9.0, 1.0,
    0.0, 12.0, 9.0, 10.0, 1.0, 0.0, 12.0, 9.0, 9.0, 1.0, 0.0, 12.0, 3.0, 9.0, 1.0,
    0.0, 12.0, 2.0, 9.0, 1.0, 22.0, 13.0, 5.0, 10.0, 1.0, 45.0, 14.0, 4.0, 10.0, 1.0,
    69.0, 15.0, 3.0, 10.0, 1.0, 94.0, 16.0, 2.0, 10.0, 1.0, 146.0, 18.0, 1.0, -1.0, 1.0,
    3.0, 0.0, 138.0, 12.0, -1.0, 2.0, 4.0, 5.0, 12.0, 5.0, 25.0, 12.0, 5.0, 1.0, 0.0,
    12.0, 13.0, 5.0, 1.0, 0.0, 12.0, 14.0, 5.0, 1.0, 0.0, 12.0, 15.0, 5.0, 1.0, 0.0,
    12.0, 15.0, 4.0, 2.0, 0.0, 12.0, 16.0, 5.0, 1.0, 0.0, 12.0, 16.0, 3.0, 1.0, 0.0,
    12.0, 17.0, 5.0, 1.0, 0.0, 12.0, 17.0, 3.0, 1.0, 0.0, 12.0, 17.0, 2.0, 1.0, 0.0,
    12.0, 16.0, 2.0, 1.0, 0.0, 12.0, 15.0, 2.0, 1.0, 0.0, 12.0, 18.0, 5.0, 1.0, 0.0,
    12.0, 18.0, 3.0, 1.0, 0.0, 12.0, 18.0, 2.0, 1.0, 0.0, 12.0, 14.0, 2.0, 1.0, 0.0,
    12.0, 19.0, 5.0, 1.0, 0.0, 12.0, 19.0, 3.0, 1.0, 0.0, 12.0, 19.0, 2.0, 1.0, 0.0,
    12.0, 13.0, 2.0, 1.0, 0.0, 12.0, 12.0, 2.0, 1.0, 20.0, 13.0, 15.0, 3.0, 1.0, 41.0,
    14.0, 14.0, 3.0, 1.0, 63.0, 15.0, 13.0, 3.0, 1.0, 86.0, 16.0, 12.0, 3.0, 1.0, 134.0,
    18.0, 1.0, -1.0, 4.0, 2.0, 0.0, 58.0, 13.0, -1.0, 2.0, 1.0, 2.0, 17.0, 10.0, 9.0,
    17.0, 10.0, 1.0, 0.0, 4.0, 16.0, 10.0, 1.0, 0.0, 4.0, 15.0, 10.0, 1.0, 0.0, 4.0,
    15.0, 9.0, 1.0, 0.0, 4.0, 16.0, 8.0, 1.0, 0.0, 4.0, 15.0, 8.0, 1.0, 0.0, 4.0,
    14.0, 8.0, 1.0, 0.0, 4.0, 17.0, 8.0, 1.0, 8.0, 5.0, 14.0, 10.0, 1.0, 17.0, 6.0,
    1.0, -1.0, 4.0, 2.0, 0.0};
  EXPECT_TRUE(number_of_lakes == 13);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,EvaluateBasinsThree) {
  int nlat_fine = 20;
  int nlon_fine = 20;
  int nlat_coarse = 4;
  int nlon_coarse = 4;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[4*4] {3,3,2,2,
                                         3,3,2,2,
                                         1,1,1,2,
                                         1,1,1,1 };
  double* corrected_orography_in = new double[20*20] {
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 1.0,10.0,20.0, 9.0, 20.0,20.0,20.0, 1.0,16.0, 20.0,20.0, 1.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 2.0,11.0,20.0, 8.0, 20.0,20.0,20.0, 2.0,15.0, 20.0,20.0, 2.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      18.0, 3.0,12.0,20.0, 7.0, 20.0,20.0,20.0, 3.0,14.0, 20.0,20.0, 3.0,18.0, 0.9,  0.8, 0.0, 0.7, 0.8, 0.9,
      20.0, 4.0,13.0, 6.0, 5.0, 20.0,20.0,20.0, 4.0,13.0,  5.0, 5.0, 4.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 5.0,14.0,20.0, 4.0, 20.0,20.0,20.0, 5.0,12.0, 20.0,20.0, 6.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 6.0,15.0,20.0, 3.0, 20.0,20.0,20.0, 6.0,11.0, 20.0,20.0, 7.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 8.0,16.0,20.0, 2.0, 20.0,20.0,20.0, 7.0,10.0, 20.0,20.0, 8.0,20.0,20.0, 20.0,20.0, 5.0,20.0,20.0,
      20.0, 9.0,17.0,20.0, 1.0, 20.0,20.0,20.0, 8.0, 9.0, 20.0,20.0, 9.0,20.0,20.0, 20.0, 4.0, 6.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,  3.0, 7.0,20.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0, 2.0,  8.0,20.0,20.0,20.0,20.0,
      20.0, 1.0,16.0,20.0, 2.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0, 1.0, 9.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 2.0,15.0,20.0, 3.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,10.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 3.0,14.0,20.0, 4.0, 20.0,20.0, 1.0,20.0, 5.0, 20.0,20.0,20.0, 0.9,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 4.0,13.0, 6.0, 5.0, 20.0,20.0, 2.0, 4.0, 3.0, 20.0,20.0, 0.8,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 5.0,12.0,20.0, 7.0, 20.0,20.0, 3.0,20.0, 2.0, 20.0,20.0, 0.7,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 6.0,11.0,20.0, 8.0, 20.0,20.0, 4.0,20.0, 1.0, 20.0,20.0, 0.6,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 7.0,10.0,20.0, 9.0, 20.0,20.0, 6.0,20.0,20.0, 20.0,20.0, 0.5,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 8.0, 9.0,20.0,10.0, 18.0, 0.9, 0.8,20.0,20.0, 20.0, 0.4,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0, 0.0, 0.2,  0.3,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0 };
  double* raw_orography_in = new double[20*20] {
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 1.0,10.0,20.0, 9.0, 20.0,20.0,20.0, 1.0,16.0, 20.0,20.0, 1.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 2.0,11.0,20.0, 8.0, 20.0,20.0,20.0, 2.0,15.0, 20.0,20.0, 2.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      18.0, 3.0,12.0,20.0, 7.0, 20.0,20.0,20.0, 3.0,14.0, 20.0,20.0, 3.0,18.0, 0.9,  0.8, 0.0, 0.7, 0.8, 0.9,
      20.0, 4.0,13.0,20.0, 5.0, 20.0,20.0,20.0, 4.0,13.0,  5.0, 5.0, 4.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 5.0,14.0,20.0, 4.0, 20.0,20.0,20.0, 5.0,12.0, 20.0,20.0, 6.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 6.0,15.0,20.0, 3.0, 20.0,20.0,20.0, 6.0,11.0, 20.0,20.0, 7.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 8.0,16.0,20.0, 2.0, 20.0,20.0,20.0, 7.0,10.0, 20.0,20.0, 8.0,20.0,20.0, 20.0,20.0, 5.0,20.0,20.0,
      20.0, 9.0,17.0,20.0, 1.0, 20.0,20.0,20.0, 8.0, 9.0, 20.0,20.0, 9.0,20.0,20.0, 20.0, 4.0, 6.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,  3.0, 7.0,20.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0, 2.0,  8.0,20.0,20.0,20.0,20.0,
      20.0, 1.0,16.0,20.0, 2.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0, 1.0, 9.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 2.0,15.0,20.0, 3.0, 20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,10.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 3.0,14.0,20.0, 4.0, 20.0,20.0, 1.0,20.0, 5.0, 20.0,20.0,20.0, 0.9,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 4.0,13.0,20.0, 5.0, 20.0,20.0, 2.0, 4.0, 3.0, 20.0,20.0, 0.8,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 5.0,12.0,20.0, 7.0, 20.0,20.0, 3.0,20.0, 2.0, 20.0,20.0, 0.7,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 6.0,11.0,20.0, 8.0, 20.0,20.0, 4.0,20.0, 1.0, 20.0,20.0, 0.6,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 7.0,10.0,20.0, 9.0, 20.0,20.0, 6.0,20.0,20.0, 20.0,20.0, 0.5,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0, 8.0, 9.0,20.0,10.0, 18.0, 0.9, 0.8,20.0,20.0, 20.0, 0.4,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0,
      20.0,20.0,20.0,20.0,20.0, 20.0,20.0,20.0, 0.0, 0.2,  0.3,20.0,20.0,20.0,20.0, 20.0,20.0,20.0,20.0,20.0 };
  bool* minima_in = new bool[20*20] {
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false, true,false,false,false,false,false,false, true,false,false,false, true,false,false,false,false,false,false,false,
      false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false, false,false,false,false,false,false,
      false,false,false,false,false,false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false, true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false, true,false,false, true,false,false,false,false,false,false,false,false, true,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false, true,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false, true,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false };
  int* prior_fine_rdirs_in = new int[20*20] {
      1,1,1,1,1,1,1,1,3,3,3,3,3,3,2,1,1,3,3,2,
      2,1,2,1,1,2,1,1,1,3,3,3,2,3,2,1,1,3,3,3,
      5,4,1,1,3,2,1,1,1,1,3,3,2,1,1,1,1,6,6,6,
      8,7,4,4,3,2,1,1,2,1,6,3,2,1,1,1,1,1,9,9,
      9,8,7,3,3,2,1,2,1,1,3,6,3,2,1,1,1,1,1,9,
      9,8,7,3,3,2,1,1,1,1,3,3,6,5,4,4,1,1,1,3,
      9,8,7,6,6,5,4,4,4,4,6,6,9,8,7,1,1,4,4,6,
      9,9,8,9,9,8,7,7,7,7,9,9,8,7,5,4,4,7,7,9,
      9,9,8,7,9,8,7,8,7,7,9,9,8,7,8,7,7,7,2,1,
      9,9,8,9,9,8,7,7,7,9,9,9,8,7,7,7,7,7,2,1,
      1,1,9,9,9,8,7,7,7,9,9,9,8,7,7,7,7,3,2,1,
      1,3,3,2,1,1,1,1,9,9,9,9,8,3,3,2,1,3,2,1,
      1,3,3,2,1,1,1,1,1,9,9,9,3,3,3,2,1,1,1,1,
      4,3,3,2,1,1,1,1,1,9,9,3,6,6,6,5,4,4,4,4,
      7,3,3,2,1,1,1,1,1,1,3,3,3,9,9,8,7,7,7,7,
      7,3,6,5,4,1,1,1,1,1,3,3,3,3,9,8,7,7,7,7,
      3,3,3,2,1,4,4,4,4,4,3,3,3,3,3,2,1,1,7,7,
      3,3,3,2,1,7,7,7,7,7,3,3,3,3,3,2,1,1,1,7,
      3,3,3,2,1,1,7,7,7,7,3,3,3,3,3,2,1,1,1,3,
      6,6,6,0,4,4,4,7,7,7,6,6,6,6,6,0,4,4,4,6 };
  int* prior_fine_catchments_in = new int[20*20] {
      11,11,11,11,11,11,13,13,12,12,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,11,13,13,13,13,12,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,12,11,11,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,12,12,11,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,12,12,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,12,14,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,12,14,14,14,14,11,
      11,11,11,13,13,13,13,13,13,13,12,12,12,12,14,14,14,14,14,11,
      11,11,11,11,13,13,13,13,13,13,12,12,12,12,14,14,14,14,15,15,
      11,11,11,13,13,13,13,13,13,12,12,12,12,12,12,14,14,14,15,15,
      15,15,13,13,13,13,13,13,13,12,12,12,12,12,12,12,14,15,15,15,
      15,16,16,16,16,16,16,16,12,12,12,12,12,15,15,15,15,15,15,15,
      15,16,16,16,16,16,16,16, 4,12,12,12,15,15,15,15,15,15,15,15,
      15,16,16,16,16,16,16, 4, 4,12,12, 9,15,15,15,15,15,15,15,15,
      15,16,16,16,16,16, 4, 4, 4, 4,10, 9, 9,15,15,15,15,15,15,15,
      15, 4,16,16,16, 4, 4, 4, 4, 4, 7,10, 9, 9,15,15,15,15,15,15,
      5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7,10, 9, 9, 9, 9, 9,15,15,
      2, 5, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7,10, 9, 9, 9, 8, 6,15,
      2, 2, 5, 4, 3, 1, 4, 4, 4, 4, 7, 7, 7, 7,10, 9, 8, 6, 6, 2,
      2, 2, 2, 0, 1, 1, 1, 4, 4, 4, 7, 7, 7, 7, 7, 0, 6, 6, 6, 2 };
  // double* cell_areas_in = new double[20*20] {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  //                             2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  //                             3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  //                             4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  //                             5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  //                             6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  //                             7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  //                             8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  //                             9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  //                             10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  //                             10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  //                             9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  //                             8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  //                             7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  //                             6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  //                             5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  //                             4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  //                             3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  //                             2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  //                             1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };
  double* cell_areas_in = new double[20*20];
  std::fill_n(cell_areas_in,20*20,1.0);
  bool* landsea_in = new bool[20*20] {
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false, false,false,false,false,false,false,
      false,false,false,false,false,false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false, true,false,false,false,false,false,false,false,false,false,false,false};
  int number_of_lakes = -1;
  bool* lake_mask = new bool[20*20];
  int* lake_numbers = new int[20*20];
  short* sinkless_rdirs = new short[20*20];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[20*20] {
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true, false, false, false,  true,
         true,  true,  true,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false, false,  true,
        false, false,
       false,  true,  true, false,  true, false, false, false,  true,
         true, false, false,  true, false, false, false,  true,  true,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false,  true,  true, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false,  true,  true, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false, false,
        false, false, false, false,  true,  true, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false,  true, false,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true, false, false,  true,  true,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false,  true, false,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false,  true, false,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true, false,  true, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false };
  //Cells in each lake and lake connections and overflows the same - some lake numbers swapped
  //and difference in filling orders
  //All outflows checked
  vector<double>* expected_lakes_as_array = new vector<double> {
    13.0, 26.0, 1.0, 13.0, 0.0, 17.0, 10.0, 3.0, 17.0, 10.0, 1.0, 1.0, 2.0, 16.0, 10.0,
    1.0, 3.0, 3.0, 15.0, 10.0, 1.0, 6.0, 4.0, 1.0, 2.0, 4.0, 2.0, 0.0, 26.0, 2.0,
    13.0, 0.0, 14.0, 8.0, 3.0, 14.0, 8.0, 1.0, 1.0, 2.0, 15.0, 8.0, 1.0, 3.0, 3.0,
    16.0, 8.0, 1.0, 6.0, 4.0, 1.0, 1.0, -1.0, -1.0, 1.0, 56.0, 3.0, -1.0, 0.0, 12.0,
    14.0, 9.0, 12.0, 14.0, 1.0, 1.0, 2.0, 11.0, 15.0, 1.0, 3.0, 3.0, 10.0, 16.0, 1.0,
    6.0, 4.0, 9.0, 17.0, 1.0, 10.0, 5.0, 8.0, 18.0, 1.0, 15.0, 6.0, 9.0, 18.0, 1.0,
    21.0, 7.0, 10.0, 17.0, 1.0, 28.0, 8.0, 11.0, 16.0, 1.0, 36.0, 9.0, 12.0, 15.0, 1.0,
    45.0, 10.0, 1.0, -1.0, 3.0, 4.0, 0.0, 56.0, 4.0, 12.0, 0.0, 12.0, 5.0, 9.0, 12.0,
    5.0, 1.0, 1.0, 3.0, 13.0, 5.0, 1.0, 3.0, 4.0, 14.0, 5.0, 1.0, 6.0, 5.0, 15.0,
    5.0, 1.0, 10.0, 6.0, 15.0, 4.0, 2.0, 14.0, 7.0, 16.0, 5.0, 1.0, 19.0, 8.0, 17.0,
    5.0, 1.0, 25.0, 9.0, 18.0, 5.0, 1.0, 32.0, 10.0, 19.0, 5.0, 1.0, 48.0, 12.0, 1.0,
    5.0, 4.0, 1.0, 0.0, 66.0, 5.0, 12.0, 0.0, 12.0, 2.0, 11.0, 12.0, 2.0, 1.0, 1.0,
    2.0, 13.0, 2.0, 1.0, 3.0, 3.0, 14.0, 2.0, 1.0, 6.0, 4.0, 15.0, 2.0, 1.0, 10.0,
    5.0, 16.0, 2.0, 1.0, 15.0, 6.0, 17.0, 2.0, 1.0, 21.0, 7.0, 18.0, 2.0, 1.0, 28.0,
    8.0, 19.0, 2.0, 1.0, 36.0, 9.0, 19.0, 3.0, 1.0, 45.0, 10.0, 18.0, 3.0, 1.0, 55.0,
    11.0, 17.0, 3.0, 1.0, 66.0, 12.0, 1.0, 4.0, -1.0, -1.0, 1.0, 56.0, 6.0, 10.0, 0.0,
    9.0, 5.0, 9.0, 9.0, 5.0, 1.0, 1.0, 2.0, 8.0, 5.0, 1.0, 3.0, 3.0, 7.0, 5.0,
    1.0, 6.0, 4.0, 6.0, 5.0, 1.0, 10.0, 5.0, 5.0, 5.0, 1.0, 15.0, 6.0, 5.0, 4.0,
    2.0, 20.0, 7.0, 4.0, 5.0, 1.0, 26.0, 8.0, 3.0, 5.0, 1.0, 33.0, 9.0, 2.0, 5.0,
    1.0, 57.0, 12.0, 1.0, 9.0, -1.0, -1.0, 1.0, 61.0, 7.0, 11.0, 0.0, 2.0, 13.0, 10.0,
    2.0, 13.0, 1.0, 1.0, 2.0, 3.0, 13.0, 1.0, 3.0, 3.0, 4.0, 13.0, 1.0, 6.0, 4.0,
    5.0, 13.0, 1.0, 10.0, 5.0, 5.0, 12.0, 1.0, 10.0, 5.0, 5.0, 11.0, 1.0, 16.0, 6.0,
    6.0, 13.0, 1.0, 23.0, 7.0, 7.0, 13.0, 1.0, 31.0, 8.0, 8.0, 13.0, 1.0, 40.0, 9.0,
    9.0, 13.0, 1.0, 70.0, 12.0, 1.0, 8.0, 2.0, 2.0, 0.0, 66.0, 8.0, 11.0, 0.0, 2.0,
    9.0, 11.0, 2.0, 9.0, 1.0, 1.0, 2.0, 3.0, 9.0, 1.0, 3.0, 3.0, 4.0, 9.0, 1.0,
    6.0, 4.0, 5.0, 9.0, 1.0, 10.0, 5.0, 6.0, 9.0, 1.0, 15.0, 6.0, 7.0, 9.0, 1.0,
    21.0, 7.0, 8.0, 9.0, 1.0, 28.0, 8.0, 9.0, 9.0, 1.0, 36.0, 9.0, 9.0, 10.0, 1.0,
    45.0, 10.0, 8.0, 10.0, 1.0, 55.0, 11.0, 7.0, 10.0, 1.0, 66.0, 12.0, 1.0, 7.0, -1.0,
    -1.0, 1.0, 61.0, 9.0, 10.0, 0.0, 2.0, 2.0, 10.0, 2.0, 2.0, 1.0, 1.0, 2.0, 3.0,
    2.0, 1.0, 3.0, 3.0, 4.0, 2.0, 1.0, 6.0, 4.0, 5.0, 2.0, 1.0, 10.0, 5.0, 6.0,
    2.0, 1.0, 15.0, 6.0, 7.0, 2.0, 1.0, 27.0, 8.0, 8.0, 2.0, 1.0, 34.0, 9.0, 9.0,
    2.0, 1.0, 42.0, 10.0, 2.0, 3.0, 1.0, 51.0, 11.0, 3.0, 3.0, 1.0, 61.0, 12.0, 1.0,
    6.0, 1.0, 1.0, 0.0, 138.0, 10.0, -1.0, 2.0, 6.0, 9.0, 9.0, 5.0, 25.0, 9.0, 5.0,
    1.0, 0.0, 12.0, 8.0, 5.0, 1.0, 0.0, 12.0, 7.0, 5.0, 1.0, 0.0, 12.0, 6.0, 5.0,
    1.0, 0.0, 12.0, 5.0, 5.0, 1.0, 0.0, 12.0, 5.0, 4.0, 2.0, 0.0, 12.0, 4.0, 5.0,
    1.0, 0.0, 12.0, 4.0, 3.0, 1.0, 0.0, 12.0, 3.0, 5.0, 1.0, 0.0, 12.0, 3.0, 3.0,
    1.0, 0.0, 12.0, 5.0, 2.0, 1.0, 0.0, 12.0, 4.0, 2.0, 1.0, 0.0, 12.0, 3.0, 2.0,
    1.0, 0.0, 12.0, 2.0, 5.0, 1.0, 0.0, 12.0, 2.0, 3.0, 1.0, 0.0, 12.0, 2.0, 2.0,
    1.0, 0.0, 12.0, 6.0, 2.0, 1.0, 0.0, 12.0, 7.0, 2.0, 1.0, 0.0, 12.0, 8.0, 2.0,
    1.0, 0.0, 12.0, 9.0, 2.0, 1.0, 19.0, 13.0, 5.0, 3.0, 1.0, 39.0, 14.0, 6.0, 3.0,
    1.0, 60.0, 15.0, 7.0, 3.0, 1.0, 82.0, 16.0, 8.0, 3.0, 1.0, 105.0, 17.0, 9.0, 3.0,
    1.0, 129.0, 18.0, 1.0, -1.0, 2.0, 1.0, 0.0, 143.0, 11.0, -1.0, 2.0, 7.0, 8.0, 2.0,
    13.0, 26.0, 2.0, 13.0, 1.0, 0.0, 12.0, 3.0, 13.0, 1.0, 0.0, 12.0, 4.0, 13.0, 1.0,
    0.0, 12.0, 5.0, 13.0, 1.0, 0.0, 12.0, 5.0, 12.0, 1.0, 0.0, 12.0, 6.0, 13.0, 1.0,
    0.0, 12.0, 5.0, 11.0, 1.0, 0.0, 12.0, 7.0, 13.0, 1.0, 0.0, 12.0, 6.0, 10.0, 1.0,
    0.0, 12.0, 8.0, 13.0, 1.0, 0.0, 12.0, 7.0, 10.0, 1.0, 0.0, 12.0, 7.0, 9.0, 1.0,
    0.0, 12.0, 6.0, 9.0, 1.0, 0.0, 12.0, 5.0, 9.0, 1.0, 0.0, 12.0, 9.0, 13.0, 1.0,
    0.0, 12.0, 8.0, 10.0, 1.0, 0.0, 12.0, 8.0, 9.0, 1.0, 0.0, 12.0, 4.0, 9.0, 1.0,
    0.0, 12.0, 9.0, 10.0, 1.0, 0.0, 12.0, 9.0, 9.0, 1.0, 0.0, 12.0, 3.0, 9.0, 1.0,
    0.0, 12.0, 2.0, 9.0, 1.0, 22.0, 13.0, 5.0, 10.0, 1.0, 45.0, 14.0, 4.0, 10.0, 1.0,
    69.0, 15.0, 3.0, 10.0, 1.0, 94.0, 16.0, 2.0, 10.0, 1.0, 146.0, 18.0, 1.0, -1.0, 1.0,
    3.0, 0.0, 138.0, 12.0, -1.0, 2.0, 4.0, 5.0, 12.0, 5.0, 25.0, 12.0, 5.0, 1.0, 0.0,
    12.0, 13.0, 5.0, 1.0, 0.0, 12.0, 14.0, 5.0, 1.0, 0.0, 12.0, 15.0, 5.0, 1.0, 0.0,
    12.0, 15.0, 4.0, 2.0, 0.0, 12.0, 16.0, 5.0, 1.0, 0.0, 12.0, 16.0, 3.0, 1.0, 0.0,
    12.0, 17.0, 5.0, 1.0, 0.0, 12.0, 17.0, 3.0, 1.0, 0.0, 12.0, 17.0, 2.0, 1.0, 0.0,
    12.0, 16.0, 2.0, 1.0, 0.0, 12.0, 15.0, 2.0, 1.0, 0.0, 12.0, 18.0, 5.0, 1.0, 0.0,
    12.0, 18.0, 3.0, 1.0, 0.0, 12.0, 18.0, 2.0, 1.0, 0.0, 12.0, 14.0, 2.0, 1.0, 0.0,
    12.0, 19.0, 5.0, 1.0, 0.0, 12.0, 19.0, 3.0, 1.0, 0.0, 12.0, 19.0, 2.0, 1.0, 0.0,
    12.0, 13.0, 2.0, 1.0, 0.0, 12.0, 12.0, 2.0, 1.0, 20.0, 13.0, 15.0, 3.0, 1.0, 41.0,
    14.0, 14.0, 3.0, 1.0, 63.0, 15.0, 13.0, 3.0, 1.0, 86.0, 16.0, 12.0, 3.0, 1.0, 134.0,
    18.0, 1.0, -1.0, 4.0, 2.0, 0.0, 58.0, 13.0, -1.0, 2.0, 1.0, 2.0, 17.0, 10.0, 9.0,
    17.0, 10.0, 1.0, 0.0, 4.0, 16.0, 10.0, 1.0, 0.0, 4.0, 15.0, 10.0, 1.0, 0.0, 4.0,
    15.0, 9.0, 1.0, 0.0, 4.0, 16.0, 8.0, 1.0, 0.0, 4.0, 15.0, 8.0, 1.0, 0.0, 4.0,
    14.0, 8.0, 1.0, 0.0, 4.0, 17.0, 8.0, 1.0, 8.0, 5.0, 14.0, 10.0, 1.0, 17.0, 6.0,
    1.0, -1.0, 4.0, 2.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 13);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

// Test 4 not currently in use

TEST_F(BasinEvaluationTest,EvaluateBasinsFive) {
  int nlat_fine = 20;
  int nlon_fine = 20;
  int nlat_coarse = 4;
  int nlon_coarse = 4;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[4*4] {5,5,5,5,
                                         2,2,5,5,
                                         5,4,8,8,
                                         8,7,4,0 };
  double* corrected_orography_in = new double[20*20] {
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,9.0,9.0,3.0,3.0, 3.0,9.0,1.0,1.0,9.0, 1.0,1.0,1.0,1.0,9.0, 9.0,2.0,2.0,2.0,9.0,
      9.0,1.0,9.0,3.0,3.0, 3.0,6.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,7.0, 7.0,2.0,2.0,2.0,9.0,
      9.0,1.0,9.0,3.0,3.0, 3.0,9.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,9.0, 9.0,2.0,2.0,2.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,1.0,1.0,1.0,9.0, 9.0,2.0,2.0,2.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,1.0,1.0,1.0,9.0, 9.0,9.0,6.0,9.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,5.0,9.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,7.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,8.0,9.0,
      9.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 9.0,9.0,9.0,9.0,7.0, 7.0,7.0,7.0,7.0,7.0,
      9.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,8.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0 };
  double* raw_orography_in = new double[20*20] {
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,9.0,9.0,3.0,3.0, 3.0,9.0,1.0,1.0,9.0, 1.0,1.0,1.0,1.0,9.0, 9.0,2.0,2.0,2.0,9.0,
      9.0,1.0,9.0,3.0,3.0, 3.0,6.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,7.0, 7.0,2.0,2.0,2.0,9.0,
      9.0,1.0,9.0,3.0,3.0, 3.0,9.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,9.0, 9.0,2.0,2.0,2.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,1.0,1.0,1.0,9.0, 9.0,2.0,2.0,2.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,1.0,1.0,1.0,9.0, 9.0,9.0,6.0,9.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,5.0,9.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,4.0,4.0,4.0,9.0, 9.0,3.0,3.0,3.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,8.0,9.0,
      9.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 9.0,9.0,9.0,9.0,7.0, 7.0,7.0,7.0,7.0,7.0,
      9.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,8.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0 };
  bool* minima_in = new bool[20*20] {false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false,  true, false,  false, false,  true, false, false,
                          false, false, false, false, false,   false,  true, false, false, false,
                          false,  true, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false,  true, false, false, false,  false, true,  false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false,  true, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false,
                          false, false, false, false, false,  false, false, false, false, false,
                           false, false, false, false, false,  false, false, false, false, false };
  int* prior_fine_rdirs_in = new int[20*20] {
      1, 4, 3, 2, 1, 1, 3, 2, 1, 1, 2, 1, 1, 1, 1, 3, 2, 1, 1, 1,
      3, 2, 1, 5, 4, 4, 6, 5, 4, 4, 1, 4, 4, 4, 4, 6, 5, 4, 4, 4,
      6, 5, 4, 8, 7, 7, 9, 8, 7, 7, 4, 7, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 8, 7, 7, 9, 8, 7, 7, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 8, 7, 7, 9, 8, 7, 7, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 2, 1, 4, 4, 4, 4, 4, 9, 8, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 1, 4, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7, 6, 5, 4, 4, 4,
      9, 8, 7, 4, 7, 7, 7, 7, 7, 7, 6, 5, 4, 4, 4, 9, 8, 7, 7, 7,
      9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 8, 7, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 8, 7, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 8, 7, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 8, 7, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7, 9, 8, 7, 7, 7,
      9, 8, 7, 1, 1, 1, 1, 1, 1, 1, 9, 8, 7, 7, 7, 9, 8, 7, 7, 7,
      1, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 3, 2, 1, 1, 1, 1,
      4, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 6, 3, 2, 1, 1, 1,
      7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 6, 3, 2, 1, 1,
      7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 6, 3, 2, 1,
      1, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 6, 3, 2,
      4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 6, 0 };
  int* prior_fine_catchments_in = new int[20*20] {
      3, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
      4, 4, 4, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
      4, 4, 4, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
      4, 4, 4, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
      4, 4, 4, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5,
      4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5,
      8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8,
      8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8,
      8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8,
      8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8,
      8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8,
      8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8 };
  double* cell_areas_in = new double[20*20] {1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1 };
  bool* landsea_in = new bool[20*20] {
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,true};
  int number_of_lakes = -1;
  bool* lake_mask = new bool[20*20];
  int* lake_numbers = new int[20*20];
  short* sinkless_rdirs = new short[20*20];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[20*20] {false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false,  true,  true,  true, false,  true,  true,
        false,  true,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false,
       false,  true, false,  true,  true,  true, false,  true,  true,
         true,  true,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false,  true,  true,  true, false, false, false,  true,
        false, false,
       false,  true, false, false, false, false, false, false, false,
        false, false, false,  true, false, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false,  true,  true,  true, false, false,  true,  true,
         true, false,
       false,  true, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true, false, false, false, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true, false, false, false, false, false,
        false, false,
       false,  true,  true,  true,  true,  true,  true,  true,  true,
         true,  true,  true,  true, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false };
  //Cells in each lake and lake connections and overflows the same - some lake numbers swapped
  //and difference in filling orders
  //All outflows the same
  vector<double>* expected_lakes_as_array = new vector<double> {
    12.0, 236.0, 1.0, 10.0, 0.0, 15.0, 2.0, 45.0, 15.0, 2.0, 1.0, 0.0, 6.0, 16.0, 3.0,
    1.0, 0.0, 6.0, 15.0, 3.0, 1.0, 0.0, 6.0, 16.0, 2.0, 1.0, 0.0, 6.0, 17.0, 4.0,
    1.0, 0.0, 6.0, 16.0, 4.0, 1.0, 0.0, 6.0, 15.0, 4.0, 1.0, 0.0, 6.0, 17.0, 3.0,
    1.0, 0.0, 6.0, 17.0, 2.0, 1.0, 0.0, 6.0, 18.0, 5.0, 1.0, 0.0, 6.0, 17.0, 5.0,
    1.0, 0.0, 6.0, 16.0, 5.0, 1.0, 0.0, 6.0, 18.0, 4.0, 1.0, 0.0, 6.0, 18.0, 3.0,
    1.0, 0.0, 6.0, 15.0, 5.0, 1.0, 0.0, 6.0, 18.0, 2.0, 1.0, 0.0, 6.0, 18.0, 6.0,
    1.0, 0.0, 6.0, 17.0, 6.0, 1.0, 0.0, 6.0, 16.0, 6.0, 1.0, 0.0, 6.0, 15.0, 6.0,
    1.0, 0.0, 6.0, 18.0, 7.0, 1.0, 0.0, 6.0, 17.0, 7.0, 1.0, 0.0, 6.0, 16.0, 7.0,
    1.0, 0.0, 6.0, 15.0, 7.0, 1.0, 0.0, 6.0, 18.0, 8.0, 1.0, 0.0, 6.0, 17.0, 8.0,
    1.0, 0.0, 6.0, 16.0, 8.0, 1.0, 0.0, 6.0, 15.0, 8.0, 1.0, 0.0, 6.0, 18.0, 9.0,
    1.0, 0.0, 6.0, 17.0, 9.0, 1.0, 0.0, 6.0, 16.0, 9.0, 1.0, 0.0, 6.0, 15.0, 9.0,
    1.0, 0.0, 6.0, 18.0, 10.0, 1.0, 0.0, 6.0, 17.0, 10.0, 1.0, 0.0, 6.0, 16.0, 10.0,
    1.0, 0.0, 6.0, 15.0, 10.0, 1.0, 0.0, 6.0, 18.0, 11.0, 1.0, 0.0, 6.0, 17.0, 11.0,
    1.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 6.0, 18.0, 12.0, 1.0, 0.0, 6.0, 17.0, 12.0,
    1.0, 0.0, 6.0, 16.0, 12.0, 1.0, 0.0, 6.0, 18.0, 13.0, 1.0, 0.0, 6.0, 17.0, 13.0,
    1.0, 0.0, 6.0, 16.0, 13.0, 1.0, 45.0, 7.0, 1.0, 4.0, 3.0, 1.0, 0.0, 116.0, 2.0,
    9.0, 0.0, 8.0, 17.0, 21.0, 8.0, 17.0, 1.0, 0.0, 3.0, 9.0, 18.0, 1.0, 0.0, 3.0,
    8.0, 18.0, 1.0, 0.0, 3.0, 7.0, 18.0, 1.0, 0.0, 3.0, 9.0, 17.0, 1.0, 0.0, 3.0,
    7.0, 17.0, 1.0, 0.0, 3.0, 10.0, 19.0, 1.0, 0.0, 3.0, 9.0, 19.0, 1.0, 0.0, 3.0,
    8.0, 19.0, 1.0, 0.0, 3.0, 10.0, 18.0, 1.0, 0.0, 3.0, 10.0, 17.0, 1.0, 0.0, 3.0,
    7.0, 19.0, 1.0, 0.0, 3.0, 11.0, 19.0, 1.0, 0.0, 3.0, 11.0, 18.0, 1.0, 0.0, 3.0,
    11.0, 17.0, 1.0, 0.0, 3.0, 12.0, 19.0, 1.0, 0.0, 3.0, 12.0, 18.0, 1.0, 0.0, 3.0,
    12.0, 17.0, 1.0, 0.0, 3.0, 13.0, 19.0, 1.0, 0.0, 3.0, 13.0, 18.0, 1.0, 0.0, 3.0,
    13.0, 17.0, 1.0, 63.0, 6.0, 1.0, 5.0, -1.0, -1.0, 1.0, 101.0, 3.0, 8.0, 0.0, 8.0,
    12.0, 18.0, 8.0, 12.0, 1.0, 0.0, 4.0, 9.0, 13.0, 1.0, 0.0, 4.0, 8.0, 13.0, 1.0,
    0.0, 4.0, 9.0, 12.0, 1.0, 0.0, 4.0, 10.0, 14.0, 1.0, 0.0, 4.0, 9.0, 14.0, 1.0,
    0.0, 4.0, 8.0, 14.0, 1.0, 0.0, 4.0, 10.0, 13.0, 1.0, 0.0, 4.0, 10.0, 12.0, 1.0,
    0.0, 4.0, 11.0, 14.0, 1.0, 0.0, 4.0, 11.0, 13.0, 1.0, 0.0, 4.0, 11.0, 12.0, 1.0,
    0.0, 4.0, 12.0, 14.0, 1.0, 0.0, 4.0, 12.0, 13.0, 1.0, 0.0, 4.0, 12.0, 12.0, 1.0,
    0.0, 4.0, 13.0, 14.0, 1.0, 0.0, 4.0, 13.0, 13.0, 1.0, 0.0, 4.0, 13.0, 12.0, 1.0,
    18.0, 5.0, 1.0, 6.0, 2.0, 3.0, 0.0, 66.0, 4.0, 10.0, 0.0, 3.0, 2.0, 11.0, 3.0,
    2.0, 1.0, 0.0, 1.0, 4.0, 2.0, 1.0, 0.0, 1.0, 5.0, 2.0, 1.0, 0.0, 1.0, 6.0,
    2.0, 1.0, 0.0, 1.0, 7.0, 2.0, 1.0, 0.0, 1.0, 8.0, 2.0, 1.0, 0.0, 1.0, 9.0,
    2.0, 1.0, 0.0, 1.0, 10.0, 2.0, 1.0, 0.0, 1.0, 11.0, 2.0, 1.0, 0.0, 1.0, 12.0,
    2.0, 1.0, 0.0, 1.0, 13.0, 2.0, 1.0, 66.0, 7.0, 1.0, 1.0, -1.0, -1.0, 1.0, 71.0,
    5.0, 9.0, 0.0, 2.0, 17.0, 12.0, 2.0, 17.0, 1.0, 0.0, 2.0, 3.0, 18.0, 1.0, 0.0,
    2.0, 2.0, 18.0, 1.0, 0.0, 2.0, 3.0, 17.0, 1.0, 0.0, 2.0, 4.0, 19.0, 1.0, 0.0,
    2.0, 3.0, 19.0, 1.0, 0.0, 2.0, 2.0, 19.0, 1.0, 0.0, 2.0, 4.0, 18.0, 1.0, 0.0,
    2.0, 4.0, 17.0, 1.0, 0.0, 2.0, 5.0, 19.0, 1.0, 0.0, 2.0, 5.0, 18.0, 1.0, 0.0,
    2.0, 5.0, 17.0, 1.0, 48.0, 6.0, 1.0, 2.0, -1.0, -1.0, 1.0, 141.0, 6.0, 8.0, 0.0,
    2.0, 8.0, 26.0, 2.0, 8.0, 1.0, 0.0, 1.0, 3.0, 9.0, 1.0, 0.0, 1.0, 2.0, 9.0,
    1.0, 0.0, 1.0, 3.0, 8.0, 1.0, 0.0, 1.0, 4.0, 10.0, 1.0, 0.0, 1.0, 3.0, 10.0,
    1.0, 0.0, 1.0, 4.0, 9.0, 1.0, 0.0, 1.0, 4.0, 8.0, 1.0, 0.0, 1.0, 4.0, 11.0,
    1.0, 0.0, 1.0, 3.0, 11.0, 1.0, 0.0, 1.0, 2.0, 11.0, 1.0, 0.0, 1.0, 5.0, 12.0,
    1.0, 0.0, 1.0, 4.0, 12.0, 1.0, 0.0, 1.0, 3.0, 12.0, 1.0, 0.0, 1.0, 2.0, 12.0,
    1.0, 0.0, 1.0, 6.0, 13.0, 1.0, 0.0, 1.0, 5.0, 13.0, 1.0, 0.0, 1.0, 4.0, 13.0,
    1.0, 0.0, 1.0, 6.0, 12.0, 1.0, 0.0, 1.0, 3.0, 13.0, 1.0, 0.0, 1.0, 2.0, 13.0,
    1.0, 0.0, 1.0, 6.0, 14.0, 1.0, 0.0, 1.0, 5.0, 14.0, 1.0, 0.0, 1.0, 4.0, 14.0,
    1.0, 0.0, 1.0, 3.0, 14.0, 1.0, 0.0, 1.0, 2.0, 14.0, 1.0, 104.0, 5.0, 1.0, 3.0,
    -1.0, -1.0, 1.0, 56.0, 7.0, 11.0, 0.0, 2.0, 4.0, 9.0, 2.0, 4.0, 1.0, 0.0, 3.0,
    3.0, 5.0, 1.0, 0.0, 3.0, 2.0, 5.0, 1.0, 0.0, 3.0, 3.0, 4.0, 1.0, 0.0, 3.0,
    4.0, 6.0, 1.0, 0.0, 3.0, 3.0, 6.0, 1.0, 0.0, 3.0, 2.0, 6.0, 1.0, 0.0, 3.0,
    4.0, 5.0, 1.0, 0.0, 3.0, 4.0, 4.0, 1.0, 27.0, 6.0, 1.0, 8.0, 1.0, 2.0, 0.0,
    238.0, 8.0, 11.0, 2.0, 3.0, 6.0, 8.0, 12.0, 45.0, 8.0, 12.0, 1.0, 0.0, 5.0, 9.0,
    13.0, 1.0, 0.0, 5.0, 8.0, 13.0, 1.0, 0.0, 5.0, 7.0, 13.0, 1.0, 0.0, 5.0, 9.0,
    12.0, 1.0, 0.0, 5.0, 10.0, 14.0, 1.0, 0.0, 5.0, 9.0, 14.0, 1.0, 0.0, 5.0, 8.0,
    14.0, 1.0, 0.0, 5.0, 10.0, 13.0, 1.0, 0.0, 5.0, 10.0, 12.0, 1.0, 0.0, 5.0, 6.0,
    14.0, 1.0, 0.0, 5.0, 6.0, 13.0, 1.0, 0.0, 5.0, 6.0, 12.0, 1.0, 0.0, 5.0, 11.0,
    14.0, 1.0, 0.0, 5.0, 11.0, 13.0, 1.0, 0.0, 5.0, 11.0, 12.0, 1.0, 0.0, 5.0, 5.0,
    14.0, 1.0, 0.0, 5.0, 5.0, 13.0, 1.0, 0.0, 5.0, 5.0, 12.0, 1.0, 0.0, 5.0, 12.0,
    14.0, 1.0, 0.0, 5.0, 12.0, 13.0, 1.0, 0.0, 5.0, 12.0, 12.0, 1.0, 0.0, 5.0, 4.0,
    14.0, 1.0, 0.0, 5.0, 4.0, 13.0, 1.0, 0.0, 5.0, 4.0, 12.0, 1.0, 0.0, 5.0, 4.0,
    11.0, 1.0, 0.0, 5.0, 13.0, 14.0, 1.0, 0.0, 5.0, 13.0, 13.0, 1.0, 0.0, 5.0, 13.0,
    12.0, 1.0, 0.0, 5.0, 3.0, 14.0, 1.0, 0.0, 5.0, 3.0, 13.0, 1.0, 0.0, 5.0, 3.0,
    12.0, 1.0, 0.0, 5.0, 3.0, 11.0, 1.0, 0.0, 5.0, 4.0, 10.0, 1.0, 0.0, 5.0, 3.0,
    10.0, 1.0, 0.0, 5.0, 2.0, 14.0, 1.0, 0.0, 5.0, 2.0, 13.0, 1.0, 0.0, 5.0, 2.0,
    12.0, 1.0, 0.0, 5.0, 2.0, 11.0, 1.0, 0.0, 5.0, 4.0, 9.0, 1.0, 0.0, 5.0, 3.0,
    9.0, 1.0, 0.0, 5.0, 2.0, 9.0, 1.0, 0.0, 5.0, 4.0, 8.0, 1.0, 0.0, 5.0, 3.0,
    8.0, 1.0, 0.0, 5.0, 2.0, 8.0, 1.0, 45.0, 6.0, 1.0, 7.0, 1.0, 2.0, 0.0, 183.0,
    9.0, 12.0, 2.0, 2.0, 5.0, 8.0, 17.0, 34.0, 8.0, 17.0, 1.0, 0.0, 6.0, 9.0, 18.0,
    1.0, 0.0, 6.0, 8.0, 18.0, 1.0, 0.0, 6.0, 7.0, 18.0, 1.0, 0.0, 6.0, 9.0, 17.0,
    1.0, 0.0, 6.0, 7.0, 17.0, 1.0, 0.0, 6.0, 10.0, 19.0, 1.0, 0.0, 6.0, 9.0, 19.0,
    1.0, 0.0, 6.0, 8.0, 19.0, 1.0, 0.0, 6.0, 10.0, 18.0, 1.0, 0.0, 6.0, 10.0, 17.0,
    1.0, 0.0, 6.0, 7.0, 19.0, 1.0, 0.0, 6.0, 6.0, 18.0, 1.0, 0.0, 6.0, 11.0, 19.0,
    1.0, 0.0, 6.0, 11.0, 18.0, 1.0, 0.0, 6.0, 11.0, 17.0, 1.0, 0.0, 6.0, 5.0, 19.0,
    1.0, 0.0, 6.0, 5.0, 18.0, 1.0, 0.0, 6.0, 5.0, 17.0, 1.0, 0.0, 6.0, 12.0, 19.0,
    1.0, 0.0, 6.0, 12.0, 18.0, 1.0, 0.0, 6.0, 12.0, 17.0, 1.0, 0.0, 6.0, 4.0, 19.0,
    1.0, 0.0, 6.0, 4.0, 18.0, 1.0, 0.0, 6.0, 4.0, 17.0, 1.0, 0.0, 6.0, 13.0, 19.0,
    1.0, 0.0, 6.0, 13.0, 18.0, 1.0, 0.0, 6.0, 13.0, 17.0, 1.0, 0.0, 6.0, 3.0, 19.0,
    1.0, 0.0, 6.0, 3.0, 18.0, 1.0, 0.0, 6.0, 3.0, 17.0, 1.0, 0.0, 6.0, 2.0, 19.0,
    1.0, 0.0, 6.0, 2.0, 18.0, 1.0, 0.0, 6.0, 2.0, 17.0, 1.0, 34.0, 7.0, 1.0, 11.0,
    1.0, 3.0, 0.0, 298.0, 10.0, -1.0, 2.0, 1.0, 4.0, 15.0, 2.0, 57.0, 15.0, 2.0, 1.0,
    0.0, 7.0, 16.0, 3.0, 1.0, 0.0, 7.0, 15.0, 3.0, 1.0, 0.0, 7.0, 14.0, 2.0, 2.0,
    0.0, 7.0, 16.0, 2.0, 1.0, 0.0, 7.0, 17.0, 4.0, 1.0, 0.0, 7.0, 16.0, 4.0, 1.0,
    0.0, 7.0, 15.0, 4.0, 1.0, 0.0, 7.0, 17.0, 3.0, 1.0, 0.0, 7.0, 17.0, 2.0, 1.0,
    0.0, 7.0, 13.0, 2.0, 1.0, 0.0, 7.0, 18.0, 5.0, 1.0, 0.0, 7.0, 17.0, 5.0, 1.0,
    0.0, 7.0, 16.0, 5.0, 1.0, 0.0, 7.0, 18.0, 4.0, 1.0, 0.0, 7.0, 18.0, 3.0, 1.0,
    0.0, 7.0, 15.0, 5.0, 1.0, 0.0, 7.0, 18.0, 2.0, 1.0, 0.0, 7.0, 12.0, 2.0, 1.0,
    0.0, 7.0, 18.0, 6.0, 1.0, 0.0, 7.0, 17.0, 6.0, 1.0, 0.0, 7.0, 16.0, 6.0, 1.0,
    0.0, 7.0, 15.0, 6.0, 1.0, 0.0, 7.0, 11.0, 2.0, 1.0, 0.0, 7.0, 18.0, 7.0, 1.0,
    0.0, 7.0, 17.0, 7.0, 1.0, 0.0, 7.0, 16.0, 7.0, 1.0, 0.0, 7.0, 15.0, 7.0, 1.0,
    0.0, 7.0, 10.0, 2.0, 1.0, 0.0, 7.0, 18.0, 8.0, 1.0, 0.0, 7.0, 17.0, 8.0, 1.0,
    0.0, 7.0, 16.0, 8.0, 1.0, 0.0, 7.0, 15.0, 8.0, 1.0, 0.0, 7.0, 9.0, 2.0, 1.0,
    0.0, 7.0, 18.0, 9.0, 1.0, 0.0, 7.0, 17.0, 9.0, 1.0, 0.0, 7.0, 16.0, 9.0, 1.0,
    0.0, 7.0, 15.0, 9.0, 1.0, 0.0, 7.0, 8.0, 2.0, 1.0, 0.0, 7.0, 18.0, 10.0, 1.0,
    0.0, 7.0, 17.0, 10.0, 1.0, 0.0, 7.0, 16.0, 10.0, 1.0, 0.0, 7.0, 15.0, 10.0, 1.0,
    0.0, 7.0, 7.0, 2.0, 1.0, 0.0, 7.0, 18.0, 11.0, 1.0, 0.0, 7.0, 17.0, 11.0, 1.0,
    0.0, 7.0, 16.0, 11.0, 1.0, 0.0, 7.0, 6.0, 2.0, 1.0, 0.0, 7.0, 18.0, 12.0, 1.0,
    0.0, 7.0, 17.0, 12.0, 1.0, 0.0, 7.0, 16.0, 12.0, 1.0, 0.0, 7.0, 5.0, 2.0, 1.0,
    0.0, 7.0, 18.0, 13.0, 1.0, 0.0, 7.0, 17.0, 13.0, 1.0, 0.0, 7.0, 16.0, 13.0, 1.0,
    0.0, 7.0, 4.0, 2.0, 1.0, 0.0, 7.0, 3.0, 2.0, 1.0, 56.0, 8.0, 1.0, -1.0, 4.0,
    4.0, 0.0, 288.0, 11.0, 12.0, 2.0, 7.0, 8.0, 2.0, 4.0, 55.0, 2.0, 4.0, 1.0, 0.0,
    6.0, 3.0, 5.0, 1.0, 0.0, 6.0, 2.0, 5.0, 1.0, 0.0, 6.0, 3.0, 4.0, 1.0, 0.0,
    6.0, 4.0, 6.0, 1.0, 0.0, 6.0, 3.0, 6.0, 1.0, 0.0, 6.0, 2.0, 6.0, 1.0, 0.0,
    6.0, 4.0, 5.0, 1.0, 0.0, 6.0, 4.0, 4.0, 1.0, 0.0, 6.0, 3.0, 7.0, 1.0, 0.0,
    6.0, 4.0, 8.0, 1.0, 0.0, 6.0, 3.0, 8.0, 1.0, 0.0, 6.0, 2.0, 8.0, 1.0, 0.0,
    6.0, 4.0, 9.0, 1.0, 0.0, 6.0, 3.0, 9.0, 1.0, 0.0, 6.0, 2.0, 9.0, 1.0, 0.0,
    6.0, 4.0, 10.0, 1.0, 0.0, 6.0, 3.0, 10.0, 1.0, 0.0, 6.0, 4.0, 11.0, 1.0, 0.0,
    6.0, 3.0, 11.0, 1.0, 0.0, 6.0, 2.0, 11.0, 1.0, 0.0, 6.0, 5.0, 12.0, 1.0, 0.0,
    6.0, 4.0, 12.0, 1.0, 0.0, 6.0, 3.0, 12.0, 1.0, 0.0, 6.0, 2.0, 12.0, 1.0, 0.0,
    6.0, 6.0, 13.0, 1.0, 0.0, 6.0, 5.0, 13.0, 1.0, 0.0, 6.0, 4.0, 13.0, 1.0, 0.0,
    6.0, 6.0, 12.0, 1.0, 0.0, 6.0, 3.0, 13.0, 1.0, 0.0, 6.0, 2.0, 13.0, 1.0, 0.0,
    6.0, 6.0, 14.0, 1.0, 0.0, 6.0, 5.0, 14.0, 1.0, 0.0, 6.0, 7.0, 13.0, 1.0, 0.0,
    6.0, 4.0, 14.0, 1.0, 0.0, 6.0, 3.0, 14.0, 1.0, 0.0, 6.0, 2.0, 14.0, 1.0, 0.0,
    6.0, 8.0, 14.0, 1.0, 0.0, 6.0, 8.0, 13.0, 1.0, 0.0, 6.0, 8.0, 12.0, 1.0, 0.0,
    6.0, 9.0, 14.0, 1.0, 0.0, 6.0, 9.0, 13.0, 1.0, 0.0, 6.0, 9.0, 12.0, 1.0, 0.0,
    6.0, 10.0, 14.0, 1.0, 0.0, 6.0, 10.0, 13.0, 1.0, 0.0, 6.0, 10.0, 12.0, 1.0, 0.0,
    6.0, 11.0, 14.0, 1.0, 0.0, 6.0, 11.0, 13.0, 1.0, 0.0, 6.0, 11.0, 12.0, 1.0, 0.0,
    6.0, 12.0, 14.0, 1.0, 0.0, 6.0, 12.0, 13.0, 1.0, 0.0, 6.0, 12.0, 12.0, 1.0, 0.0,
    6.0, 13.0, 14.0, 1.0, 0.0, 6.0, 13.0, 13.0, 1.0, 0.0, 6.0, 13.0, 12.0, 1.0, 55.0,
    7.0, 1.0, 9.0, 1.0, 4.0, 0.0, 468.0, 12.0, -1.0, 2.0, 9.0, 11.0, 8.0, 17.0, 91.0,
    8.0, 17.0, 1.0, 0.0, 7.0, 9.0, 18.0, 1.0, 0.0, 7.0, 8.0, 18.0, 1.0, 0.0, 7.0,
    7.0, 18.0, 1.0, 0.0, 7.0, 9.0, 17.0, 1.0, 0.0, 7.0, 7.0, 17.0, 1.0, 0.0, 7.0,
    10.0, 19.0, 1.0, 0.0, 7.0, 9.0, 19.0, 1.0, 0.0, 7.0, 8.0, 19.0, 1.0, 0.0, 7.0,
    10.0, 18.0, 1.0, 0.0, 7.0, 10.0, 17.0, 1.0, 0.0, 7.0, 7.0, 19.0, 1.0, 0.0, 7.0,
    6.0, 18.0, 1.0, 0.0, 7.0, 11.0, 19.0, 1.0, 0.0, 7.0, 11.0, 18.0, 1.0, 0.0, 7.0,
    11.0, 17.0, 1.0, 0.0, 7.0, 5.0, 19.0, 1.0, 0.0, 7.0, 5.0, 18.0, 1.0, 0.0, 7.0,
    5.0, 17.0, 1.0, 0.0, 7.0, 12.0, 19.0, 1.0, 0.0, 7.0, 12.0, 18.0, 1.0, 0.0, 7.0,
    12.0, 17.0, 1.0, 0.0, 7.0, 4.0, 19.0, 1.0, 0.0, 7.0, 4.0, 18.0, 1.0, 0.0, 7.0,
    4.0, 17.0, 1.0, 0.0, 7.0, 13.0, 19.0, 1.0, 0.0, 7.0, 13.0, 18.0, 1.0, 0.0, 7.0,
    13.0, 17.0, 1.0, 0.0, 7.0, 3.0, 19.0, 1.0, 0.0, 7.0, 3.0, 18.0, 1.0, 0.0, 7.0,
    3.0, 17.0, 1.0, 0.0, 7.0, 3.0, 16.0, 1.0, 0.0, 7.0, 2.0, 19.0, 1.0, 0.0, 7.0,
    2.0, 18.0, 1.0, 0.0, 7.0, 2.0, 17.0, 1.0, 0.0, 7.0, 3.0, 15.0, 1.0, 0.0, 7.0,
    4.0, 14.0, 1.0, 0.0, 7.0, 3.0, 14.0, 1.0, 0.0, 7.0, 2.0, 14.0, 1.0, 0.0, 7.0,
    5.0, 14.0, 1.0, 0.0, 7.0, 5.0, 13.0, 1.0, 0.0, 7.0, 4.0, 13.0, 1.0, 0.0, 7.0,
    3.0, 13.0, 1.0, 0.0, 7.0, 2.0, 13.0, 1.0, 0.0, 7.0, 6.0, 14.0, 1.0, 0.0, 7.0,
    6.0, 13.0, 1.0, 0.0, 7.0, 6.0, 12.0, 1.0, 0.0, 7.0, 5.0, 12.0, 1.0, 0.0, 7.0,
    4.0, 12.0, 1.0, 0.0, 7.0, 3.0, 12.0, 1.0, 0.0, 7.0, 2.0, 12.0, 1.0, 0.0, 7.0,
    7.0, 13.0, 1.0, 0.0, 7.0, 4.0, 11.0, 1.0, 0.0, 7.0, 3.0, 11.0, 1.0, 0.0, 7.0,
    2.0, 11.0, 1.0, 0.0, 7.0, 8.0, 14.0, 1.0, 0.0, 7.0, 8.0, 13.0, 1.0, 0.0, 7.0,
    8.0, 12.0, 1.0, 0.0, 7.0, 4.0, 10.0, 1.0, 0.0, 7.0, 3.0, 10.0, 1.0, 0.0, 7.0,
    9.0, 14.0, 1.0, 0.0, 7.0, 9.0, 13.0, 1.0, 0.0, 7.0, 9.0, 12.0, 1.0, 0.0, 7.0,
    4.0, 9.0, 1.0, 0.0, 7.0, 3.0, 9.0, 1.0, 0.0, 7.0, 2.0, 9.0, 1.0, 0.0, 7.0,
    10.0, 14.0, 1.0, 0.0, 7.0, 10.0, 13.0, 1.0, 0.0, 7.0, 10.0, 12.0, 1.0, 0.0, 7.0,
    4.0, 8.0, 1.0, 0.0, 7.0, 3.0, 8.0, 1.0, 0.0, 7.0, 2.0, 8.0, 1.0, 0.0, 7.0,
    11.0, 14.0, 1.0, 0.0, 7.0, 11.0, 13.0, 1.0, 0.0, 7.0, 11.0, 12.0, 1.0, 0.0, 7.0,
    3.0, 7.0, 1.0, 0.0, 7.0, 12.0, 14.0, 1.0, 0.0, 7.0, 12.0, 13.0, 1.0, 0.0, 7.0,
    12.0, 12.0, 1.0, 0.0, 7.0, 4.0, 6.0, 1.0, 0.0, 7.0, 3.0, 6.0, 1.0, 0.0, 7.0,
    2.0, 6.0, 1.0, 0.0, 7.0, 13.0, 14.0, 1.0, 0.0, 7.0, 13.0, 13.0, 1.0, 0.0, 7.0,
    13.0, 12.0, 1.0, 0.0, 7.0, 4.0, 5.0, 1.0, 0.0, 7.0, 3.0, 5.0, 1.0, 0.0, 7.0,
    2.0, 5.0, 1.0, 0.0, 7.0, 4.0, 4.0, 1.0, 0.0, 7.0, 3.0, 4.0, 1.0, 0.0, 7.0,
    2.0, 4.0, 1.0, 91.0, 8.0, 1.0, -1.0, 4.0, 4.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 12);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,EvaluateBasinsSix) {
  int nlat_fine = 20;
  int nlon_fine = 20;
  int nlat_coarse = 4;
  int nlon_coarse = 4;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[4*4] {5,5,5,5,
                                         5,5,5,5,
                                         5,5,6,2,
                                         5,6,6,0 };
  double* corrected_orography_in = new double[20*20] {
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,9.0,2.0,9.0,3.0, 3.0,9.0,2.0,9.0,3.0, 3.0,9.0,2.0,9.0,3.0, 3.0,3.0,3.0,9.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,3.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0,
      //
      9.0,1.0,9.0,1.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,2.0,9.0,2.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,9.0,2.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,1.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,2.0,9.0,2.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0,
      //
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,2.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,4.0,9.0,9.0,
      9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,7.0, 7.0,7.0,4.0,7.0,7.0,
      //
      9.0,1.0,9.0,1.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,1.0,9.0,1.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,2.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0, 9.0,1.0,9.0,1.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0 };
  double* raw_orography_in = new double[20*20] {
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 3.0,9.0,2.0,9.0,3.0, 9.0,9.0,2.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0,
      //
      9.0,1.0,9.0,1.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,2.0,9.0,2.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,9.0,2.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,1.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,2.0,9.0,2.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0,
      //
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0,
      9.0,9.0,3.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 7.0,7.0,4.0,7.0,7.0,
      //
      9.0,1.0,9.0,1.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,3.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,1.0,9.0,1.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,2.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,1.0,9.0,9.0,9.0, 9.0,1.0,9.0,1.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0 };
  bool* minima_in = new bool[20*20] {
     false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,
     false, true,false, true,false,false, true,false, true,false,false, true,
      false, true,false,false,false,false,false,false,
     false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,
     false, true,false, true,false,false, true,false, true,false,false, true,
      false, true,false,false,false,false,false,false,
     false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,
     false, true,false, true,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,
     false,false,false,false,false,false, true,false, true,false,false, true,
      false, true,false,false,false,false,false,false,
     false, true,false, true,false,false,false,false,false,false,false,false,
      false,false,false,false,false, true,false,false,
     false,false,false,false,false,false, true,false, true,false,false, true,
      false, true,false,false,false,false,false,false,
     false, true,false, true,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,
     false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false, true,false, true,false,
     false, true,false, true,false,false, true,false, true,false,false, true,
      false, true,false,false,false,false,false,false,
     false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false, true,false, true,false,
     false, true,false, true,false,false, true,false, true,false,false, true,
      false, true,false,false,false,false,false,false,
     false,false,false,false,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,
     false, true,false, true,false,false,false,false,false,false,false,false,
      false,false,false,false,false,false,false,false,
     false,false,false,false,false,false,false,false,false,false,false, true,
      false, true,false,false,false,false,false,false,
     false, true,false, true,false,false, true,false, true,false,false,false,
      false,false,false,false,false,false,false,false,
     false,false,false,false,false,false,false,false,false,false,false, true,
      false, true,false,false,false,false,false,false,
     false, true,false,false,false,false, true,false, true,false,false,false,
      false,false,false,false,false,false,false,false };
  int* prior_fine_rdirs_in = new int[20*20] {
       3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,2,2,2,2,2,
       6,5,4,5,4,6,5,6,5,4,6,5,4,5,6,3,3,2,1,1,
       3,2,1,2,1,3,2,1,8,1,3,2,1,8,6,6,6,2,4,4,
       6,5,4,5,4,6,5,6,5,4,6,5,4,5,6,6,6,2,4,4,
       3,2,1,2,1,9,8,7,8,7,9,8,7,8,7,6,6,2,4,4,
       6,5,4,5,4,3,2,1,2,1,3,2,1,2,1,6,6,2,4,4,
       3,2,1,2,1,6,5,6,5,4,6,5,4,5,6,6,6,2,4,4,
       6,5,4,5,4,3,2,1,8,1,3,2,1,8,1,6,6,5,4,4,
       3,2,1,2,1,6,5,6,5,4,6,5,4,5,4,6,9,8,7,4,
       6,5,4,5,4,9,8,7,8,7,9,8,7,8,7,3,2,1,2,1,
       3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,6,5,6,5,4,
       6,5,4,5,4,6,5,6,5,4,6,5,4,5,4,9,8,7,2,1,
       3,2,1,2,1,9,8,7,2,1,3,2,1,8,1,6,5,6,5,4,
       6,5,4,5,4,6,5,6,5,4,6,5,4,5,3,2,2,2,2,2,
       3,2,1,2,1,9,8,7,8,7,9,8,7,8,6,2,2,2,2,2,
       6,5,4,5,4,8,8,8,8,8,3,2,1,2,6,0,0,0,0,0,
       3,2,1,2,1,3,2,1,2,1,6,5,4,5,6,0,0,0,0,0,
       6,5,4,5,4,6,5,6,5,4,3,2,1,8,6,0,0,0,0,0,
       9,8,7,8,7,9,8,7,8,7,6,5,4,5,6,0,0,0,0,0,
       8,8,8,8,8,8,8,8,8,8,9,8,7,8,6,0,0,0,0,0 };
  int* prior_fine_catchments_in = new int[20*20] {
       1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6,21,21,21,21,21,
       1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6,21,21,21,21,21,21,
       7, 7, 7, 8, 8, 9, 9, 9, 4,10,11,11,11, 6,21,21,21,21,21,21,
       7, 7, 7, 8, 8, 9, 9,10,10,10,11,11,11,12,21,21,21,21,21,21,
      13,13,13,14,14, 9, 9, 9,10,10,11,11,11,12,12,21,21,21,21,21,
      13,13,13,14,14,15,15,15,16,16,17,17,17,18,18,21,21,21,21,21,
      19,19,19,20,20,15,15,16,16,16,17,17,17,18,21,21,21,21,21,21,
      19,19,19,20,20,22,22,22,16,23,24,24,24,18,25,21,21,21,21,21,
      26,26,26,27,27,22,22,23,23,23,24,24,24,25,25,21,21,21,21,21,
      26,26,26,27,27,22,22,22,23,23,24,24,24,25,25,28,28,28,29,29,
      30,30,30,31,31,32,32,32,33,33,34,34,34,35,35,28,28,29,29,29,
      30,30,30,31,31,32,32,33,33,33,34,34,34,35,35,28,28,28,37,37,
      38,38,38,39,39,32,32,32,41,41,42,42,42,35,43,36,36,37,37,37,
      38,38,38,39,39,40,40,41,41,41,42,42,42,43,54,54,54,54,54,54,
      44,44,44,45,45,40,40,40,41,41,42,42,42,43,54,54,54,54,54,54,
      44,44,44,45,45,40,40,40,41,41,46,46,46,47,54,54,54,54,54,54,
      48,48,48,49,49,50,50,50,51,51,46,46,46,47,54,54,54,54,54,54,
      48,48,48,49,49,50,50,51,51,51,52,52,52,47,54,54,54,54,54,54,
      48,48,48,49,49,50,50,50,51,51,52,52,52,53,54,54,54,54,54,54,
      48,48,48,49,49,50,50,50,51,51,52,52,52,53,54,54,54,54,54,54 };
  double* cell_areas_in = new double[20*20] {1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1 };
  bool* landsea_in = new bool[20*20] {
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,true };
  int number_of_lakes = -1;
  bool* lake_mask = new bool[20*20];
  int* lake_numbers = new int[20*20];
  short* sinkless_rdirs = new short[20*20];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[20*20] {
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false,  true, false,  true, false, false,  true, false,  true,
        false, false,  true, false,  true, false, false, false, false,
        false, false,
       false, false,  true, false,  true,  true, false,  true, false,
         true,  true, false,  true, false,  true,  true,  true,  true,
        false, false,
       false,  true, false,  true, false, false,  true, false,  true,
        false, false,  true, false,  true, false, false, false,  true,
        false, false,
       false, false,  true, false, false, false, false,  true, false,
        false, false, false,  true, false, false, false, false,  true,
        false, false,
       false,  true, false,  true, false, false, false,  true, false,
        false, false, false,  true, false, false, false, false,  true,
        false, false,
       false, false,  true, false, false, false,  true, false,  true,
        false, false,  true, false,  true, false, false,  true, false,
         true, false,
       false,  true, false,  true, false, false, false,  true, false,
        false, false, false,  true, false, false, false, false,  true,
        false, false,
       false, false,  true, false, false, false,  true, false,  true,
        false, false,  true, false,  true, false, false,  true, false,
         true, false,
       false,  true, false,  true, false, false, false,  true, false,
        false, false, false,  true, false, false, false, false,  true,
        false, false,
       false, false,  true, false, false, false, false,  true, false,
        false, false, false,  true, false, false, false,  true, false,
         true, false,
       false,  true, false,  true, false, false,  true, false,  true,
        false, false,  true, false,  true, false, false, false,  true,
        false, false,
       false, false,  true, false, false, false, false,  true, false,
        false, false, false,  true, false, false, false,  true, false,
         true, false,
       false,  true, false,  true, false, false,  true, false,  true,
        false, false,  true, false,  true, false, false, false, false,
        false, false,
       false, false,  true, false, false, false, false,  true, false,
        false, false, false,  true, false, false, false, false, false,
        false, false,
       false,  true, false,  true, false, false, false,  true, false,
        false, false, false,  true, false, false, false, false, false,
        false, false,
       false, false,  true, false, false, false, false,  true, false,
        false, false,  true, false,  true, false, false, false, false,
        false, false,
       false,  true, false,  true, false, false,  true, false,  true,
        false, false, false,  true, false, false, false, false, false,
        false, false,
       false, false,  true, false, false, false, false,  true, false,
        false, false,  true, false,  true, false, false, false, false,
        false, false,
       false,  true, false, false, false, false,  true, false,  true,
        false, false, false, false, false, false, false, false, false,
        false, false };
  //Cells in each lake and lake connections and overflows the same - some lake numbers swapped
  //and difference in filling orders
  //All outflows the same
  vector<double>* expected_lakes_as_array = new vector<double> {
    68.0, 24.0, 1.0, 67.0, 0.0, 20.0, 9.0, 1.0, 20.0, 9.0, 1.0, 1.0, 2.0, 3.0, 2.0,
    -1.0, -1.0, 1.0, 6.0, -1.0, -1.0, 1.0, 7.0, -1.0, -1.0, 1.0, 24.0, 2.0, 67.0, 0.0,
    20.0, 7.0, 1.0, 20.0, 7.0, 1.0, 1.0, 2.0, 3.0, 1.0, -1.0, -1.0, 1.0, 6.0, -1.0,
    -1.0, 1.0, 7.0, -1.0, -1.0, 1.0, 28.0, 3.0, 63.0, 0.0, 20.0, 2.0, 1.0, 20.0, 2.0,
    1.0, 1.0, 2.0, 4.0, 8.0, -1.0, -1.0, 1.0, 9.0, -1.0, -1.0, 1.0, 12.0, -1.0, -1.0,
    1.0, 13.0, -1.0, -1.0, 1.0, 24.0, 4.0, 64.0, 0.0, 19.0, 14.0, 1.0, 19.0, 14.0, 2.0,
    0.0, 2.0, 3.0, 5.0, -1.0, -1.0, 1.0, 10.0, -1.0, -1.0, 1.0, 11.0, -1.0, -1.0, 1.0,
    24.0, 5.0, 64.0, 0.0, 19.0, 12.0, 1.0, 19.0, 12.0, 2.0, 0.0, 2.0, 3.0, 4.0, -1.0,
    -1.0, 1.0, 10.0, -1.0, -1.0, 1.0, 11.0, -1.0, -1.0, 1.0, 24.0, 6.0, 67.0, 0.0, 18.0,
    9.0, 1.0, 18.0, 9.0, 1.0, 1.0, 2.0, 3.0, 1.0, -1.0, -1.0, 1.0, 2.0, -1.0, -1.0,
    1.0, 7.0, -1.0, -1.0, 1.0, 24.0, 7.0, 67.0, 0.0, 18.0, 7.0, 1.0, 18.0, 7.0, 1.0,
    1.0, 2.0, 3.0, 1.0, -1.0, -1.0, 1.0, 2.0, -1.0, -1.0, 1.0, 6.0, -1.0, -1.0, 1.0,
    28.0, 8.0, 63.0, 0.0, 18.0, 4.0, 1.0, 18.0, 4.0, 1.0, 1.0, 2.0, 4.0, 3.0, -1.0,
    -1.0, 1.0, 9.0, -1.0, -1.0, 1.0, 12.0, -1.0, -1.0, 1.0, 13.0, -1.0, -1.0, 1.0, 28.0,
    9.0, 63.0, 0.0, 18.0, 2.0, 1.0, 18.0, 2.0, 1.0, 1.0, 2.0, 4.0, 3.0, -1.0, -1.0,
    1.0, 8.0, -1.0, -1.0, 1.0, 12.0, -1.0, -1.0, 1.0, 13.0, -1.0, -1.0, 1.0, 24.0, 10.0,
    64.0, 0.0, 17.0, 14.0, 1.0, 17.0, 14.0, 2.0, 0.0, 2.0, 3.0, 4.0, -1.0, -1.0, 1.0,
    5.0, -1.0, -1.0, 1.0, 11.0, -1.0, -1.0, 1.0, 24.0, 11.0, 64.0, 0.0, 17.0, 12.0, 1.0,
    17.0, 12.0, 2.0, 0.0, 2.0, 3.0, 4.0, -1.0, -1.0, 1.0, 5.0, -1.0, -1.0, 1.0, 10.0,
    -1.0, -1.0, 1.0, 28.0, 12.0, 63.0, 0.0, 16.0, 4.0, 1.0, 16.0, 4.0, 1.0, 1.0, 2.0,
    4.0, 3.0, -1.0, -1.0, 1.0, 8.0, -1.0, -1.0, 1.0, 9.0, -1.0, -1.0, 1.0, 13.0, -1.0,
    -1.0, 1.0, 28.0, 13.0, 63.0, 0.0, 16.0, 2.0, 1.0, 16.0, 2.0, 1.0, 1.0, 2.0, 4.0,
    3.0, -1.0, -1.0, 1.0, 8.0, -1.0, -1.0, 1.0, 9.0, -1.0, -1.0, 1.0, 12.0, -1.0, -1.0,
    1.0, 24.0, 14.0, 62.0, 0.0, 14.0, 14.0, 1.0, 14.0, 14.0, 2.0, 0.0, 2.0, 3.0, 15.0,
    -1.0, -1.0, 1.0, 22.0, -1.0, -1.0, 1.0, 23.0, -1.0, -1.0, 1.0, 24.0, 15.0, 62.0, 0.0,
    14.0, 12.0, 1.0, 14.0, 12.0, 2.0, 0.0, 2.0, 3.0, 14.0, -1.0, -1.0, 1.0, 22.0, -1.0,
    -1.0, 1.0, 23.0, -1.0, -1.0, 1.0, 24.0, 16.0, 60.0, 0.0, 14.0, 9.0, 1.0, 14.0, 9.0,
    1.0, 1.0, 2.0, 3.0, 17.0, -1.0, -1.0, 1.0, 24.0, -1.0, -1.0, 1.0, 25.0, -1.0, -1.0,
    1.0, 24.0, 17.0, 60.0, 0.0, 14.0, 7.0, 1.0, 14.0, 7.0, 1.0, 1.0, 2.0, 3.0, 16.0,
    -1.0, -1.0, 1.0, 24.0, -1.0, -1.0, 1.0, 25.0, -1.0, -1.0, 1.0, 64.0, 18.0, 61.0, 0.0,
    14.0, 4.0, 1.0, 14.0, 4.0, 1.0, 1.0, 2.0, 13.0, 19.0, -1.0, -1.0, 1.0, 26.0, -1.0,
    -1.0, 1.0, 27.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0, 37.0,
    -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 44.0, -1.0, -1.0, 1.0,
    49.0, -1.0, -1.0, 1.0, 50.0, -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0,
    1.0, 64.0, 19.0, 61.0, 0.0, 14.0, 2.0, 1.0, 14.0, 2.0, 1.0, 1.0, 2.0, 13.0, 18.0,
    -1.0, -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 27.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0, 1.0,
    31.0, -1.0, -1.0, 1.0, 37.0, -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0, -1.0,
    1.0, 44.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0, 1.0, 50.0, -1.0, -1.0, 1.0, 55.0, -1.0,
    -1.0, 1.0, 56.0, -1.0, -1.0, 1.0, 24.0, 20.0, 66.0, 0.0, 13.0, 19.0, 1.0, 13.0, 19.0,
    1.0, 1.0, 2.0, 3.0, 21.0, -1.0, -1.0, 1.0, 28.0, -1.0, -1.0, 1.0, 29.0, -1.0, -1.0,
    1.0, 24.0, 21.0, 66.0, 0.0, 13.0, 17.0, 1.0, 13.0, 17.0, 1.0, 1.0, 2.0, 3.0, 20.0,
    -1.0, -1.0, 1.0, 28.0, -1.0, -1.0, 1.0, 29.0, -1.0, -1.0, 1.0, 24.0, 22.0, 62.0, 0.0,
    12.0, 14.0, 1.0, 12.0, 14.0, 2.0, 0.0, 2.0, 3.0, 14.0, -1.0, -1.0, 1.0, 15.0, -1.0,
    -1.0, 1.0, 23.0, -1.0, -1.0, 1.0, 24.0, 23.0, 62.0, 0.0, 12.0, 12.0, 1.0, 12.0, 12.0,
    2.0, 0.0, 2.0, 3.0, 14.0, -1.0, -1.0, 1.0, 15.0, -1.0, -1.0, 1.0, 22.0, -1.0, -1.0,
    1.0, 24.0, 24.0, 60.0, 0.0, 12.0, 9.0, 1.0, 12.0, 9.0, 1.0, 1.0, 2.0, 3.0, 16.0,
    -1.0, -1.0, 1.0, 17.0, -1.0, -1.0, 1.0, 25.0, -1.0, -1.0, 1.0, 24.0, 25.0, 60.0, 0.0,
    12.0, 7.0, 1.0, 12.0, 7.0, 1.0, 1.0, 2.0, 3.0, 16.0, -1.0, -1.0, 1.0, 17.0, -1.0,
    -1.0, 1.0, 24.0, -1.0, -1.0, 1.0, 64.0, 26.0, 61.0, 0.0, 12.0, 4.0, 1.0, 12.0, 4.0,
    1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0, -1.0, 1.0, 27.0, -1.0, -1.0,
    1.0, 30.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0, 37.0, -1.0, -1.0, 1.0, 38.0, -1.0,
    -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 44.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0, 1.0, 50.0,
    -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0, 1.0, 64.0, 27.0, 61.0, 0.0,
    12.0, 2.0, 1.0, 12.0, 2.0, 1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0,
    -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0, 37.0,
    -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 44.0, -1.0, -1.0, 1.0,
    49.0, -1.0, -1.0, 1.0, 50.0, -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0,
    1.0, 24.0, 28.0, 66.0, 0.0, 11.0, 19.0, 1.0, 11.0, 19.0, 1.0, 1.0, 2.0, 3.0, 20.0,
    -1.0, -1.0, 1.0, 21.0, -1.0, -1.0, 1.0, 29.0, -1.0, -1.0, 1.0, 24.0, 29.0, 66.0, 0.0,
    11.0, 17.0, 1.0, 11.0, 17.0, 1.0, 1.0, 2.0, 3.0, 20.0, -1.0, -1.0, 1.0, 21.0, -1.0,
    -1.0, 1.0, 28.0, -1.0, -1.0, 1.0, 64.0, 30.0, 61.0, 0.0, 10.0, 4.0, 1.0, 10.0, 4.0,
    1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0, -1.0, 1.0, 26.0, -1.0, -1.0,
    1.0, 27.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0, 37.0, -1.0, -1.0, 1.0, 38.0, -1.0,
    -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 44.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0, 1.0, 50.0,
    -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0, 1.0, 64.0, 31.0, 61.0, 0.0,
    10.0, 2.0, 1.0, 10.0, 2.0, 1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0,
    -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 27.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0, 1.0, 37.0,
    -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 44.0, -1.0, -1.0, 1.0,
    49.0, -1.0, -1.0, 1.0, 50.0, -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0,
    1.0, 24.0, 32.0, 65.0, 0.0, 9.0, 14.0, 1.0, 9.0, 14.0, 1.0, 2.0, 3.0, 3.0, 33.0,
    -1.0, -1.0, 1.0, 39.0, -1.0, -1.0, 1.0, 40.0, -1.0, -1.0, 1.0, 24.0, 33.0, 65.0, 0.0,
    9.0, 12.0, 1.0, 9.0, 12.0, 1.0, 2.0, 3.0, 3.0, 32.0, -1.0, -1.0, 1.0, 39.0, -1.0,
    -1.0, 1.0, 40.0, -1.0, -1.0, 1.0, 24.0, 34.0, 59.0, 0.0, 9.0, 9.0, 1.0, 9.0, 9.0,
    1.0, 1.0, 2.0, 3.0, 35.0, -1.0, -1.0, 1.0, 41.0, -1.0, -1.0, 1.0, 42.0, -1.0, -1.0,
    1.0, 24.0, 35.0, 59.0, 0.0, 9.0, 7.0, 1.0, 9.0, 7.0, 1.0, 1.0, 2.0, 3.0, 34.0,
    -1.0, -1.0, 1.0, 41.0, -1.0, -1.0, 1.0, 42.0, -1.0, -1.0, 1.0, 76.0, 36.0, 68.0, 0.0,
    8.0, 18.0, 5.0, 8.0, 18.0, 1.0, 1.0, 2.0, 9.0, 19.0, 1.0, 1.0, 2.0, 7.0, 19.0,
    1.0, 1.0, 2.0, 9.0, 17.0, 1.0, 1.0, 2.0, 7.0, 17.0, 1.0, 6.0, 3.0, 11.0, 57.0,
    -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0, 59.0, -1.0, -1.0, 1.0, 60.0, -1.0, -1.0, 1.0,
    61.0, 1.0, 1.0, 0.0, 62.0, -1.0, -1.0, 1.0, 63.0, -1.0, -1.0, 1.0, 64.0, -1.0, -1.0,
    1.0, 65.0, -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0, 67.0, -1.0, -1.0, 1.0, 64.0, 37.0,
    61.0, 0.0, 8.0, 4.0, 1.0, 8.0, 4.0, 1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0,
    19.0, -1.0, -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 27.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0,
    1.0, 31.0, -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 44.0, -1.0,
    -1.0, 1.0, 49.0, -1.0, -1.0, 1.0, 50.0, -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0,
    -1.0, -1.0, 1.0, 64.0, 38.0, 61.0, 0.0, 8.0, 2.0, 1.0, 8.0, 2.0, 1.0, 1.0, 2.0,
    13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0, -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 27.0, -1.0,
    -1.0, 1.0, 30.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0, 37.0, -1.0, -1.0, 1.0, 43.0,
    -1.0, -1.0, 1.0, 44.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0, 1.0, 50.0, -1.0, -1.0, 1.0,
    55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0, 1.0, 24.0, 39.0, 65.0, 0.0, 7.0, 14.0, 1.0,
    7.0, 14.0, 1.0, 2.0, 3.0, 3.0, 32.0, -1.0, -1.0, 1.0, 33.0, -1.0, -1.0, 1.0, 40.0,
    -1.0, -1.0, 1.0, 24.0, 40.0, 65.0, 0.0, 7.0, 12.0, 1.0, 7.0, 12.0, 1.0, 2.0, 3.0,
    3.0, 32.0, -1.0, -1.0, 1.0, 33.0, -1.0, -1.0, 1.0, 39.0, -1.0, -1.0, 1.0, 24.0, 41.0,
    59.0, 0.0, 7.0, 9.0, 1.0, 7.0, 9.0, 1.0, 1.0, 2.0, 3.0, 34.0, -1.0, -1.0, 1.0,
    35.0, -1.0, -1.0, 1.0, 42.0, -1.0, -1.0, 1.0, 24.0, 42.0, 59.0, 0.0, 7.0, 7.0, 1.0,
    7.0, 7.0, 1.0, 1.0, 2.0, 3.0, 34.0, -1.0, -1.0, 1.0, 35.0, -1.0, -1.0, 1.0, 41.0,
    -1.0, -1.0, 1.0, 64.0, 43.0, 61.0, 0.0, 6.0, 4.0, 1.0, 6.0, 4.0, 1.0, 1.0, 2.0,
    13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0, -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 27.0, -1.0,
    -1.0, 1.0, 30.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0, 37.0, -1.0, -1.0, 1.0, 38.0,
    -1.0, -1.0, 1.0, 44.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0, 1.0, 50.0, -1.0, -1.0, 1.0,
    55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0, 1.0, 64.0, 44.0, 61.0, 0.0, 6.0, 2.0, 1.0,
    6.0, 2.0, 1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0, -1.0, 1.0, 26.0,
    -1.0, -1.0, 1.0, 27.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0,
    37.0, -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0,
    1.0, 50.0, -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0, 1.0, 24.0, 45.0,
    58.0, 0.0, 4.0, 14.0, 1.0, 4.0, 14.0, 1.0, 1.0, 2.0, 3.0, 46.0, -1.0, -1.0, 1.0,
    51.0, -1.0, -1.0, 1.0, 52.0, -1.0, -1.0, 1.0, 24.0, 46.0, 58.0, 0.0, 4.0, 12.0, 1.0,
    4.0, 12.0, 1.0, 1.0, 2.0, 3.0, 45.0, -1.0, -1.0, 1.0, 51.0, -1.0, -1.0, 1.0, 52.0,
    -1.0, -1.0, 1.0, 24.0, 47.0, 57.0, 0.0, 4.0, 9.0, 1.0, 4.0, 9.0, 1.0, 1.0, 2.0,
    3.0, 48.0, -1.0, -1.0, 1.0, 53.0, -1.0, -1.0, 1.0, 54.0, -1.0, -1.0, 1.0, 24.0, 48.0,
    57.0, 0.0, 4.0, 7.0, 1.0, 4.0, 7.0, 1.0, 1.0, 2.0, 3.0, 47.0, -1.0, -1.0, 1.0,
    53.0, -1.0, -1.0, 1.0, 54.0, -1.0, -1.0, 1.0, 64.0, 49.0, 61.0, 0.0, 4.0, 4.0, 1.0,
    4.0, 4.0, 1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0, -1.0, 1.0, 26.0,
    -1.0, -1.0, 1.0, 27.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0,
    37.0, -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 44.0, -1.0, -1.0,
    1.0, 50.0, -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0, -1.0, -1.0, 1.0, 64.0, 50.0,
    61.0, 0.0, 4.0, 2.0, 1.0, 4.0, 2.0, 1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0,
    19.0, -1.0, -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 27.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0,
    1.0, 31.0, -1.0, -1.0, 1.0, 37.0, -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0,
    -1.0, 1.0, 44.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 56.0,
    -1.0, -1.0, 1.0, 24.0, 51.0, 58.0, 0.0, 2.0, 14.0, 1.0, 2.0, 14.0, 1.0, 1.0, 2.0,
    3.0, 45.0, -1.0, -1.0, 1.0, 46.0, -1.0, -1.0, 1.0, 52.0, -1.0, -1.0, 1.0, 24.0, 52.0,
    58.0, 0.0, 2.0, 12.0, 1.0, 2.0, 12.0, 1.0, 1.0, 2.0, 3.0, 45.0, -1.0, -1.0, 1.0,
    46.0, -1.0, -1.0, 1.0, 51.0, -1.0, -1.0, 1.0, 24.0, 53.0, 57.0, 0.0, 2.0, 9.0, 1.0,
    2.0, 9.0, 1.0, 1.0, 2.0, 3.0, 47.0, -1.0, -1.0, 1.0, 48.0, -1.0, -1.0, 1.0, 54.0,
    -1.0, -1.0, 1.0, 24.0, 54.0, 57.0, 0.0, 2.0, 7.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0,
    3.0, 47.0, -1.0, -1.0, 1.0, 48.0, -1.0, -1.0, 1.0, 53.0, -1.0, -1.0, 1.0, 64.0, 55.0,
    61.0, 0.0, 2.0, 4.0, 1.0, 2.0, 4.0, 1.0, 1.0, 2.0, 13.0, 18.0, -1.0, -1.0, 1.0,
    19.0, -1.0, -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 27.0, -1.0, -1.0, 1.0, 30.0, -1.0, -1.0,
    1.0, 31.0, -1.0, -1.0, 1.0, 37.0, -1.0, -1.0, 1.0, 38.0, -1.0, -1.0, 1.0, 43.0, -1.0,
    -1.0, 1.0, 44.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0, 1.0, 50.0, -1.0, -1.0, 1.0, 56.0,
    -1.0, -1.0, 1.0, 64.0, 56.0, 61.0, 0.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0,
    13.0, 18.0, -1.0, -1.0, 1.0, 19.0, -1.0, -1.0, 1.0, 26.0, -1.0, -1.0, 1.0, 27.0, -1.0,
    -1.0, 1.0, 30.0, -1.0, -1.0, 1.0, 31.0, -1.0, -1.0, 1.0, 37.0, -1.0, -1.0, 1.0, 38.0,
    -1.0, -1.0, 1.0, 43.0, -1.0, -1.0, 1.0, 44.0, -1.0, -1.0, 1.0, 49.0, -1.0, -1.0, 1.0,
    50.0, -1.0, -1.0, 1.0, 55.0, -1.0, -1.0, 1.0, 80.0, 57.0, 68.0, 4.0, 47.0, 48.0, 53.0,
    54.0, 4.0, 9.0, 5.0, 4.0, 9.0, 1.0, 0.0, 2.0, 3.0, 8.0, 1.0, 0.0, 2.0, 2.0,
    9.0, 1.0, 0.0, 2.0, 4.0, 7.0, 1.0, 0.0, 2.0, 2.0, 7.0, 1.0, 5.0, 3.0, 11.0,
    36.0, -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0, 59.0, -1.0, -1.0, 1.0, 60.0, -1.0, -1.0,
    1.0, 61.0, 1.0, 1.0, 0.0, 62.0, -1.0, -1.0, 1.0, 63.0, -1.0, -1.0, 1.0, 64.0, -1.0,
    -1.0, 1.0, 65.0, -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0, 67.0, -1.0, -1.0, 1.0, 80.0,
    58.0, 68.0, 4.0, 45.0, 46.0, 51.0, 52.0, 4.0, 14.0, 5.0, 4.0, 14.0, 1.0, 0.0, 2.0,
    3.0, 13.0, 1.0, 0.0, 2.0, 2.0, 14.0, 1.0, 0.0, 2.0, 4.0, 12.0, 1.0, 0.0, 2.0,
    2.0, 12.0, 1.0, 5.0, 3.0, 11.0, 36.0, -1.0, -1.0, 1.0, 57.0, -1.0, -1.0, 1.0, 59.0,
    -1.0, -1.0, 1.0, 60.0, -1.0, -1.0, 1.0, 61.0, 1.0, 1.0, 0.0, 62.0, -1.0, -1.0, 1.0,
    63.0, -1.0, -1.0, 1.0, 64.0, -1.0, -1.0, 1.0, 65.0, -1.0, -1.0, 1.0, 66.0, -1.0, -1.0,
    1.0, 67.0, -1.0, -1.0, 1.0, 80.0, 59.0, 68.0, 4.0, 34.0, 35.0, 41.0, 42.0, 9.0, 9.0,
    5.0, 9.0, 9.0, 1.0, 0.0, 2.0, 8.0, 8.0, 1.0, 0.0, 2.0, 7.0, 9.0, 1.0, 0.0,
    2.0, 9.0, 7.0, 1.0, 0.0, 2.0, 7.0, 7.0, 1.0, 5.0, 3.0, 11.0, 36.0, -1.0, -1.0,
    1.0, 57.0, -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0, 60.0, -1.0, -1.0, 1.0, 61.0, 1.0,
    1.0, 0.0, 62.0, -1.0, -1.0, 1.0, 63.0, -1.0, -1.0, 1.0, 64.0, -1.0, -1.0, 1.0, 65.0,
    -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0, 67.0, -1.0, -1.0, 1.0, 80.0, 60.0, 68.0, 4.0,
    16.0, 17.0, 24.0, 25.0, 14.0, 9.0, 5.0, 14.0, 9.0, 1.0, 0.0, 2.0, 13.0, 8.0, 1.0,
    0.0, 2.0, 12.0, 9.0, 1.0, 0.0, 2.0, 14.0, 7.0, 1.0, 0.0, 2.0, 12.0, 7.0, 1.0,
    5.0, 3.0, 11.0, 36.0, -1.0, -1.0, 1.0, 57.0, -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0,
    59.0, -1.0, -1.0, 1.0, 61.0, 1.0, 1.0, 0.0, 62.0, -1.0, -1.0, 1.0, 63.0, -1.0, -1.0,
    1.0, 64.0, -1.0, -1.0, 1.0, 65.0, -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0, 67.0, -1.0,
    -1.0, 1.0, 165.0, 61.0, 68.0, 14.0, 18.0, 19.0, 26.0, 27.0, 30.0, 31.0, 37.0, 38.0, 43.0,
    44.0, 49.0, 50.0, 55.0, 56.0, 14.0, 4.0, 20.0, 14.0, 4.0, 1.0, 0.0, 2.0, 13.0, 3.0,
    1.0, 0.0, 2.0, 12.0, 4.0, 1.0, 0.0, 2.0, 14.0, 2.0, 1.0, 0.0, 2.0, 12.0, 2.0,
    1.0, 0.0, 2.0, 11.0, 3.0, 1.0, 0.0, 2.0, 10.0, 4.0, 1.0, 0.0, 2.0, 10.0, 2.0,
    1.0, 0.0, 2.0, 9.0, 3.0, 1.0, 0.0, 2.0, 8.0, 4.0, 1.0, 0.0, 2.0, 8.0, 2.0,
    1.0, 0.0, 2.0, 7.0, 3.0, 1.0, 0.0, 2.0, 6.0, 4.0, 1.0, 0.0, 2.0, 6.0, 2.0,
    1.0, 0.0, 2.0, 5.0, 3.0, 1.0, 0.0, 2.0, 4.0, 4.0, 1.0, 0.0, 2.0, 4.0, 2.0,
    1.0, 0.0, 2.0, 3.0, 3.0, 1.0, 0.0, 2.0, 2.0, 4.0, 1.0, 0.0, 2.0, 2.0, 2.0,
    1.0, 20.0, 3.0, 11.0, 36.0, -1.0, -1.0, 1.0, 57.0, -1.0, -1.0, 1.0, 58.0, -1.0, -1.0,
    1.0, 59.0, -1.0, -1.0, 1.0, 60.0, -1.0, -1.0, 1.0, 62.0, -1.0, -1.0, 1.0, 63.0, -1.0,
    -1.0, 1.0, 64.0, -1.0, -1.0, 1.0, 65.0, -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0, 67.0,
    -1.0, -1.0, 1.0, 80.0, 62.0, 68.0, 4.0, 14.0, 15.0, 22.0, 23.0, 14.0, 14.0, 5.0, 14.0,
    14.0, 2.0, 0.0, 2.0, 13.0, 13.0, 2.0, 0.0, 2.0, 12.0, 14.0, 2.0, 0.0, 2.0, 14.0,
    12.0, 2.0, 0.0, 2.0, 12.0, 12.0, 2.0, 0.0, 3.0, 11.0, 36.0, -1.0, -1.0, 1.0, 57.0,
    -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0, 59.0, -1.0, -1.0, 1.0, 60.0, -1.0, -1.0, 1.0,
    61.0, 1.0, 1.0, 0.0, 63.0, -1.0, -1.0, 1.0, 64.0, -1.0, -1.0, 1.0, 65.0, -1.0, -1.0,
    1.0, 66.0, -1.0, -1.0, 1.0, 67.0, -1.0, -1.0, 1.0, 91.0, 63.0, 68.0, 5.0, 3.0, 8.0,
    9.0, 12.0, 13.0, 20.0, 2.0, 7.0, 20.0, 2.0, 1.0, 0.0, 2.0, 19.0, 3.0, 1.0, 0.0,
    2.0, 18.0, 4.0, 1.0, 0.0, 2.0, 18.0, 2.0, 1.0, 0.0, 2.0, 17.0, 3.0, 1.0, 0.0,
    2.0, 16.0, 4.0, 1.0, 0.0, 2.0, 16.0, 2.0, 1.0, 7.0, 3.0, 11.0, 36.0, -1.0, -1.0,
    1.0, 57.0, -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0, 59.0, -1.0, -1.0, 1.0, 60.0, -1.0,
    -1.0, 1.0, 61.0, -1.0, -1.0, 1.0, 62.0, -1.0, -1.0, 1.0, 64.0, -1.0, -1.0, 1.0, 65.0,
    -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0, 67.0, -1.0, -1.0, 1.0, 80.0, 64.0, 68.0, 4.0,
    4.0, 5.0, 10.0, 11.0, 19.0, 14.0, 5.0, 19.0, 14.0, 2.0, 0.0, 2.0, 18.0, 13.0, 2.0,
    0.0, 2.0, 17.0, 14.0, 2.0, 0.0, 2.0, 19.0, 12.0, 2.0, 0.0, 2.0, 17.0, 12.0, 2.0,
    0.0, 3.0, 11.0, 36.0, -1.0, -1.0, 1.0, 57.0, -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0,
    59.0, -1.0, -1.0, 1.0, 60.0, -1.0, -1.0, 1.0, 61.0, 1.0, 1.0, 0.0, 62.0, -1.0, -1.0,
    1.0, 63.0, -1.0, -1.0, 1.0, 65.0, -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0, 67.0, -1.0,
    -1.0, 1.0, 60.0, 65.0, 68.0, 4.0, 32.0, 33.0, 39.0, 40.0, 9.0, 14.0, 1.0, 9.0, 14.0,
    1.0, 0.0, 3.0, 11.0, 36.0, -1.0, -1.0, 1.0, 57.0, -1.0, -1.0, 1.0, 58.0, -1.0, -1.0,
    1.0, 59.0, -1.0, -1.0, 1.0, 60.0, -1.0, -1.0, 1.0, 61.0, 1.0, 1.0, 0.0, 62.0, -1.0,
    -1.0, 1.0, 63.0, -1.0, -1.0, 1.0, 64.0, -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0, 67.0,
    -1.0, -1.0, 1.0, 80.0, 66.0, 68.0, 4.0, 20.0, 21.0, 28.0, 29.0, 13.0, 19.0, 5.0, 13.0,
    19.0, 1.0, 0.0, 2.0, 12.0, 18.0, 1.0, 0.0, 2.0, 11.0, 19.0, 1.0, 0.0, 2.0, 13.0,
    17.0, 1.0, 0.0, 2.0, 11.0, 17.0, 1.0, 5.0, 3.0, 11.0, 36.0, -1.0, -1.0, 1.0, 57.0,
    -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0, 59.0, -1.0, -1.0, 1.0, 60.0, -1.0, -1.0, 1.0,
    61.0, 1.0, 1.0, 0.0, 62.0, -1.0, -1.0, 1.0, 63.0, -1.0, -1.0, 1.0, 64.0, -1.0, -1.0,
    1.0, 65.0, -1.0, -1.0, 1.0, 67.0, -1.0, -1.0, 1.0, 80.0, 67.0, 68.0, 4.0, 1.0, 2.0,
    6.0, 7.0, 20.0, 9.0, 5.0, 20.0, 9.0, 1.0, 0.0, 2.0, 19.0, 8.0, 1.0, 0.0, 2.0,
    18.0, 9.0, 1.0, 0.0, 2.0, 20.0, 7.0, 1.0, 0.0, 2.0, 18.0, 7.0, 1.0, 5.0, 3.0,
    11.0, 36.0, -1.0, -1.0, 1.0, 57.0, -1.0, -1.0, 1.0, 58.0, -1.0, -1.0, 1.0, 59.0, -1.0,
    -1.0, 1.0, 60.0, -1.0, -1.0, 1.0, 61.0, 1.0, 1.0, 0.0, 62.0, -1.0, -1.0, 1.0, 63.0,
    -1.0, -1.0, 1.0, 64.0, -1.0, -1.0, 1.0, 65.0, -1.0, -1.0, 1.0, 66.0, -1.0, -1.0, 1.0,
    538.0, 68.0, -1.0, 12.0, 36.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0,
    67.0, 8.0, 18.0, 103.0, 8.0, 18.0, 1.0, 0.0, 3.0, 9.0, 19.0, 1.0, 0.0, 3.0, 7.0,
    19.0, 1.0, 0.0, 3.0, 10.0, 18.0, 1.0, 0.0, 3.0, 9.0, 17.0, 1.0, 0.0, 3.0, 7.0,
    17.0, 1.0, 0.0, 3.0, 6.0, 18.0, 1.0, 0.0, 3.0, 11.0, 19.0, 1.0, 0.0, 3.0, 11.0,
    17.0, 1.0, 0.0, 3.0, 5.0, 18.0, 1.0, 0.0, 3.0, 12.0, 18.0, 1.0, 0.0, 3.0, 4.0,
    18.0, 2.0, 0.0, 3.0, 13.0, 19.0, 1.0, 0.0, 3.0, 13.0, 17.0, 1.0, 0.0, 3.0, 3.0,
    18.0, 2.0, 0.0, 3.0, 3.0, 17.0, 2.0, 0.0, 3.0, 3.0, 16.0, 2.0, 0.0, 3.0, 3.0,
    15.0, 2.0, 0.0, 3.0, 4.0, 14.0, 1.0, 0.0, 3.0, 2.0, 14.0, 1.0, 0.0, 3.0, 5.0,
    13.0, 2.0, 0.0, 3.0, 3.0, 13.0, 1.0, 0.0, 3.0, 6.0, 13.0, 2.0, 0.0, 3.0, 4.0,
    12.0, 1.0, 0.0, 3.0, 2.0, 12.0, 1.0, 0.0, 3.0, 7.0, 14.0, 1.0, 0.0, 3.0, 7.0,
    12.0, 1.0, 0.0, 3.0, 3.0, 11.0, 2.0, 0.0, 3.0, 8.0, 13.0, 1.0, 0.0, 3.0, 3.0,
    10.0, 1.0, 0.0, 3.0, 9.0, 14.0, 1.0, 0.0, 3.0, 9.0, 12.0, 1.0, 0.0, 3.0, 4.0,
    9.0, 1.0, 0.0, 3.0, 2.0, 9.0, 1.0, 0.0, 3.0, 10.0, 13.0, 2.0, 0.0, 3.0, 5.0,
    8.0, 1.0, 0.0, 3.0, 3.0, 8.0, 1.0, 0.0, 3.0, 11.0, 13.0, 2.0, 0.0, 3.0, 6.0,
    8.0, 1.0, 0.0, 3.0, 4.0, 7.0, 1.0, 0.0, 3.0, 2.0, 7.0, 1.0, 0.0, 3.0, 12.0,
    14.0, 2.0, 0.0, 3.0, 12.0, 12.0, 2.0, 0.0, 3.0, 7.0, 9.0, 1.0, 0.0, 3.0, 7.0,
    7.0, 1.0, 0.0, 3.0, 3.0, 6.0, 1.0, 0.0, 3.0, 13.0, 13.0, 2.0, 0.0, 3.0, 8.0,
    8.0, 1.0, 0.0, 3.0, 3.0, 5.0, 2.0, 0.0, 3.0, 14.0, 14.0, 2.0, 0.0, 3.0, 14.0,
    12.0, 2.0, 0.0, 3.0, 9.0, 9.0, 1.0, 0.0, 3.0, 9.0, 7.0, 1.0, 0.0, 3.0, 4.0,
    4.0, 1.0, 0.0, 3.0, 2.0, 4.0, 1.0, 0.0, 3.0, 15.0, 13.0, 2.0, 0.0, 3.0, 10.0,
    8.0, 1.0, 0.0, 3.0, 5.0, 3.0, 1.0, 0.0, 3.0, 3.0, 3.0, 1.0, 0.0, 3.0, 16.0,
    13.0, 2.0, 0.0, 3.0, 11.0, 8.0, 1.0, 0.0, 3.0, 6.0, 4.0, 1.0, 0.0, 3.0, 6.0,
    2.0, 1.0, 0.0, 3.0, 4.0, 2.0, 1.0, 0.0, 3.0, 2.0, 2.0, 1.0, 0.0, 3.0, 17.0,
    14.0, 2.0, 0.0, 3.0, 17.0, 12.0, 2.0, 0.0, 3.0, 12.0, 9.0, 1.0, 0.0, 3.0, 12.0,
    7.0, 1.0, 0.0, 3.0, 7.0, 3.0, 1.0, 0.0, 3.0, 18.0, 13.0, 2.0, 0.0, 3.0, 13.0,
    8.0, 1.0, 0.0, 3.0, 8.0, 4.0, 1.0, 0.0, 3.0, 8.0, 2.0, 1.0, 0.0, 3.0, 19.0,
    14.0, 2.0, 0.0, 3.0, 19.0, 12.0, 2.0, 0.0, 3.0, 14.0, 9.0, 1.0, 0.0, 3.0, 14.0,
    7.0, 1.0, 0.0, 3.0, 9.0, 3.0, 1.0, 0.0, 3.0, 15.0, 8.0, 1.0, 0.0, 3.0, 10.0,
    4.0, 1.0, 0.0, 3.0, 10.0, 2.0, 1.0, 0.0, 3.0, 16.0, 8.0, 1.0, 0.0, 3.0, 11.0,
    3.0, 1.0, 0.0, 3.0, 17.0, 8.0, 1.0, 0.0, 3.0, 12.0, 4.0, 1.0, 0.0, 3.0, 12.0,
    2.0, 1.0, 0.0, 3.0, 18.0, 9.0, 1.0, 0.0, 3.0, 18.0, 7.0, 1.0, 0.0, 3.0, 13.0,
    3.0, 1.0, 0.0, 3.0, 19.0, 8.0, 1.0, 0.0, 3.0, 14.0, 4.0, 1.0, 0.0, 3.0, 14.0,
    2.0, 1.0, 0.0, 3.0, 20.0, 9.0, 1.0, 0.0, 3.0, 20.0, 7.0, 1.0, 0.0, 3.0, 15.0,
    3.0, 1.0, 0.0, 3.0, 16.0, 4.0, 1.0, 0.0, 3.0, 16.0, 2.0, 1.0, 0.0, 3.0, 17.0,
    3.0, 1.0, 0.0, 3.0, 18.0, 4.0, 1.0, 0.0, 3.0, 18.0, 2.0, 1.0, 0.0, 3.0, 19.0,
    3.0, 1.0, 0.0, 3.0, 20.0, 2.0, 1.0, 80.0, 4.0, 1.0, -1.0, 4.0, 4.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 68);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,EvaluateBasinsSeven) {
  int nlat_fine = 20;
  int nlon_fine = 20;
  int nlat_coarse = 4;
  int nlon_coarse = 4;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[4*4] {1,2,3,4,
                                         5,6,7,8,
                                         9,9,9,9,
                                         9,9,9,0 };
  double* corrected_orography_in = new double[20*20] {
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,3.0,4.0, 4.0,9.0,9.0,9.0,9.0,
      9.0,7.0,8.0,6.0,7.0, 7.0,5.0,6.0,4.0,5.0, 5.0,4.0,4.5,9.0,9.0, 9.0,2.0,3.0,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,3.0,4.0, 4.0,9.0,1.5,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0,
      //
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,1.0,9.0,9.0,
      7.0,6.0,7.0,8.0,7.0, 6.0,7.0,7.0,7.5,5.0, 4.0,5.0,6.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,6.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,6.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      //
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,7.0, 7.0,7.0,1.5,7.0,7.0,
      //
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,4.0,4.0,4.0, 9.0,9.0,4.0,4.0,4.0, 4.0,4.0,4.0,4.0,4.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0 };
  double* raw_orography_in = new double[20*20] {
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,3.0,4.0, 4.0,9.0,9.0,9.0,9.0,
      9.0,7.0,8.0,6.0,7.0, 7.0,5.0,6.0,4.0,5.0, 5.0,4.0,4.5,9.0,9.0, 9.0,2.0,3.0,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,3.0,4.0, 4.0,9.0,1.5,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0,
      //
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,2.0,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,1.0,9.0,9.0,
      7.0,6.0,7.0,8.0,7.0, 6.0,7.0,7.0,7.5,5.0, 4.0,5.0,6.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,6.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,6.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      //
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,1.5,9.0,9.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,7.0, 7.0,7.0,1.5,7.0,7.0,
      //
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,9.0, 9.0,9.0,4.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,4.0,4.0,4.0, 9.0,9.0,4.0,4.0,4.0, 4.0,4.0,4.0,4.0,4.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0,
      9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,7.0, 0.0,0.0,0.0,0.0,0.0 };
  bool* minima_in = new bool[20*20] {
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false,  true, false, false, false, false,
      false, false,
      false,  true, false,  true, false, false,  true, false,  true,
      false, false,  true, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, true, false, false, false,  true,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false,  true,
      false, false,
      false,  true, false, false, false,  true, false, false, false,
      false,  true, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false };
  int* prior_fine_rdirs_in = new int[20*20] {
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       3, 2, 1, 2, 1, 3, 2, 3, 2, 1, 3, 2, 1, 5, 6, 6, 2, 2, 2, 2,
       6, 5, 4, 5, 4, 6, 5, 6, 5, 4, 4, 5, 4, 2, 6, 6, 6, 2, 1, 2,
       9, 8, 7, 8, 7, 9, 8, 7, 8, 7, 9, 8, 7, 5, 6, 6, 8, 5, 4, 4,
       8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 2, 7, 8,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 2, 4, 4,
       3, 2, 1, 2, 3, 2, 2, 2, 2, 3, 2, 1, 2, 2, 2, 6, 6, 5, 4, 4,
       6, 5, 4, 6, 6, 5, 4, 4, 6, 6, 5, 2, 2, 2, 2, 6, 6, 2, 4, 4,
       9, 8, 7, 8, 9, 8, 7, 8, 8, 9, 8, 2, 2, 2, 2, 6, 6, 2, 4, 4,
       8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 6, 6, 2, 4, 4,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0,
       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0,
       8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 0, 0, 0, 0, 0,
       8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 0, 0, 0, 0, 0 };
  int* prior_fine_catchments_in = new int[20*20] {
       1, 1, 1, 2,  2,  3,  3, 4, 4,  4,  5,  5, 5, 6, 7, 7, 7, 7, 7, 7,
       1, 1, 1, 2,  2,  3,  3, 4, 4,  4,  5,  5, 5, 6, 7, 7, 7, 7, 7, 7,
       1, 1, 1, 2,  2,  3,  3, 4, 4,  4,  4,  5, 5,13, 7, 7, 7, 7, 7, 7,
       1, 1, 1, 2,  2,  3,  3, 3, 4,  4,  5,  5, 5,13, 7, 7, 7, 7, 7, 7,
       1, 1, 1, 2,  2,  3,  3, 3, 4,  4,  5,  5, 5,13, 7, 7, 7, 8, 7, 7,
       9, 9, 9,10, 10, 10, 10,10,11, 11, 11, 11,12,12,12, 8, 8, 8, 8, 8,
       9, 9, 9,10, 10, 10, 10,10,11, 11, 11, 11,12,12,12, 8, 8, 8, 8, 8,
       9, 9, 9,10, 10, 10, 10,10,11, 11, 11, 12,12,12,12,12,12,12,12,12,
       9, 9, 9,10, 10, 10, 10,10,11, 11, 11, 12,12,12,12,12,12,12,12,12,
       9, 9, 9,10, 10, 10, 10,10,11, 11, 11, 12,12,12,12,12,12,12,12,12,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12,12,12,12,12,12,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12,12,12,12,12,12,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12,12,12,12,12,12,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12,12,12,12,12,12,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12,12,12,12,12,12,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12, 0, 0, 0, 0, 0,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12, 0, 0, 0, 0, 0,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12, 0, 0, 0, 0, 0,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12, 0, 0, 0, 0, 0,
      12,12,12,12, 12, 12, 12,12,12, 12, 12, 12,12,12,12, 0, 0, 0, 0, 0 };
  double* cell_areas_in = new double[20*20] {1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
                              1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1 };
  bool* landsea_in = new bool[20*20] {
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,false,
      false,false,false,false,false, false,false,false,false,false, false,false,false,false,false, false,false,false,false,true};
  int number_of_lakes = -1;
  bool* lake_mask = new bool[20*20];
  int* lake_numbers = new int[20*20];
  short* sinkless_rdirs = new short[20*20];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[20*20] {
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false,  true, false, false, false, false,
        false, false,
       false,  true, false,  true, false, false,  true, false,  true,
        false, false,  true, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false,  true, false, false, false,  true,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false,  true,
        false, false,
        true,  true,  true, false,  true,  true,  true,  true, false,
         true,  true,  true, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false,
       false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false,
        false, false };
  vector<double>* expected_lakes_as_array = new vector<double> {
    12.0, 26.0, 1.0, -1.0, 0.0, 8.0, 11.0, 3.0, 8.0, 11.0, 1.0, 1.0, 5.0, 8.0, 12.0,
    1.0, 1.0, 5.0, 8.0, 10.0, 1.0, 4.0, 6.0, 1.0, -1.0, 3.0, 3.0, 0.0, 31.0, 2.0,
    -1.0, 0.0, 8.0, 6.0, 4.0, 8.0, 6.0, 1.0, 1.0, 7.0, 8.0, 7.0, 1.0, 1.0, 7.0,
    8.0, 5.0, 1.0, 1.0, 7.0, 8.0, 8.0, 1.0, 3.0, 7.5, 1.0, 1.0, -1.0, -1.0, 1.0,
    26.0, 3.0, -1.0, 0.0, 8.0, 2.0, 3.0, 8.0, 2.0, 1.0, 1.0, 7.0, 8.0, 3.0, 1.0,
    1.0, 7.0, 8.0, 1.0, 1.0, 4.0, 8.0, 1.0, 2.0, -1.0, -1.0, 1.0, 16.0, 4.0, -1.0,
    0.0, 7.0, 18.0, 1.0, 7.0, 18.0, 1.0, 0.5, 1.5, 1.0, -1.0, 4.0, 4.0, 0.0, 16.0,
    5.0, -1.0, 0.0, 4.0, 18.0, 1.0, 4.0, 18.0, 1.0, 0.5, 2.0, 1.0, 4.0, -1.0, -1.0,
    1.0, 16.0, 6.0, -1.0, 0.0, 4.0, 14.0, 1.0, 4.0, 14.0, 1.0, 1.0, 4.0, 1.0, -1.0,
    1.0, 4.0, 0.0, 16.0, 7.0, -1.0, 0.0, 3.0, 12.0, 1.0, 3.0, 12.0, 1.0, 0.5, 4.5,
    1.0, 6.0, -1.0, -1.0, 1.0, 16.0, 8.0, -1.0, 0.0, 3.0, 9.0, 1.0, 3.0, 9.0, 1.0,
    1.0, 5.0, 1.0, 7.0, -1.0, -1.0, 1.0, 16.0, 9.0, -1.0, 0.0, 3.0, 7.0, 1.0, 3.0,
    7.0, 1.0, 1.0, 6.0, 1.0, 8.0, -1.0, -1.0, 1.0, 16.0, 10.0, -1.0, 0.0, 3.0, 4.0,
    1.0, 3.0, 4.0, 1.0, 1.0, 7.0, 1.0, 9.0, -1.0, -1.0, 1.0, 16.0, 11.0, -1.0, 0.0,
    3.0, 2.0, 1.0, 3.0, 2.0, 1.0, 1.0, 8.0, 1.0, 10.0, -1.0, -1.0, 1.0, 16.0, 12.0,
    -1.0, 0.0, 2.0, 14.0, 1.0, 2.0, 14.0, 1.0, 1.0, 4.0, 1.0, -1.0, 1.0, 4.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 12);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

TEST_F(BasinEvaluationTest,EvaluateBasinsEight) {
  int nlat_fine = 9;
  int nlon_fine = 9;
  int nlat_coarse = 3;
  int nlon_coarse = 3;
  grid_params* fine_grid_params =
    new latlon_grid_params(nlat_fine,nlon_fine,true);
  int* coarse_catchment_nums_in = new int[3*3] {3, 5, 1,
                                         4, 2, 1,
                                         4, 1, 1 };
  double* corrected_orography_in = new double[9*9] {
       0., 1.,  0.,  10., 10., 10., 10.0, 10.0, 10.0,
       2., 10., 10., 10., 10., 10., 10.0, 10.0, 10.0,
       2., 10., 10., 10., 10., 10., 10.0, 10.0, 10.0,
      10., 2.0, 10., 10., 10., 10., 10.0, 10.0, 10.0,
      10., 1.0, 1.0, 1.0,  0., 10., 10.0, 10.0, 10.0,
      10., 1.0, 10., 10., 10.,  8., 10.0, 10.0, 10.0,
      10., 1.0, 10., 10., 10.,  8., 10.0, 10.0, 10.0,
      10., 1.0, 10., 10., 10.,  8., 10.0, 10.0, 10.0,
      10.,  0., 10., 10., 10.,  8.,  8.0,  8.0,  0.0 };

  double* raw_orography_in = new double[9*9] {
       0., 1.,  0.,  10., 10., 10., 10.0, 10.0, 10.0,
       2., 10., 10., 10., 10., 10., 10.0, 10.0, 10.0,
       2., 10., 10., 10., 10., 10., 10.0, 10.0, 10.0,
      10., 2.0, 10., 10., 10., 10., 10.0, 10.0, 10.0,
      10., 1.0, 1.0, 1.0,  0., 10., 10.0, 10.0, 10.0,
      10., 1.0, 10., 10., 10.,  8., 10.0, 10.0, 10.0,
      10., 1.0, 10., 10., 10.,  8., 10.0, 10.0, 10.0,
      10., 1.0, 10., 10., 10.,  8., 10.0, 10.0, 10.0,
      10.,  0., 10., 10., 10.,  8.,  8.0,  8.0,  0.0 };

  bool* minima_in = new bool[9*9] {
       true, false, true,  false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false,  true, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false, false, false, false, false, false, false, false, false,
      false,  true, false, false, false, false, false, false, false };
  int* prior_fine_rdirs_in = new int[9*9] {
       5, 4, 5, 6, 6, 6, 6, 6, 2,
       8, 4, 8, 6, 6, 6, 6, 6, 2,
       8, 4, 6, 6, 6, 6, 6, 6, 2,
       6, 2, 4, 3, 2, 1, 6, 6, 2,
       6, 2, 4, 6, 5, 4, 6, 6, 2,
       6, 2, 4, 6, 6, 2, 6, 6, 2,
       6, 2, 4, 6, 6, 2, 6, 6, 2,
       6, 2, 4, 6, 6, 2, 6, 6, 2,
       6, 5, 4, 6, 6, 6, 6, 6, 0 };
  int* prior_fine_catchments_in = new int[9*9] {
       3, 3, 5, 1, 1, 1, 1, 1, 1,
       3, 3, 5, 1, 1, 1, 1, 1, 1,
       3, 3, 1, 1, 1, 1, 1, 1, 1,
       4, 4, 4, 2, 2, 2, 1, 1, 1,
       4, 4, 4, 2, 2, 2, 1, 1, 1,
       4, 4, 4, 1, 1, 1, 1, 1, 1,
       4, 4, 4, 1, 1, 1, 1, 1, 1,
       4, 4, 4, 1, 1, 1, 1, 1, 1,
       4, 4, 4, 1, 1, 1, 1, 1, 0 };
  double* cell_areas_in = new double[9*9];
  std::fill_n(cell_areas_in,9*9,1.0);
  bool* landsea_in = new bool[9*9];
  std:fill_n(landsea_in,9*9,false);
  landsea_in[9*9-1] = 1;
  int number_of_lakes = -1;
  bool* lake_mask = new bool[9*9];
  int* lake_numbers = new int[9*9];
  short* sinkless_rdirs = new short[9*9];
  vector<double>* lakes_as_array = latlon_evaluate_basins(
                                          landsea_in,
                                          minima_in,
                                          raw_orography_in,
                                          corrected_orography_in,
                                          cell_areas_in,
                                          prior_fine_rdirs_in,
                                          prior_fine_catchments_in,
                                          coarse_catchment_nums_in,
                                          nlat_fine,nlon_fine,
                                          nlat_coarse,nlon_coarse,
                                          lake_numbers,
                                          sinkless_rdirs,
                                          number_of_lakes,
                                          lake_mask);
  bool* expected_lake_mask = new bool[9*9] {
        true,  true,  true, false, false, false, false, false, false,
        true, false, false, false, false, false, false, false, false,
        true, false, false, false, false, false, false, false, false,
       false,  true, false, false, false, false, false, false, false,
       false,  true,  true,  true,  true, false, false, false, false,
       false,  true, false, false, false, false, false, false, false,
       false,  true, false, false, false, false, false, false, false,
       false,  true, false, false, false, false, false, false, false,
       false,  true, false, false, false, false, false, false, false };
  //Cells in each lake and lake connections and overflows the same - some lake numbers swapped
  //and difference in filling orders
  //All outflows checked
  vector<double>* expected_lakes_as_array = new vector<double> {
    7.0, 16.0, 1.0, 6.0, 0.0, 9.0, 2.0, 1.0, 9.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0,
    -1.0, -1.0, 1.0, 16.0, 2.0, 6.0, 0.0, 5.0, 5.0, 1.0, 5.0, 5.0, 1.0, 1.0, 1.0,
    1.0, 1.0, -1.0, -1.0, 1.0, 16.0, 3.0, 5.0, 0.0, 1.0, 3.0, 1.0, 1.0, 3.0, 1.0,
    1.0, 1.0, 1.0, 4.0, -1.0, -1.0, 1.0, 16.0, 4.0, 5.0, 0.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 3.0, -1.0, -1.0, 1.0, 28.0, 5.0, 7.0, 2.0, 3.0, 4.0,
    1.0, 3.0, 3.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 1.0, 1.0, 1.0,
    1.0, 3.0, 2.0, 1.0, 6.0, 2.0, 1.0, 0.0, 53.0, 6.0, 7.0, 2.0, 1.0, 2.0, 9.0,
    2.0, 8.0, 9.0, 2.0, 1.0, 0.0, 1.0, 8.0, 2.0, 1.0, 0.0, 1.0, 7.0, 2.0, 1.0,
    0.0, 1.0, 6.0, 2.0, 1.0, 0.0, 1.0, 5.0, 3.0, 1.0, 0.0, 1.0, 5.0, 2.0, 1.0,
    0.0, 1.0, 5.0, 4.0, 1.0, 0.0, 1.0, 5.0, 5.0, 1.0, 8.0, 2.0, 1.0, 5.0, -1.0,
    -1.0, 1.0, 83.0, 7.0, -1.0, 2.0, 5.0, 6.0, 1.0, 3.0, 14.0, 1.0, 3.0, 1.0, 0.0,
    2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0,
    2.0, 3.0, 1.0, 1.0, 0.0, 2.0, 4.0, 2.0, 1.0, 0.0, 2.0, 5.0, 3.0, 1.0, 0.0,
    2.0, 5.0, 2.0, 1.0, 0.0, 2.0, 5.0, 4.0, 1.0, 0.0, 2.0, 6.0, 2.0, 1.0, 0.0,
    2.0, 5.0, 5.0, 1.0, 0.0, 2.0, 7.0, 2.0, 1.0, 0.0, 2.0, 8.0, 2.0, 1.0, 0.0,
    2.0, 9.0, 2.0, 1.0, 84.0, 8.0, 1.0, -1.0, 3.0, 3.0, 0.0 };
  EXPECT_TRUE(number_of_lakes == 7);
  EXPECT_TRUE(*lakes_as_array == *expected_lakes_as_array);
  EXPECT_TRUE(field<bool>(lake_mask,fine_grid_params) ==
              field<bool>(expected_lake_mask,fine_grid_params));
}

}
